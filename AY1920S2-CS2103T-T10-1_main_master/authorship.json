[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "mainClassName \u003d \u0027seedu.recipe.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    archiveName \u003d \u0027healthybaby.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        \u0027site-name\u0027: \u0027HealthyBaby\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S2-CS2103T-T10-1/main\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 2,
      "-": 151,
      "beatricetay": 2
    }
  },
  {
    "path": "src/main/java/seedu/recipe/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 61,
      "beatricetay": 3
    }
  },
  {
    "path": "src/main/java/seedu/recipe/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "beatricetay": 1
    }
  },
  {
    "path": "src/main/java/seedu/recipe/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.ReadOnlyCookedRecordBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.ReadOnlyPlannedBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.RecipeBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.cooked.CookedRecordBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.plan.PlannedBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.storage.CookedRecordBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.storage.JsonCookedRecordBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.storage.JsonRecipeBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.storage.RecipeBookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.storage.Storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.storage.StorageManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.storage.plan.JsonPlannedBookStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.storage.plan.PlannedBookStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.ui.Ui;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.ui.UiManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 1, true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing RecipeBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        RecipeBookStorage recipeBookStorage \u003d new JsonRecipeBookStorage(userPrefs.getRecipeBookFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        CookedRecordBookStorage cookedRecordBookStorage \u003d new JsonCookedRecordBookStorage("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                userPrefs.getCookedRecordFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        PlannedBookStorage plannedBookStorage \u003d new JsonPlannedBookStorage(userPrefs.getPlannedBookFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        storage \u003d new StorageManager(recipeBookStorage, cookedRecordBookStorage, plannedBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s recipe book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * The data from the sample recipe book will be used instead if {@code storage}\u0027s recipe book is not found,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * or an empty recipe book will be used instead if errors occur when reading {@code storage}\u0027s recipe book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Optional\u003cReadOnlyRecipeBook\u003e recipeBookOptional;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        ReadOnlyRecipeBook initialData;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Optional\u003cReadOnlyCookedRecordBook\u003e recordBookOptional;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        ReadOnlyCookedRecordBook initialRecords;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Optional\u003cReadOnlyPlannedBook\u003e plannedBookOptional;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        ReadOnlyPlannedBook initialPlannedData;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            plannedBookOptional \u003d storage.readPlannedBook();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            if (!plannedBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                logger.info(\"Data file for planned recipes not found. Will be starting with a blank PlannedBook\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            initialPlannedData \u003d plannedBookOptional.orElse(new PlannedBook());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty PlannedBook\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            initialPlannedData \u003d new PlannedBook();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty PlannedBook\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            initialPlannedData \u003d new PlannedBook();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            recipeBookOptional \u003d storage.readRecipeBook();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (!recipeBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                logger.info(\"Data file for recipes not found. Will be starting with a sample RecipeBook\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            initialData \u003d recipeBookOptional.orElseGet(SampleDataUtil::getSampleRecipeBook);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty RecipeBook\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                    + \" and PlannedBook\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            initialData \u003d new RecipeBook();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            initialPlannedData \u003d new PlannedBook();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            logger.warning(\"Problem while reading from the file for recipes. \""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                    + \"Will be starting with an empty RecipeBook\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            initialData \u003d new RecipeBook();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            recordBookOptional \u003d storage.readCookedRecordBook();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            if (!recordBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Recordbook\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            initialRecords \u003d recordBookOptional.orElseGet(SampleDataUtil::getSampleRecordBook);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Recordbook\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            initialRecords \u003d new CookedRecordBook();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Recordbook\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            initialRecords \u003d new CookedRecordBook();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return new ModelManager(initialData, userPrefs, initialRecords, initialPlannedData);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty RecipeBook\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        logger.info(\"Starting RecipeBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Recipe Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 15,
      "tharshita": 30,
      "-": 138,
      "beatricetay": 50
    }
  },
  {
    "path": "src/main/java/seedu/recipe/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 62,
      "beatricetay": 1
    }
  },
  {
    "path": "src/main/java/seedu/recipe/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 72,
      "beatricetay": 1
    }
  },
  {
    "path": "src/main/java/seedu/recipe/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private static final String LOG_FILE \u003d \"recipebook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 1,
      "-": 110,
      "beatricetay": 1
    }
  },
  {
    "path": "src/main/java/seedu/recipe/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final String MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX \u003d \"The recipe index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String MESSAGE_INVALID_PLANNED_DATE \u003d \"The date provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String MESSAGE_INVALID_PLANNED_RECIPE_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            \"The planned recipe index provided is invalid\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final String MESSAGE_RECIPES_LISTED_OVERVIEW \u003d \"%1$d recipes listed!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 2,
      "-": 10,
      "beatricetay": 4
    }
  },
  {
    "path": "src/main/java/seedu/recipe/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 112,
      "beatricetay": 1
    }
  },
  {
    "path": "src/main/java/seedu/recipe/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 53,
      "beatricetay": 1
    }
  },
  {
    "path": "src/main/java/seedu/recipe/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "beatricetay": 1
    }
  },
  {
    "path": "src/main/java/seedu/recipe/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "beatricetay": 1
    }
  },
  {
    "path": "src/main/java/seedu/recipe/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "beatricetay": 2
    }
  },
  {
    "path": "src/main/java/seedu/recipe/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static boolean isAnyNonEmpty(Collection\u003c?\u003e... items) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return Stream.of(items).anyMatch(item -\u003e !item.isEmpty());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 4,
      "-": 34,
      "beatricetay": 1
    }
  },
  {
    "path": "src/main/java/seedu/recipe/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "beatricetay": 3
    }
  },
  {
    "path": "src/main/java/seedu/recipe/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 82,
      "beatricetay": 1
    }
  },
  {
    "path": "src/main/java/seedu/recipe/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 140,
      "beatricetay": 3
    }
  },
  {
    "path": "src/main/java/seedu/recipe/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 66,
      "beatricetay": 2
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.cooked.Record;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.plan.PlannedDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Returns the RecipeBook."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * @see seedu.recipe.model.Model#getRecipeBook()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    ReadOnlyRecipeBook getRecipeBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of recipes */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    ObservableList\u003cRecipe\u003e getFilteredRecipeList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    Path getRecipeBookFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns an unmodifiable view of cooked records"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @return list"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    ObservableList\u003cRecord\u003e getFilteredRecordList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns an unmodifiable view of goals tally"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @return list"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    ObservableList\u003cInteger\u003e getFilteredGoalsTally();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Returns an unmodifiable view of the scheduled recipes."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    ObservableList\u003cPlannedDate\u003e getFilteredPlannedList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 3,
      "tharshita": 16,
      "-": 37,
      "beatricetay": 14
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.parser.RecipeBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.cooked.Record;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.plan.PlannedDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final RecipeBookParser recipeBookParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        recipeBookParser \u003d new RecipeBookParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Command command \u003d recipeBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            storage.saveRecipeBook(model.getRecipeBook());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            storage.saveCookedRecordBook(model.getRecordBook());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            storage.savePlannedBook(model.getPlannedBook());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public ReadOnlyRecipeBook getRecipeBook() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return model.getRecipeBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public ObservableList\u003cRecipe\u003e getFilteredRecipeList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return model.getFilteredRecipeList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public Path getRecipeBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return model.getRecipeBookFilePath();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public ObservableList\u003cRecord\u003e getFilteredRecordList() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return model.getFilteredRecordList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public ObservableList\u003cInteger\u003e getFilteredGoalsTally() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return model.getFilteredGoalsTally();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    };"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public ObservableList\u003cPlannedDate\u003e getFilteredPlannedList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return model.getFilteredPlannedList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 8,
      "tharshita": 17,
      "-": 55,
      "beatricetay": 19
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_GOAL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_FRUIT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_GRAIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_OTHER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_PROTEIN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_VEGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_STEP;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Adds a recipe to the recipe book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a recipe to the address book.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            + PREFIX_TIME + \"TIME \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_GRAIN + \"GRAIN]... \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_VEGE + \"VEGETABLE]... \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_PROTEIN + \"PROTEIN]... \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_FRUIT + \"FRUIT]... \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_OTHER + \"OTHER]... \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"[\" + PREFIX_STEP + \"STEP]... \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            + \"[\" + PREFIX_GOAL + \"GOAL]...\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + PREFIX_NAME + \"Caesar Salad \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + PREFIX_TIME + \"10 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + PREFIX_INGREDIENT_VEGE + \"100g, Tomato \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + PREFIX_INGREDIENT_OTHER + \"100g, 100% Parmesan cheese (grandma\u0027s favourite)\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + PREFIX_STEP + \"Cut tomatoes \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + PREFIX_STEP + \"Remove honeydew skin \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + PREFIX_GOAL + \"Herbivore \";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New recipe added: %1$s\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RECIPE \u003d \"This recipe already exists in the address book\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private final Recipe toAdd;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final CommandType commandType;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Recipe}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public AddCommand(Recipe recipe) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireNonNull(recipe);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.toAdd \u003d recipe;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.commandType \u003d CommandType.MAIN_LONE;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (model.hasRecipe(toAdd)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_RECIPE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        model.addRecipe(toAdd);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        model.commitBook(commandType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 13,
      "tharshita": 11,
      "-": 36,
      "beatricetay": 19
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/commands/AddIngredientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.EditCommand.createEditedRecipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_FRUIT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_GRAIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_OTHER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_PROTEIN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_VEGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.model.Model.PREDICATE_SHOW_ALL_PLANNED_RECIPES;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.model.Model.PREDICATE_SHOW_ALL_RECIPES;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.logic.commands.EditCommand.EditRecipeDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Fruit;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Grain;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Other;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Protein;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Vegetable;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Adds ingredient(s) to an existing recipe in the recipe book."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class AddIngredientCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addingredient\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds ingredient(s) to an existing recipe in the \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"recipe book.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"Parameters: [INDEX of recipe] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_GRAIN + \"GRAIN]... \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_VEGE + \"VEGETABLE]... \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_PROTEIN + \"PROTEIN]... \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_FRUIT + \"FRUIT]... \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_OTHER + \"OTHER]...\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + PREFIX_INGREDIENT_VEGE + \"100g, Tomato \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + PREFIX_INGREDIENT_VEGE + \"100g, Lettuce \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + PREFIX_INGREDIENT_OTHER + \"50g, Honeydew\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String MESSAGE_ADD_INGREDIENTS_SUCCESS \u003d \"Successfully added ingredient(s) to %1$s!\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final EditRecipeDescriptor editRecipeDescriptor;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final CommandType commandType;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param index of the recipe in the filtered recipe list to edit"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param editRecipeDescriptor details to edit the recipe with"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public AddIngredientCommand(Index index, EditRecipeDescriptor editRecipeDescriptor) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.editRecipeDescriptor \u003d editRecipeDescriptor;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.commandType \u003d CommandType.MAIN;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredRecipeList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Recipe recipeToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        updateGrainsList(recipeToEdit, editRecipeDescriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        updateVegetablesList(recipeToEdit, editRecipeDescriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        updateProteinsList(recipeToEdit, editRecipeDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        updateFruitsList(recipeToEdit, editRecipeDescriptor);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        updateOthersList(recipeToEdit, editRecipeDescriptor);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Recipe editedRecipe \u003d createEditedRecipe(recipeToEdit, editRecipeDescriptor);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        model.setRecipe(recipeToEdit, editedRecipe);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        model.updateFilteredRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        model.updateFilteredPlannedList(PREDICATE_SHOW_ALL_PLANNED_RECIPES);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        model.commitBook(commandType);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_INGREDIENTS_SUCCESS, recipeToEdit.getName().toString()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Adds the original list of {@code Grain} ingredients to the {@code editRecipeDescriptor}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private void updateGrainsList(Recipe recipeToEdit, EditRecipeDescriptor editRecipeDescriptor) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (editRecipeDescriptor.getGrains().isPresent()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            Set\u003cGrain\u003e updatedGrainsList \u003d new TreeSet\u003c\u003e(editRecipeDescriptor.getGrains().get());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            updatedGrainsList.addAll(recipeToEdit.getGrains());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            editRecipeDescriptor.setGrains(updatedGrainsList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            editRecipeDescriptor.setGrains(recipeToEdit.getGrains());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Adds the original list of {@code Vegetable} ingredients to the {@code editRecipeDescriptor}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private void updateVegetablesList(Recipe recipeToEdit, EditRecipeDescriptor editRecipeDescriptor) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (editRecipeDescriptor.getVegetables().isPresent()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            Set\u003cVegetable\u003e updatedVegetablesList \u003d new TreeSet\u003c\u003e(editRecipeDescriptor.getVegetables().get());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            updatedVegetablesList.addAll(recipeToEdit.getVegetables());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            editRecipeDescriptor.setVegetables(updatedVegetablesList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            editRecipeDescriptor.setVegetables(recipeToEdit.getVegetables());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Adds the original list of {@code Protein} ingredients to the {@code editRecipeDescriptor}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private void updateProteinsList(Recipe recipeToEdit, EditRecipeDescriptor editRecipeDescriptor) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (editRecipeDescriptor.getProteins().isPresent()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            Set\u003cProtein\u003e updatedProteinsList \u003d new TreeSet\u003c\u003e(editRecipeDescriptor.getProteins().get());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            updatedProteinsList.addAll(recipeToEdit.getProteins());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            editRecipeDescriptor.setProteins(updatedProteinsList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            editRecipeDescriptor.setProteins(recipeToEdit.getProteins());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Adds the original list of {@code Fruit} ingredients to the {@code editRecipeDescriptor}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private void updateFruitsList(Recipe recipeToEdit, EditRecipeDescriptor editRecipeDescriptor) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (editRecipeDescriptor.getFruits().isPresent()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            Set\u003cFruit\u003e updatedFruitsList \u003d new TreeSet\u003c\u003e(editRecipeDescriptor.getFruits().get());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            updatedFruitsList.addAll(recipeToEdit.getFruits());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            editRecipeDescriptor.setFruits(updatedFruitsList);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            editRecipeDescriptor.setFruits(recipeToEdit.getFruits());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Adds the original list of {@code Other} ingredients to the {@code editRecipeDescriptor}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private void updateOthersList(Recipe recipeToEdit, EditRecipeDescriptor editRecipeDescriptor) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (editRecipeDescriptor.getOthers().isPresent()) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            Set\u003cOther\u003e updatedOthersList \u003d new TreeSet\u003c\u003e(editRecipeDescriptor.getOthers().get());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            updatedOthersList.addAll(recipeToEdit.getOthers());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            editRecipeDescriptor.setOthers(updatedOthersList);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            editRecipeDescriptor.setOthers(recipeToEdit.getOthers());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                || (other instanceof AddIngredientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                \u0026\u0026 index.equals(((AddIngredientCommand) other).index)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                \u0026\u0026 editRecipeDescriptor.equals(((AddIngredientCommand) other).editRecipeDescriptor)); // state check"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 143,
      "beatricetay": 20
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/commands/AddStepCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.EditCommand.createEditedRecipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_STEP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.model.Model.PREDICATE_SHOW_ALL_PLANNED_RECIPES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.model.Model.PREDICATE_SHOW_ALL_RECIPES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Step;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Adds step(s) to an existing recipe in the recipe book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class AddStepCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addstep\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds step(s) to an existing recipe in the \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"recipe book.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"Parameters: [INDEX of recipe] \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"[\" + PREFIX_STEP + \"STEP]...\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + PREFIX_STEP + \"Insert new step here\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String MESSAGE_ADD_STEPS_SUCCESS \u003d \"Successfully added step(s) to %1$s!\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final List\u003cStep\u003e newSteps;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final CommandType commandType;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param index of the recipe in the filtered recipe list to edit"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param newSteps is the list of steps that the user wishes to add to the recipe"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public AddStepCommand(Index index, List\u003cStep\u003e newSteps) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.newSteps \u003d newSteps;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.commandType \u003d CommandType.MAIN;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredRecipeList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        EditCommand.EditRecipeDescriptor editRecipeDescriptor \u003d new EditCommand.EditRecipeDescriptor();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Recipe recipeToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        List\u003cStep\u003e updatedStepsList \u003d new ArrayList\u003c\u003e(recipeToEdit.getSteps());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        updatedStepsList.addAll(newSteps);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        editRecipeDescriptor.setSteps(updatedStepsList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Recipe editedRecipe \u003d createEditedRecipe(recipeToEdit, editRecipeDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        model.setRecipe(recipeToEdit, editedRecipe);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        model.updateFilteredRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        model.updateFilteredPlannedList(PREDICATE_SHOW_ALL_PLANNED_RECIPES);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        model.commitBook(commandType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_STEPS_SUCCESS, recipeToEdit.getName().toString()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                || (other instanceof AddStepCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                \u0026\u0026 index.equals(((AddStepCommand) other).index)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                \u0026\u0026 newSteps.equals(((AddStepCommand) other).newSteps)); // state check"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 69,
      "beatricetay": 12
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.RecipeBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.plan.PlannedBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Clears the recipe book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Recipe book and planned recipes have been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final CommandType commandType \u003d CommandType.MAIN;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        model.setRecipeBook(new RecipeBook());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        model.setPlannedBook(new PlannedBook());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        model.commitBook(commandType);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 4,
      "-": 16,
      "beatricetay": 6
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "beatricetay": 3
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.ui.tab.Tab;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * The application should switch tab."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private final Tab switchTab;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, Tab switchTab, boolean exit) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.switchTab \u003d switchTab;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this(feedbackToUser, false, null, false);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public boolean isSwitchTab() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return switchTab !\u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public Tab getTab() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return switchTab;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                \u0026\u0026 switchTab \u003d\u003d otherCommandResult.switchTab"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, switchTab, exit);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 19,
      "-": 67,
      "beatricetay": 2
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/commands/CommandType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "package seedu.recipe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Enums for the types of commands. Used to assist Undo and Redo operations."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    MAIN,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    MAIN_LONE,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    PLAN,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    GOALS"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 11
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/commands/CookedCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "package seedu.recipe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.cooked.Record;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.ui.tab.Tab;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Adds cooked recipes identified by index into cookedRecordsBook."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class CookedCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"cooked\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            + \": Indicate that the recipe has been cooked at the current time\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            + \"Parameters: INDEX NUMBER(s) (must be positive integers)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RECORD \u003d \"This recipe has already been added!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private final Index[] targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private final Tab goalsTab \u003d Tab.GOALS;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private final CommandType commandType;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public CookedCommand(Index[] targetIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.commandType \u003d CommandType.GOALS;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        List\u003cRecipe\u003e mostRecentList \u003d model.getFilteredRecipeList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder().append(\"Cooked \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        for (int i \u003d 0; i \u003c targetIndex.length; i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            if (targetIndex[i].getZeroBased() \u003e\u003d mostRecentList.size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            Recipe recipeCooked \u003d mostRecentList.get(targetIndex[i].getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            Record record \u003d new Record(recipeCooked.getName(), new Date(), recipeCooked.getGoals());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            if (model.hasRecord(record)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_RECORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            model.addRecord(record);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            if (i \u003d\u003d targetIndex.length - 1 \u0026\u0026 targetIndex.length !\u003d 1) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                sb.append(\" and \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            sb.append(recipeCooked.getName().toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            if (i \u003c targetIndex.length - 2) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                sb.append(\", \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        sb.append(\"!\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        model.commitBook(commandType);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return new CommandResult(sb.toString(), false, goalsTab, false);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                || (other instanceof CookedCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                \u0026\u0026 Arrays.equals(targetIndex, ((CookedCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 72,
      "beatricetay": 3
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Deletes a recipe identified using it\u0027s displayed index from the recipe book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \": Deletes the recipe identified by the index number(s) used in the displayed recipe list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"Parameters: INDEX NUMBER(s) (must be positive integers)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Deleted %1$s from recipe book!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final Index[] targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final CommandType commandType;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public DeleteCommand(Index[] targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.commandType \u003d CommandType.MAIN;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredRecipeList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        List\u003cString\u003e deletedRecipesList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (!canDeleteTargetRecipes(lastShownList.size(), targetIndex)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        for (int i \u003d 0; i \u003c targetIndex.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            Index indexAfterEachDeletion \u003d Index.fromZeroBased(targetIndex[i].getZeroBased() - i);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            Recipe recipeToDelete \u003d lastShownList.get(indexAfterEachDeletion.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            model.deleteRecipe(recipeToDelete);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            deletedRecipesList.add(recipeToDelete.getName().toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        model.commitBook(commandType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, getListAsFormattedString(deletedRecipesList)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Formats a list of recipe names into a string with appropriate commas and conjunctions."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private String getListAsFormattedString(List\u003cString\u003e listToFormat) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        StringBuilder formattedString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        for (int i \u003d 0; i \u003c listToFormat.size(); i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (i \u003d\u003d listToFormat.size() - 1 \u0026\u0026 listToFormat.size() !\u003d 1) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                formattedString.append(\" and \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            formattedString.append(listToFormat.get(i));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (i \u003c listToFormat.size() - 2) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                formattedString.append(\", \");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return formattedString.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Checks if the recipe that the user wishes to delete exists within the recipe list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private boolean canDeleteTargetRecipes(int lastShownListSize, Index[] targetIndex) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        for (int i \u003d targetIndex.length - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (targetIndex[i].getOneBased() \u003e lastShownListSize) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                \u0026\u0026 Arrays.equals(targetIndex, ((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 50,
      "tharshita": 3,
      "-": 33,
      "beatricetay": 7
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/commands/DeleteIngredientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.EditCommand.createEditedRecipe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_FRUIT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_GRAIN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_OTHER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_PROTEIN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_VEGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.model.Model.PREDICATE_SHOW_ALL_PLANNED_RECIPES;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.model.Model.PREDICATE_SHOW_ALL_RECIPES;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.concurrent.atomic.AtomicInteger;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.logic.commands.EditCommand.EditRecipeDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Fruit;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Grain;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Other;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Protein;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Vegetable;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Deletes ingredient(s) from an existing recipe in the recipe book."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class DeleteIngredientCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteingredient\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes ingredient(s) from an existing recipe in the \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"recipe book.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"Parameters: [INDEX of recipe] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_GRAIN + \"GRAIN]... \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_VEGE + \"VEGETABLE]... \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_PROTEIN + \"PROTEIN]... \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_FRUIT + \"FRUIT]... \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_OTHER + \"OTHER]...\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + PREFIX_INGREDIENT_VEGE + \"Tomato \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + PREFIX_INGREDIENT_VEGE + \"Lettuce \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + PREFIX_INGREDIENT_OTHER + \"Honeydew\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String MESSAGE_DELETE_INGREDIENTS_SUCCESS \u003d \"Successfully deleted ingredient(s) from %1$s!\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String MESSAGE_DELETING_TOO_MANY_INGREDIENTS \u003d \"Attempting to delete all ingredients or \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"more ingredients than %1$s has. Ingredients list cannot be empty!\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String MESSAGE_NO_SUCH_INGREDIENT \u003d \"%1$s is either not %2$s ingredient \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"or it does not exist in %3$s!\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final EditRecipeDescriptor editRecipeDescriptor;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final CommandType commandType;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param index of the recipe in the filtered recipe list to edit"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param editRecipeDescriptor details to edit the recipe with"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public DeleteIngredientCommand(Index index, EditRecipeDescriptor editRecipeDescriptor) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.editRecipeDescriptor \u003d editRecipeDescriptor;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.commandType \u003d CommandType.MAIN;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredRecipeList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Recipe recipeToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        int numberOfCurrentIngredients \u003d recipeToEdit.getTotalNumberOfIngredients();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (getNumberOfIngredientsToDelete(recipeToEdit, editRecipeDescriptor) \u003e\u003d numberOfCurrentIngredients) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new CommandException("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    String.format(MESSAGE_DELETING_TOO_MANY_INGREDIENTS, recipeToEdit.getName().toString()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        updateGrainsList(recipeToEdit, editRecipeDescriptor);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        updateVegetablesList(recipeToEdit, editRecipeDescriptor);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        updateProteinsList(recipeToEdit, editRecipeDescriptor);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        updateFruitsList(recipeToEdit, editRecipeDescriptor);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        updateOthersList(recipeToEdit, editRecipeDescriptor);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Recipe editedRecipe \u003d createEditedRecipe(recipeToEdit, editRecipeDescriptor);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        model.setRecipe(recipeToEdit, editedRecipe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        model.updateFilteredRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        model.updateFilteredPlannedList(PREDICATE_SHOW_ALL_PLANNED_RECIPES);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        model.commitBook(commandType);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_INGREDIENTS_SUCCESS, recipeToEdit.getName().toString()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Calculates and returns the number of ingredients that is to be deleted."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private int getNumberOfIngredientsToDelete(Recipe recipeToEdit, EditRecipeDescriptor editRecipeDescriptor) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(recipeToEdit);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(editRecipeDescriptor);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        AtomicInteger numberOfIngredientsToDelete \u003d new AtomicInteger(0);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // If the ingredient prefix (eg. ig/) is present, check if suffix is empty (\"\")."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // If it is empty, all ingredients from that type will be deleted."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        editRecipeDescriptor.getGrains()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .ifPresent(grainSet -\u003e numberOfIngredientsToDelete.addAndGet(grainSet.size() \u003e 0"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        ? grainSet.size()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        : recipeToEdit.getGrains().size()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        editRecipeDescriptor.getVegetables()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .ifPresent(vegetableSet -\u003e numberOfIngredientsToDelete.addAndGet(vegetableSet.size() \u003e 0"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        ? vegetableSet.size()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        : recipeToEdit.getVegetables().size()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        editRecipeDescriptor.getProteins()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .ifPresent(proteinSet -\u003e numberOfIngredientsToDelete.addAndGet(proteinSet.size() \u003e 0"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        ? proteinSet.size()"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        : recipeToEdit.getProteins().size()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        editRecipeDescriptor.getFruits()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .ifPresent(fruitSet -\u003e numberOfIngredientsToDelete.addAndGet(fruitSet.size() \u003e 0"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        ? fruitSet.size()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        : recipeToEdit.getFruits().size()));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        editRecipeDescriptor.getOthers()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .ifPresent(otherSet -\u003e numberOfIngredientsToDelete.addAndGet(otherSet.size() \u003e 0"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        ? otherSet.size()"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        : recipeToEdit.getOthers().size()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return numberOfIngredientsToDelete.get();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Removes the specified {@code Grain} ingredient(s) from the current list of grains."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * If no grain ingredient(s) were specified but \"ig/\" prefix was present, all grains will be removed."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * If the specified grain ingredient(s) do not exist in the current list, CommandException is thrown."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private void updateGrainsList(Recipe recipeToEdit, EditRecipeDescriptor editRecipeDescriptor)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(recipeToEdit);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(editRecipeDescriptor);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Set\u003cGrain\u003e editedGrainSet;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Set\u003cGrain\u003e grainsToDelete \u003d editRecipeDescriptor.getGrains().orElse(null);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (grainsToDelete !\u003d null \u0026\u0026 !grainsToDelete.isEmpty()) { // Case: The suffix of \"ig/\" is not empty"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            Set\u003cGrain\u003e currentGrainsList \u003d new TreeSet\u003c\u003e(recipeToEdit.getGrains());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            for (Grain grain : grainsToDelete) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                if (!currentGrainsList.contains(grain)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    throw new CommandException(String.format(MESSAGE_NO_SUCH_INGREDIENT,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            grain, \"a grain\", recipeToEdit.getName().toString()));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                currentGrainsList.remove(grain);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            editedGrainSet \u003d currentGrainsList;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else if (grainsToDelete !\u003d null) { // Case: The suffix of \"ig/\" is empty"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            editedGrainSet \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else { // Case: The user did not input the grains prefix, \"ig/\""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            editedGrainSet \u003d recipeToEdit.getGrains();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        editRecipeDescriptor.setGrains(editedGrainSet);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Removes the specified {@code Vegetable} ingredient(s) from the current list of vegetables."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * If no vegetable ingredient(s) were specified but \"iv/\" prefix was present, all ingredients will be removed."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * If the specified vegetable ingredient(s) do not exist in the current list, CommandException is thrown."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private void updateVegetablesList(Recipe recipeToEdit, EditRecipeDescriptor editRecipeDescriptor)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(recipeToEdit);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(editRecipeDescriptor);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Set\u003cVegetable\u003e editedVegetableSet;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Set\u003cVegetable\u003e vegetablesToDelete \u003d editRecipeDescriptor.getVegetables().orElse(null);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (vegetablesToDelete !\u003d null \u0026\u0026 !vegetablesToDelete.isEmpty()) { // Case: The suffix of \"iv/\" is not empty"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            Set\u003cVegetable\u003e currentVegetablesList \u003d new TreeSet\u003c\u003e(recipeToEdit.getVegetables());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            for (Vegetable vegetable : vegetablesToDelete) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                if (!currentVegetablesList.contains(vegetable)) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    throw new CommandException(String.format(MESSAGE_NO_SUCH_INGREDIENT,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            vegetable, \"a vegetable\", recipeToEdit.getName().toString()));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                currentVegetablesList.remove(vegetable);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            editedVegetableSet \u003d currentVegetablesList;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else if (vegetablesToDelete !\u003d null) { // Case: The suffix of \"iv/\" is empty"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            editedVegetableSet \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else { // Case: The user did not input the vegetables prefix, \"iv/\""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            editedVegetableSet \u003d recipeToEdit.getVegetables();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        editRecipeDescriptor.setVegetables(editedVegetableSet);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Removes the specified {@code Protein} ingredient(s) from the current list of proteins."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * If no protein ingredient(s) were specified but \"ip/\" prefix was present, all proteins will be removed."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * If the specified protein ingredient(s) do not exist in the current list, CommandException is thrown."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private void updateProteinsList(Recipe recipeToEdit, EditRecipeDescriptor editRecipeDescriptor)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(recipeToEdit);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(editRecipeDescriptor);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Set\u003cProtein\u003e editedProteinSet;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Set\u003cProtein\u003e proteinsToDelete \u003d editRecipeDescriptor.getProteins().orElse(null);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (proteinsToDelete !\u003d null \u0026\u0026 !proteinsToDelete.isEmpty()) { // Case: The suffix of \"ip/\" is not empty"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            Set\u003cProtein\u003e currentProteinsList \u003d new TreeSet\u003c\u003e(recipeToEdit.getProteins());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            for (Protein protein : proteinsToDelete) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                if (!currentProteinsList.contains(protein)) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    throw new CommandException(String.format(MESSAGE_NO_SUCH_INGREDIENT,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            protein, \"a protein\", recipeToEdit.getName().toString()));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                currentProteinsList.remove(protein);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            editedProteinSet \u003d currentProteinsList;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else if (proteinsToDelete !\u003d null) { // Case: The suffix of \"ip/\" is empty"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            editedProteinSet \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else { // Case: The user did not input the proteins prefix, \"ip/\""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            editedProteinSet \u003d recipeToEdit.getProteins();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        editRecipeDescriptor.setProteins(editedProteinSet);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Removes the specified {@code Fruit} ingredient(s) from the current list of fruits."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * If no fruit ingredient(s) were specified but \"if/\" prefix was present, all fruits will be removed."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * If the specified fruit ingredient(s) do not exist in the current list, CommandException is thrown."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private void updateFruitsList(Recipe recipeToEdit, EditRecipeDescriptor editRecipeDescriptor)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(recipeToEdit);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(editRecipeDescriptor);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Set\u003cFruit\u003e editedFruitSet;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Set\u003cFruit\u003e fruitsToDelete \u003d editRecipeDescriptor.getFruits().orElse(null);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (fruitsToDelete !\u003d null \u0026\u0026 !fruitsToDelete.isEmpty()) { // Case: The suffix of \"if/\" is not empty"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            Set\u003cFruit\u003e currentFruitsList \u003d new TreeSet\u003c\u003e(recipeToEdit.getFruits());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            for (Fruit fruit : fruitsToDelete) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                if (!currentFruitsList.contains(fruit)) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    throw new CommandException(String.format(MESSAGE_NO_SUCH_INGREDIENT,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            fruit, \"a fruit\", recipeToEdit.getName().toString()));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                currentFruitsList.remove(fruit);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            editedFruitSet \u003d currentFruitsList;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else if (fruitsToDelete !\u003d null) { // Case: The suffix of \"if/\" is empty"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            editedFruitSet \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else { // Case: The user did not input the fruits prefix, \"if/\""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            editedFruitSet \u003d recipeToEdit.getFruits();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        editRecipeDescriptor.setFruits(editedFruitSet);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Removes the specified {@code Other} ingredient(s) from the current list of other ingredients."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * If no others ingredient(s) were specified but \"io/\" prefix was present, all others ingredients will be removed."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * If the specified other ingredient(s) do not exist in the current list, CommandException is thrown."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private void updateOthersList(Recipe recipeToEdit, EditRecipeDescriptor editRecipeDescriptor)"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(recipeToEdit);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(editRecipeDescriptor);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Set\u003cOther\u003e editedOtherSet;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Set\u003cOther\u003e othersToDelete \u003d editRecipeDescriptor.getOthers().orElse(null);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (othersToDelete !\u003d null \u0026\u0026 !othersToDelete.isEmpty()) { // Case: The suffix of \"io/\" is not empty"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            Set\u003cOther\u003e currentOthersList \u003d new TreeSet\u003c\u003e(recipeToEdit.getOthers());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            for (Other other : othersToDelete) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                if (!currentOthersList.contains(other)) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    throw new CommandException(String.format(MESSAGE_NO_SUCH_INGREDIENT,"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            other, \"an \u0027other\u0027\", recipeToEdit.getName().toString()));"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                currentOthersList.remove(other);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            editedOtherSet \u003d currentOthersList;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else if (othersToDelete !\u003d null) { // Case: The suffix of \"io/\" is empty"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            editedOtherSet \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else { // Case: The user did not input the others prefix, \"io/\""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            editedOtherSet \u003d recipeToEdit.getOthers();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        editRecipeDescriptor.setOthers(editedOtherSet);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                || (other instanceof DeleteIngredientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                \u0026\u0026 index.equals(((DeleteIngredientCommand) other).index)"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                \u0026\u0026 editRecipeDescriptor.equals(((DeleteIngredientCommand) other).editRecipeDescriptor)); // state check"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 275,
      "beatricetay": 19
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/commands/DeleteStepCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.EditCommand.createEditedRecipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.model.Model.PREDICATE_SHOW_ALL_PLANNED_RECIPES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.model.Model.PREDICATE_SHOW_ALL_RECIPES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Step;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Deletes step(s) from an existing recipe in the recipe book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class DeleteStepCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletestep\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes step(s) from an existing recipe in the \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"recipe book.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"Parameters: [INDEX of recipe] [Step numbers]\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 3 5 (deletes steps 3 and 5 of recipe 1)\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String MESSAGE_DELETE_STEPS_SUCCESS \u003d \"Successfully deleted step(s) from %1$s!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String MESSAGE_INVALID_STEP_INDEX \u003d \"Attempting to delete a non-existent step\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final Integer[] stepNumbers;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final CommandType commandType;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param index of the recipe in the filtered recipe list to edit"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param stepNumbers is the array of step numbers that the user wishes to delete from the recipe"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public DeleteStepCommand(Index index, Integer[] stepNumbers) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.stepNumbers \u003d stepNumbers;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.commandType \u003d CommandType.MAIN;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredRecipeList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        EditCommand.EditRecipeDescriptor editRecipeDescriptor \u003d new EditCommand.EditRecipeDescriptor();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Recipe recipeToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        List\u003cStep\u003e updatedStepsList \u003d new ArrayList\u003c\u003e(recipeToEdit.getSteps());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (stepNumbers[stepNumbers.length - 1] \u003e updatedStepsList.size() - 1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_STEP_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        for (int i \u003d 0; i \u003c stepNumbers.length; i++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            updatedStepsList.remove(stepNumbers[i] - i);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        editRecipeDescriptor.setSteps(updatedStepsList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Recipe editedRecipe \u003d createEditedRecipe(recipeToEdit, editRecipeDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        model.setRecipe(recipeToEdit, editedRecipe);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        model.updateFilteredRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        model.updateFilteredPlannedList(PREDICATE_SHOW_ALL_PLANNED_RECIPES);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        model.commitBook(commandType);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_STEPS_SUCCESS, recipeToEdit.getName().toString()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                || (other instanceof DeleteStepCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                \u0026\u0026 index.equals(((DeleteStepCommand) other).index)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                \u0026\u0026 Arrays.equals(stepNumbers, ((DeleteStepCommand) other).stepNumbers)); // state check"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 75,
      "beatricetay": 11
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_GOAL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_FRUIT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_GRAIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_OTHER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_PROTEIN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_VEGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_STEP;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.model.Model.PREDICATE_SHOW_ALL_PLANNED_RECIPES;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.model.Model.PREDICATE_SHOW_ALL_RECIPES;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.Messages;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.index.Index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.goal.Goal;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Step;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Time;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Fruit;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Grain;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Other;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Protein;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Vegetable;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Edits the details of an existing recipe in the recipe book."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the recipe identified \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            + \"by the index number used in the displayed recipe list. \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            + \"[\" + PREFIX_TIME + \"TIME] \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_GRAIN + \"GRAIN]... \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_VEGE + \"VEGETABLE]... \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_PROTEIN + \"PROTEIN]... \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_FRUIT + \"FRUIT]... \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_OTHER + \"OTHER]... \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + \"[\" + PREFIX_STEP + \"STEP]... \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            + \"[\" + PREFIX_GOAL + \"GOAL]...\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + PREFIX_TIME + \"10 \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + PREFIX_INGREDIENT_VEGE + \"Insert new vegetable here \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + PREFIX_INGREDIENT_PROTEIN + \"Inser t new protein-rich ingredient here \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + PREFIX_STEP + \"Insert new step here \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + PREFIX_GOAL + \"Insert new goal here \";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final String MESSAGE_EDIT_RECIPE_SUCCESS \u003d \"Edited Recipe: %1$s\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RECIPE \u003d \"This recipe already exists in the address book.\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String MESSAGE_CANNOT_DELETE_ALL_INGREDIENTS \u003d \"Cannot delete all ingredients!\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private final EditRecipeDescriptor editRecipeDescriptor;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final CommandType commandType;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @param index of the recipe in the filtered recipe list to edit"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @param editRecipeDescriptor details to edit the recipe with"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public EditCommand(Index index, EditRecipeDescriptor editRecipeDescriptor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireNonNull(editRecipeDescriptor);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.editRecipeDescriptor \u003d new EditRecipeDescriptor(editRecipeDescriptor);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.commandType \u003d CommandType.MAIN;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredRecipeList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Recipe recipeToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Recipe editedRecipe \u003d createEditedRecipe(recipeToEdit, editRecipeDescriptor);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (editedRecipe.getTotalNumberOfIngredients() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new CommandException(MESSAGE_CANNOT_DELETE_ALL_INGREDIENTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (!recipeToEdit.isSameRecipe(editedRecipe) \u0026\u0026 model.hasRecipe(editedRecipe)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_RECIPE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        model.setRecipe(recipeToEdit, editedRecipe);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        model.updateFilteredRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        model.updateFilteredPlannedList(PREDICATE_SHOW_ALL_PLANNED_RECIPES);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        model.commitBook(commandType);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_RECIPE_SUCCESS, editedRecipe));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Creates and returns a {@code Recipe} with the details of {@code recipeToEdit}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * edited with {@code editRecipeDescriptor}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    protected static Recipe createEditedRecipe(Recipe recipeToEdit, EditRecipeDescriptor editRecipeDescriptor) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assert recipeToEdit !\u003d null;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        boolean isFavourite \u003d recipeToEdit.isFavourite();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Name updatedName \u003d editRecipeDescriptor.getName().orElse(recipeToEdit.getName());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Time updatedTime \u003d editRecipeDescriptor.getTime().orElse(recipeToEdit.getTime());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        List\u003cStep\u003e updatedStep \u003d editRecipeDescriptor.getSteps().orElse(recipeToEdit.getSteps());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Set\u003cGoal\u003e updatedGoals \u003d editRecipeDescriptor.getGoals().orElse(recipeToEdit.getGoals());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Set\u003cGrain\u003e updatedGrains \u003d editRecipeDescriptor.getGrains().orElse(recipeToEdit.getGrains());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Set\u003cVegetable\u003e updatedVegetables \u003d editRecipeDescriptor.getVegetables().orElse(recipeToEdit.getVegetables());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Set\u003cProtein\u003e updatedProteins \u003d editRecipeDescriptor.getProteins().orElse(recipeToEdit.getProteins());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Set\u003cFruit\u003e updatedFruits \u003d editRecipeDescriptor.getFruits().orElse(recipeToEdit.getFruits());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Set\u003cOther\u003e updatedOthers \u003d editRecipeDescriptor.getOthers().orElse(recipeToEdit.getOthers());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return new Recipe(updatedName, updatedTime,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                updatedGrains, updatedVegetables, updatedProteins, updatedFruits, updatedOthers,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                updatedStep, updatedGoals, isFavourite);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                \u0026\u0026 editRecipeDescriptor.equals(e.editRecipeDescriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Stores the details to edit the recipe with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * corresponding field value of the recipe."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static class EditRecipeDescriptor {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        private Time time;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        private List\u003cStep\u003e steps;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        private Set\u003cGoal\u003e goals;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        private Set\u003cGrain\u003e grains;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        private Set\u003cVegetable\u003e vegetables;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        private Set\u003cProtein\u003e proteins;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        private Set\u003cFruit\u003e fruits;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        private Set\u003cOther\u003e others;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        public EditRecipeDescriptor() {}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tharshita"
        },
        "content": "         * A defensive copy of {@code goals} is used internally."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        public EditRecipeDescriptor(EditRecipeDescriptor toCopy) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            setTime(toCopy.time);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            setSteps(toCopy.steps);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            setGoals(toCopy.goals);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            setGrains(toCopy.grains);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            setVegetables(toCopy.vegetables);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            setProteins(toCopy.proteins);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            setFruits(toCopy.fruits);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            setOthers(toCopy.others);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, time, grains, vegetables, proteins, fruits, others, steps, goals);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        public void setTime(Time time) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            this.time \u003d time;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        public Optional\u003cTime\u003e getTime() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            return Optional.ofNullable(time);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "         * Sets {@code grains} to this object\u0027s {@code grains}."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "         * A defensive copy of {@code grains} is used internally."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        public void setGrains(Set\u003cGrain\u003e grains) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            this.grains \u003d (grains !\u003d null) ? new TreeSet\u003c\u003e(grains) : null;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "         * Returns an unmodifiable grains set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code grains} is null."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        public Optional\u003cSet\u003cGrain\u003e\u003e getGrains() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return (grains !\u003d null) ? Optional.of(Collections.unmodifiableSet(grains)) : Optional.empty();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "         * Sets {@code vegetables} to this object\u0027s {@code vegetables}."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "         * A defensive copy of {@code vegetables} is used internally."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        public void setVegetables(Set\u003cVegetable\u003e vegetables) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            this.vegetables \u003d (vegetables !\u003d null) ? new TreeSet\u003c\u003e(vegetables) : null;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "         * Returns an unmodifiable vegetables set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code vegetables} is null."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        public Optional\u003cSet\u003cVegetable\u003e\u003e getVegetables() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return (vegetables !\u003d null) ? Optional.of(Collections.unmodifiableSet(vegetables)) : Optional.empty();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "         * Sets {@code proteins} to this object\u0027s {@code proteins}."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "         * A defensive copy of {@code proteins} is used internally."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        public void setProteins(Set\u003cProtein\u003e proteins) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            this.proteins \u003d (proteins !\u003d null) ? new TreeSet\u003c\u003e(proteins) : null;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "         * Returns an unmodifiable proteins set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code proteins} is null."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        public Optional\u003cSet\u003cProtein\u003e\u003e getProteins() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return (proteins !\u003d null) ? Optional.of(Collections.unmodifiableSet(proteins)) : Optional.empty();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "         * Sets {@code fruits} to this object\u0027s {@code fruits}."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "         * A defensive copy of {@code fruits} is used internally."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        public void setFruits(Set\u003cFruit\u003e fruits) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            this.fruits \u003d (fruits !\u003d null) ? new TreeSet\u003c\u003e(fruits) : null;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "         * Returns an unmodifiable fruits set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code fruits} is null."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        public Optional\u003cSet\u003cFruit\u003e\u003e getFruits() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return (fruits !\u003d null) ? Optional.of(Collections.unmodifiableSet(fruits)) : Optional.empty();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "         * Sets {@code others} to this object\u0027s {@code others}."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "         * A defensive copy of {@code others} is used internally."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        public void setOthers(Set\u003cOther\u003e others) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            this.others \u003d (others !\u003d null) ? new TreeSet\u003c\u003e(others) : null;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "         * Returns an unmodifiable others set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code others} is null."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        public Optional\u003cSet\u003cOther\u003e\u003e getOthers() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return (others !\u003d null) ? Optional.of(Collections.unmodifiableSet(others)) : Optional.empty();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "         * Sets {@code steps} to this object\u0027s {@code steps}."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "         * A defensive copy of {@code steps} is used internally."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "         */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        public void setSteps(List\u003cStep\u003e steps) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            this.steps \u003d (steps !\u003d null) ? new ArrayList\u003c\u003e(steps) : null;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "         * Returns an unmodifiable steps list, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code steps} is null."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "         */"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        public Optional\u003cList\u003cStep\u003e\u003e getSteps() {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return (steps !\u003d null) ? Optional.of(Collections.unmodifiableList(steps)) : Optional.empty();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "tharshita"
        },
        "content": "         * Sets {@code goals} to this object\u0027s {@code goals}."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "tharshita"
        },
        "content": "         * A defensive copy of {@code goals} is used internally."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        public void setGoals(Set\u003cGoal\u003e goals) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            this.goals \u003d (goals !\u003d null) ? new HashSet\u003c\u003e(goals) : null;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "tharshita"
        },
        "content": "         * Returns an unmodifiable goal set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "tharshita"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code goals} is null."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        public Optional\u003cSet\u003cGoal\u003e\u003e getGoals() {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            return (goals !\u003d null) ? Optional.of(Collections.unmodifiableSet(goals)) : Optional.empty();"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            if (!(other instanceof EditRecipeDescriptor)) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            EditRecipeDescriptor e \u003d (EditRecipeDescriptor) other;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                    \u0026\u0026 getTime().equals(e.getTime())"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                    \u0026\u0026 getGrains().equals(e.getGrains())"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                    \u0026\u0026 getVegetables().equals(e.getVegetables())"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                    \u0026\u0026 getProteins().equals(e.getProteins())"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                    \u0026\u0026 getFruits().equals(e.getFruits())"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                    \u0026\u0026 getOthers().equals(e.getOthers())"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    \u0026\u0026 getSteps().equals(e.getSteps())"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                    \u0026\u0026 getGoals().equals(e.getGoals());"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 34,
      "tharshita": 54,
      "-": 123,
      "beatricetay": 146
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/commands/EditIngredientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.EditCommand.createEditedRecipe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_FRUIT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_GRAIN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_OTHER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_PROTEIN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_VEGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.model.Model.PREDICATE_SHOW_ALL_PLANNED_RECIPES;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.model.Model.PREDICATE_SHOW_ALL_RECIPES;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.logic.commands.EditCommand.EditRecipeDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Fruit;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Grain;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Ingredient;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Other;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Protein;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Vegetable;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Edits ingredient(s) quantity from an existing recipe in the recipe book."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class EditIngredientCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editingredient\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits ingredient(s) quantity from an existing recipe \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"in the recipe book.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"Parameters: [INDEX of recipe] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_GRAIN + \"GRAIN]... \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_VEGE + \"VEGETABLE]... \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_PROTEIN + \"PROTEIN]... \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_FRUIT + \"FRUIT]... \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_OTHER + \"OTHER]...\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + PREFIX_INGREDIENT_VEGE + \"100g, Tomato \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + PREFIX_INGREDIENT_VEGE + \"100g, Lettuce \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + PREFIX_INGREDIENT_OTHER + \"50g, Honeydew\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String MESSAGE_EDIT_INGREDIENTS_SUCCESS \u003d \"Successfully edited ingredient(s) in %1$s!\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String MESSAGE_NO_SUCH_INGREDIENT \u003d \"%1$s is either not %2$s ingredient \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"or it does not exist in %3$s!\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final EditRecipeDescriptor editRecipeDescriptor;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final CommandType commandType;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param index of the recipe in the filtered recipe list to edit"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param editRecipeDescriptor details to edit the recipe with"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public EditIngredientCommand(Index index, EditRecipeDescriptor editRecipeDescriptor) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.editRecipeDescriptor \u003d editRecipeDescriptor;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.commandType \u003d CommandType.MAIN;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredRecipeList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Recipe recipeToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        updateGrainsList(recipeToEdit, editRecipeDescriptor);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        updateVegetablesList(recipeToEdit, editRecipeDescriptor);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        updateProteinsList(recipeToEdit, editRecipeDescriptor);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        updateFruitsList(recipeToEdit, editRecipeDescriptor);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        updateOthersList(recipeToEdit, editRecipeDescriptor);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Recipe editedRecipe \u003d createEditedRecipe(recipeToEdit, editRecipeDescriptor);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        model.setRecipe(recipeToEdit, editedRecipe);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        model.updateFilteredRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        model.updateFilteredPlannedList(PREDICATE_SHOW_ALL_PLANNED_RECIPES);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        model.commitBook(commandType);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_INGREDIENTS_SUCCESS, recipeToEdit.getName().toString()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Edits the quantity of the specified {@code Grain} ingredient(s) in the current list of grains."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * If the specified grain ingredient(s) do not exist in the current list, or if no grain ingredient(s) were"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * specified but \"ig/\" prefix was present, CommandException is thrown."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private void updateGrainsList(Recipe recipeToEdit, EditRecipeDescriptor editRecipeDescriptor)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(recipeToEdit);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(editRecipeDescriptor);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Set\u003cGrain\u003e editedGrainSet;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Set\u003cGrain\u003e grainsToEdit \u003d editRecipeDescriptor.getGrains().orElse(null);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (grainsToEdit !\u003d null \u0026\u0026 !grainsToEdit.isEmpty()) { // Case: The suffix of \"ig/\" is not empty"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            Set\u003cGrain\u003e currentGrainsList \u003d new TreeSet\u003c\u003e(recipeToEdit.getGrains());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            for (Grain grain : grainsToEdit) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                if (!currentGrainsList.contains(grain)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    throw new CommandException(String.format(MESSAGE_NO_SUCH_INGREDIENT,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            grain.getIngredientName(), \"a grain\", recipeToEdit.getName().toString()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                currentGrainsList.remove(grain);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                currentGrainsList.add(grain);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            editedGrainSet \u003d currentGrainsList;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else if (grainsToEdit !\u003d null) { // Case: The suffix of \"ig/\" is empty"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new CommandException(Ingredient.MESSAGE_MISSING_FIELD);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else { // Case: The user did not input the grains prefix, \"ig/\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            editedGrainSet \u003d recipeToEdit.getGrains();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        editRecipeDescriptor.setGrains(editedGrainSet);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Edits the quantity of the specified {@code Vegetable} ingredient(s) in the current list of vegetables."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * If the specified vegetable ingredient(s) do not exist in the current list, or if no vegetable ingredient(s) were"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * specified but \"iv/\" prefix was present, CommandException is thrown."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private void updateVegetablesList(Recipe recipeToEdit, EditRecipeDescriptor editRecipeDescriptor)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(recipeToEdit);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(editRecipeDescriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Set\u003cVegetable\u003e editedVegetableSet;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Set\u003cVegetable\u003e vegetablesToDelete \u003d editRecipeDescriptor.getVegetables().orElse(null);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (vegetablesToDelete !\u003d null \u0026\u0026 !vegetablesToDelete.isEmpty()) { // Case: The suffix of \"iv/\" is not empty"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            Set\u003cVegetable\u003e currentVegetablesList \u003d new TreeSet\u003c\u003e(recipeToEdit.getVegetables());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            for (Vegetable vegetable : vegetablesToDelete) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                if (!currentVegetablesList.contains(vegetable)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    throw new CommandException(String.format(MESSAGE_NO_SUCH_INGREDIENT,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            vegetable.getIngredientName(), \"a vegetable\", recipeToEdit.getName().toString()));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                currentVegetablesList.remove(vegetable);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                currentVegetablesList.add(vegetable);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            editedVegetableSet \u003d currentVegetablesList;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else if (vegetablesToDelete !\u003d null) { // Case: The suffix of \"iv/\" is empty"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new CommandException(Ingredient.MESSAGE_MISSING_FIELD);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else { // Case: The user did not input the vegetables prefix, \"iv/\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            editedVegetableSet \u003d recipeToEdit.getVegetables();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        editRecipeDescriptor.setVegetables(editedVegetableSet);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Edits the quantity of the specified {@code Protein} ingredient(s) in the current list of proteins."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * If the specified protein ingredient(s) do not exist in the current list, or if no protein ingredient(s) were"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * specified but \"ip/\" prefix was present, CommandException is thrown."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private void updateProteinsList(Recipe recipeToEdit, EditRecipeDescriptor editRecipeDescriptor)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(recipeToEdit);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(editRecipeDescriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Set\u003cProtein\u003e editedProteinSet;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Set\u003cProtein\u003e proteinsToDelete \u003d editRecipeDescriptor.getProteins().orElse(null);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (proteinsToDelete !\u003d null \u0026\u0026 !proteinsToDelete.isEmpty()) { // Case: The suffix of \"ip/\" is not empty"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            Set\u003cProtein\u003e currentProteinsList \u003d new TreeSet\u003c\u003e(recipeToEdit.getProteins());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            for (Protein protein : proteinsToDelete) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                if (!currentProteinsList.contains(protein)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    throw new CommandException(String.format(MESSAGE_NO_SUCH_INGREDIENT,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            protein.getIngredientName(), \"a protein\", recipeToEdit.getName().toString()));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                currentProteinsList.remove(protein);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                currentProteinsList.add(protein);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            editedProteinSet \u003d currentProteinsList;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else if (proteinsToDelete !\u003d null) { // Case: The suffix of \"ip/\" is empty"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new CommandException(Ingredient.MESSAGE_MISSING_FIELD);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else { // Case: The user did not input the proteins prefix, \"ip/\""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            editedProteinSet \u003d recipeToEdit.getProteins();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        editRecipeDescriptor.setProteins(editedProteinSet);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Edits the quantity of the specified {@code Fruit} ingredient(s) in the current list of fruits."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * If the specified fruit ingredient(s) do not exist in the current list, or if no fruit ingredient(s) were"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * specified but \"if/\" prefix was present, CommandException is thrown."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private void updateFruitsList(Recipe recipeToEdit, EditRecipeDescriptor editRecipeDescriptor)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(recipeToEdit);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(editRecipeDescriptor);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Set\u003cFruit\u003e editedFruitSet;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Set\u003cFruit\u003e fruitsToDelete \u003d editRecipeDescriptor.getFruits().orElse(null);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (fruitsToDelete !\u003d null \u0026\u0026 !fruitsToDelete.isEmpty()) { // Case: The suffix of \"if/\" is not empty"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            Set\u003cFruit\u003e currentFruitsList \u003d new TreeSet\u003c\u003e(recipeToEdit.getFruits());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            for (Fruit fruit : fruitsToDelete) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                if (!currentFruitsList.contains(fruit)) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    throw new CommandException(String.format(MESSAGE_NO_SUCH_INGREDIENT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            fruit.getIngredientName(), \"a fruit\", recipeToEdit.getName().toString()));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                currentFruitsList.remove(fruit);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                currentFruitsList.add(fruit);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            editedFruitSet \u003d currentFruitsList;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else if (fruitsToDelete !\u003d null) { // Case: The suffix of \"if/\" is empty"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new CommandException(Ingredient.MESSAGE_MISSING_FIELD);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else { // Case: The user did not input the fruits prefix, \"if/\""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            editedFruitSet \u003d recipeToEdit.getFruits();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        editRecipeDescriptor.setFruits(editedFruitSet);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Edits the quantity of the specified {@code Other} ingredient(s) in the current list of other ingredients."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * If the specified others ingredient(s) do not exist in the current list, or if no others ingredient(s) were"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * specified but \"io/\" prefix was present, CommandException is thrown."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private void updateOthersList(Recipe recipeToEdit, EditRecipeDescriptor editRecipeDescriptor)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(recipeToEdit);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(editRecipeDescriptor);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Set\u003cOther\u003e editedOtherSet;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Set\u003cOther\u003e othersToDelete \u003d editRecipeDescriptor.getOthers().orElse(null);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (othersToDelete !\u003d null \u0026\u0026 !othersToDelete.isEmpty()) { // Case: The suffix of \"io/\" is not empty"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            Set\u003cOther\u003e currentOthersList \u003d new TreeSet\u003c\u003e(recipeToEdit.getOthers());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            for (Other other : othersToDelete) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                if (!currentOthersList.contains(other)) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    throw new CommandException(String.format(MESSAGE_NO_SUCH_INGREDIENT,"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            other.getIngredientName(), \"an \u0027other\u0027\", recipeToEdit.getName().toString()));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                currentOthersList.remove(other);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                currentOthersList.add(other);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            editedOtherSet \u003d currentOthersList;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else if (othersToDelete !\u003d null) { // Case: The suffix of \"io/\" is empty"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new CommandException(Ingredient.MESSAGE_MISSING_FIELD);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else { // Case: The user did not input the others prefix, \"io/\""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            editedOtherSet \u003d recipeToEdit.getOthers();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        editRecipeDescriptor.setOthers(editedOtherSet);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                || (other instanceof EditIngredientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                \u0026\u0026 index.equals(((EditIngredientCommand) other).index)"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                \u0026\u0026 editRecipeDescriptor.equals(((EditIngredientCommand) other).editRecipeDescriptor)); // state check"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 237,
      "beatricetay": 20
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/commands/EditStepCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.EditCommand.createEditedRecipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_STEP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.model.Model.PREDICATE_SHOW_ALL_PLANNED_RECIPES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.model.Model.PREDICATE_SHOW_ALL_RECIPES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.logic.commands.EditCommand.EditRecipeDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Step;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Edits a step in an existing recipe in the recipe book."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class EditStepCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editstep\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits a step in an existing recipe in the \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"recipe book.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"Parameters: [INDEX of recipe] [Step number] \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"[\" + PREFIX_STEP + \"STEP]\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 2\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + PREFIX_STEP + \"Insert edited step here (edits step 2 of recipe 1)\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String MESSAGE_EDIT_STEPS_SUCCESS \u003d \"Successfully edited step %1$d in %2$s!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String MESSAGE_INVALID_STEP_INDEX \u003d \"Attempting to edit a non-existent step\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final int stepNumber;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final Step editedStep;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final CommandType commandType;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param index of the recipe in the filtered recipe list to edit"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param stepNumber is the index of the step that the user wishes to edit"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param editedStep is the new step that the user wishes to replace the old step with"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public EditStepCommand(Index index, int stepNumber, Step editedStep) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.stepNumber \u003d stepNumber;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.editedStep \u003d editedStep;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.commandType \u003d CommandType.MAIN;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredRecipeList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        EditRecipeDescriptor editRecipeDescriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Recipe recipeToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        List\u003cStep\u003e updatedStepsList \u003d new ArrayList\u003c\u003e(recipeToEdit.getSteps());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (!canEditStep(updatedStepsList, stepNumber)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_STEP_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        updatedStepsList.set(stepNumber, editedStep);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        editRecipeDescriptor.setSteps(updatedStepsList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Recipe editedRecipe \u003d createEditedRecipe(recipeToEdit, editRecipeDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        model.setRecipe(recipeToEdit, editedRecipe);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        model.updateFilteredRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        model.updateFilteredPlannedList(PREDICATE_SHOW_ALL_PLANNED_RECIPES);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        model.commitBook(commandType);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                String.format(MESSAGE_EDIT_STEPS_SUCCESS, stepNumber + 1, recipeToEdit.getName().toString()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Checks if the step number that the user wishes to edit exists within the steps list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private boolean canEditStep(List\u003cStep\u003e updatedStepsList, int stepIndex) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return stepIndex \u003c\u003d updatedStepsList.size() - 1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                || (other instanceof EditStepCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                \u0026\u0026 index.equals(((EditStepCommand) other).index)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                \u0026\u0026 stepNumber \u003d\u003d ((EditStepCommand) other).stepNumber"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                \u0026\u0026 editedStep.equals(((EditStepCommand) other).editedStep)); // state check"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 86,
      "beatricetay": 12
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, null, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 1,
      "-": 16,
      "beatricetay": 2
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/commands/FavouriteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.model.Model.PREDICATE_SHOW_ALL_PLANNED_RECIPES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Favourites a recipe identified using it\u0027s displayed index from the recipe book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class FavouriteCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"favourite\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \": Favourites the recipe identified by the index number(s) used in the displayed recipe list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"Parameters: INDEX NUMBER(s) (must be positive integers)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Added %1$s to favourites!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String MESSAGE_ALREADY_FAVOURITE \u003d \"%1$s already in favourites!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final Index[] targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final CommandType commandType;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public FavouriteCommand(Index[] targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.commandType \u003d CommandType.MAIN;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredRecipeList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        List\u003cString\u003e successfulFavouritesList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        List\u003cString\u003e alreadyFavouritesList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (!canFavouriteTargetRecipes(lastShownList.size(), targetIndex)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        for (Index index : targetIndex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            Recipe recipeToFavourite \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (!recipeToFavourite.isFavourite()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                model.favouriteRecipe(recipeToFavourite);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                successfulFavouritesList.add(recipeToFavourite.getName().toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                alreadyFavouritesList.add(recipeToFavourite.getName().toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (!successfulFavouritesList.isEmpty()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            sb.append(String.format(MESSAGE_SUCCESS, getListAsFormattedString(successfulFavouritesList)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            sb.append(\"\\n\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (!alreadyFavouritesList.isEmpty()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            sb.append(String.format(MESSAGE_ALREADY_FAVOURITE, getListAsFormattedString(alreadyFavouritesList)));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        model.updateFilteredPlannedList(PREDICATE_SHOW_ALL_PLANNED_RECIPES);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        model.commitBook(commandType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return new CommandResult(sb.toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Formats a list of recipe names into a string with appropriate commas and conjunctions."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private String getListAsFormattedString(List\u003cString\u003e listToFormat) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        StringBuilder formattedString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        for (int i \u003d 0; i \u003c listToFormat.size(); i++) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (i \u003d\u003d listToFormat.size() - 1 \u0026\u0026 listToFormat.size() !\u003d 1) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                formattedString.append(\" and \");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            formattedString.append(listToFormat.get(i));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (i \u003c listToFormat.size() - 2) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                formattedString.append(\", \");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return formattedString.toString();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Checks if the recipe that the user wishes to favourite exists within the recipe list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private boolean canFavouriteTargetRecipes(int lastShownListSize, Index[] targetIndex) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        for (int i \u003d targetIndex.length - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (targetIndex[i].getOneBased() \u003e lastShownListSize) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                || (other instanceof FavouriteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                \u0026\u0026 Arrays.equals(targetIndex, ((FavouriteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 99,
      "beatricetay": 9
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/commands/FilterCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_GOAL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_GRAIN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_OTHER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_PROTEIN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_VEGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.RecipeMatchesKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Finds and lists all recipes in recipe book that matches the specified arguments."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class FilterCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"filter\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all recipes that matches the \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"specified arguments (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"Parameters: favourites \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"[\" + PREFIX_TIME + \"TIME (upperbound) or TIME RANGE (lowerbound-upperbound)] \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_GRAIN + \"GRAIN]... \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_VEGE + \"VEGETABLE]... \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_PROTEIN + \"PROTEIN]... \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_OTHER + \"OTHER]... \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"[\" + PREFIX_GOAL + \"GOAL]...\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" favourites \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + PREFIX_TIME + \"10-20 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + PREFIX_INGREDIENT_VEGE + \"Search for vegetable \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + PREFIX_INGREDIENT_PROTEIN + \"Search for protein-rich ingredient \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + PREFIX_GOAL + \"Search for goal \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final RecipeMatchesKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public FilterCommand(RecipeMatchesKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        model.updateFilteredRecipeList(predicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                String.format(Messages.MESSAGE_RECIPES_LISTED_OVERVIEW, model.getFilteredRecipeList().size()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                || (other instanceof FilterCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                \u0026\u0026 predicate.equals(((FilterCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 49,
      "beatricetay": 10
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Finds and lists all recipes in recipe book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all recipes whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" Thai beef bowl\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        model.updateFilteredRecipeList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                String.format(Messages.MESSAGE_RECIPES_LISTED_OVERVIEW, model.getFilteredRecipeList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 1,
      "tharshita": 3,
      "-": 33,
      "beatricetay": 5
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, null, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 1,
      "-": 18,
      "beatricetay": 2
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.model.Model.PREDICATE_SHOW_ALL_RECIPES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Lists all recipes in the recipe book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all recipes\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        model.updateFilteredRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 1,
      "tharshita": 2,
      "-": 18,
      "beatricetay": 3
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/commands/ListGoalsCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Lists all goals being tracked."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class ListGoalsCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listgoals\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": lists all available goals to be tracked\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final String LIST \u003d \"Bulk like the Hulk\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            + \"Wholesome Wholegrains\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            + \"Herbivore\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return new CommandResult(LIST);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 18,
      "beatricetay": 2
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/commands/RedoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.model.Model.PREDICATE_SHOW_ALL_RECIPES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " *  Restores any action that have been previously undone using an UndoCommand."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String MESSAGE_CANNOT_REDO \u003d \"Unable to redo!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Only one non-zero unsigned integer \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"(representing the number of actions you wish to redo) or the \u0027all\u0027 keyword is allowed as an argument. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"Otherwise, leaving it blank will do (undoes the actions of only the previous undo)!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redid %1$d action(s) successfully!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String MESSAGE_ALL_SUCCESS \u003d \"Redid all actions successfully!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final int numberOfRedo;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public RedoCommand(int numberOfRedo) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.numberOfRedo \u003d numberOfRedo;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (!model.canRedo(numberOfRedo)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new CommandException(MESSAGE_CANNOT_REDO);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        model.redoBook(numberOfRedo, model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        model.updateFilteredRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (numberOfRedo \u003e 0) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, numberOfRedo));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return new CommandResult(MESSAGE_ALL_SUCCESS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 40,
      "beatricetay": 4
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/commands/SwitchCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.ui.tab.Tab;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Switches between the different tabs in HYBB."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class SwitchCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"switch\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d SwitchCommand.COMMAND_WORD + \": Switch to a tab\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            + \"Parameter: recipes/planning/goals/achievements\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            + \"Example: \" + SwitchCommand.COMMAND_WORD + \" Planning\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Tab successfully switched!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private final Tab tab;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public SwitchCommand(Tab tab) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.tab \u003d tab;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, tab, false);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tharshita": 26,
      "beatricetay": 3
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/commands/UndoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.model.Model.PREDICATE_SHOW_ALL_RECIPES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Reverses the action of an earlier action."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String MESSAGE_CANNOT_UNDO \u003d \"Unable to undo!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Only one non-zero unsigned integer \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"(representing the number of actions you wish to undo) or the \u0027all\u0027 keyword is allowed as an argument. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"Otherwise, leaving it blank will do (undoes only the previous action)!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undid %1$d action(s) successfully!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String MESSAGE_ALL_SUCCESS \u003d \"Undid all actions successfully!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final int numberOfUndo;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public UndoCommand(int numberOfUndo) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.numberOfUndo \u003d numberOfUndo;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (!model.canUndo(numberOfUndo)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new CommandException(MESSAGE_CANNOT_UNDO);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        model.undoBook(numberOfUndo, model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        model.updateFilteredRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (numberOfUndo \u003e 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, numberOfUndo));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return new CommandResult(MESSAGE_ALL_SUCCESS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 39,
      "beatricetay": 4
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/commands/UnfavouriteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.model.Model.PREDICATE_SHOW_ALL_PLANNED_RECIPES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Unfavourites a recipe identified using it\u0027s displayed index from the recipe book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class UnfavouriteCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"unfavourite\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \": Unfavourites the recipe identified by the index number(s) used in the displayed recipe list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"Parameters: INDEX NUMBER(s) (must be positive integers)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Removed %1$s from favourites!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String MESSAGE_ALREADY_NOT_FAVOURITE \u003d \"%1$s already not in favourites!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final Index[] targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final CommandType commandType;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public UnfavouriteCommand(Index[] targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.commandType \u003d CommandType.MAIN;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredRecipeList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        List\u003cString\u003e successfulUnfavouritesList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        List\u003cString\u003e alreadyUnfavouritesList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (!canUnfavouriteTargetRecipes(lastShownList.size(), targetIndex)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        for (Index index : targetIndex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            Recipe recipeToUnfavourite \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (recipeToUnfavourite.isFavourite()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                model.unfavouriteRecipe(recipeToUnfavourite);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                successfulUnfavouritesList.add(recipeToUnfavourite.getName().toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                alreadyUnfavouritesList.add(recipeToUnfavourite.getName().toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (!successfulUnfavouritesList.isEmpty()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            sb.append(String.format(MESSAGE_SUCCESS, getListAsFormattedString(successfulUnfavouritesList)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            sb.append(\"\\n\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (!alreadyUnfavouritesList.isEmpty()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            sb.append(String.format(MESSAGE_ALREADY_NOT_FAVOURITE, getListAsFormattedString(alreadyUnfavouritesList)));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        model.updateFilteredPlannedList(PREDICATE_SHOW_ALL_PLANNED_RECIPES);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        model.commitBook(commandType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return new CommandResult(sb.toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Formats a list of recipe names into a string with appropriate commas and conjunctions."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private String getListAsFormattedString(List\u003cString\u003e listToFormat) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        StringBuilder formattedString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        for (int i \u003d 0; i \u003c listToFormat.size(); i++) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (i \u003d\u003d listToFormat.size() - 1 \u0026\u0026 listToFormat.size() !\u003d 1) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                formattedString.append(\" and \");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            formattedString.append(listToFormat.get(i));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (i \u003c listToFormat.size() - 2) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                formattedString.append(\", \");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return formattedString.toString();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Checks if the recipe that the user wishes to unfavourite exists within the recipe list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private boolean canUnfavouriteTargetRecipes(int lastShownListSize, Index[] targetIndex) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        for (int i \u003d targetIndex.length - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (targetIndex[i].getOneBased() \u003e lastShownListSize) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                || (other instanceof UnfavouriteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                \u0026\u0026 Arrays.equals(targetIndex, ((UnfavouriteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 100,
      "beatricetay": 8
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/commands/ViewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.plan.PlannedRecipeWithinDateRangePredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * Schedules a recipe to a date."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Views the planned recipes in the specified format.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"View format changed to %1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private final PlannedRecipeWithinDateRangePredicate predicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private final String type \u003d \"week\"; // change to enum types?"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Creates an ViewCommand to set the view of the planned recipes."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public ViewCommand(PlannedRecipeWithinDateRangePredicate predicate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        model.updateFilteredPlannedList(predicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // model.commitBook();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, type));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 1,
      "beatricetay": 41
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "beatricetay": 1
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/commands/plan/ClearPlanCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.commands.plan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.logic.commands.CommandType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.plan.PlannedBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.ui.tab.Tab;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * Deletes all planned recipes."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "public class ClearPlanCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clearplan\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Planned recipes have been cleared!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private final Tab planTab \u003d Tab.PLANNING;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final CommandType commandType \u003d CommandType.PLAN;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        model.setPlannedBook(new PlannedBook());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        model.commitBook(commandType);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, planTab, false);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 3,
      "beatricetay": 25
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/commands/plan/DeletePlanCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.commands.plan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.model.Model.PREDICATE_SHOW_ALL_PLANNED_RECIPES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.logic.commands.CommandType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.plan.PlannedDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.plan.PlannedRecipeOnDatePredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.ui.tab.Tab;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * Deletes planned recipes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "public class DeletePlanCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteplan\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes a planned recipe on a certain day. \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + \"Parameters: \" + \"PLANNED_RECIPE_INDEX \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + PREFIX_DATE + \"YYYY-MM-DD \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 3 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + PREFIX_DATE + \"2020-03-16 \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Planned recipe at Index %2$s is deleted:\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + \"%1$s\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private final Index plannedIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private final Date atDate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private final Tab planTab \u003d Tab.PLANNING;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final CommandType commandType;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Creates an DeletePlanCommand to delete the specified planned recipe on {@code date} at {@code index}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public DeletePlanCommand(Index plannedIndex, Date date) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        requireNonNull(plannedIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.plannedIndex \u003d plannedIndex;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.commandType \u003d CommandType.PLAN;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.atDate \u003d date;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        model.updateFilteredPlannedList(new PlannedRecipeOnDatePredicate(atDate));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        List\u003cPlannedDate\u003e plannedListAtDate \u003d model.getFilteredPlannedList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (plannedListAtDate.size() !\u003d 1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PLANNED_DATE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        PlannedDate plannedDateToEdit \u003d plannedListAtDate.get(0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        List\u003cRecipe\u003e recipesAtPlannedDate \u003d plannedDateToEdit.getRecipes();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (plannedIndex.getOneBased() \u003e recipesAtPlannedDate.size()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PLANNED_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Recipe recipeToDelete \u003d recipesAtPlannedDate.get(plannedIndex.getZeroBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        model.deleteOnePlan(recipeToDelete, plannedDateToEdit);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        model.updateFilteredPlannedList(PREDICATE_SHOW_ALL_PLANNED_RECIPES);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        model.commitBook(commandType);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, recipeToDelete, plannedIndex.getOneBased()),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                false, planTab, false);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 5,
      "beatricetay": 74
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/commands/plan/PlanCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.commands.plan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.model.Model.PREDICATE_SHOW_ALL_PLANNED_RECIPES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.logic.commands.CommandType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.plan.DuplicatePlannedRecipeException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.plan.PlannedDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.ui.tab.Tab;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * Schedules a recipe to a date."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "public class PlanCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"plan\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Plans a recipe to be cooked in the future. \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + \"RECIPE_INDEX \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + PREFIX_DATE + \"YYYY-MM-DD\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 3 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + PREFIX_DATE + \"2020-03-16\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PLANNED_RECIPE \u003d \"A plan on %1$s for the recipe at \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + \"%2$s already exists.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE \u003d \"The latest date you can input is today\u0027s date.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Recipe %1$s planned at %2$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private final Tab planTab \u003d Tab.PLANNING;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private final Date atDate;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final CommandType commandType;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Creates an PlanCommand to set the specified {@code Recipe} on a certain date"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public PlanCommand(Index index, Date date) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.commandType \u003d CommandType.PLAN;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.atDate \u003d date;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredRecipeList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Recipe recipeToPlan \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        List\u003cRecipe\u003e recipesToPlan \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        recipesToPlan.add(recipeToPlan);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        PlannedDate plannedDate \u003d new PlannedDate(recipesToPlan, atDate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            model.addOnePlan(recipeToPlan, plannedDate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        } catch (DuplicatePlannedRecipeException dp) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DUPLICATE_PLANNED_RECIPE, atDate.toString(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                    index.getOneBased()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        model.updateFilteredPlannedList(PREDICATE_SHOW_ALL_PLANNED_RECIPES);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        model.commitBook(commandType);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, recipeToPlan.toString(), atDate.toString()),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                false, planTab, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 6,
      "tharshita": 3,
      "beatricetay": 78
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_GOAL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_FRUIT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_GRAIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_OTHER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_PROTEIN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_VEGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_STEP;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.goal.Goal;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Step;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Time;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Fruit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Grain;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Other;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Protein;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Vegetable;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_TIME, PREFIX_INGREDIENT_GRAIN,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                        PREFIX_INGREDIENT_VEGE, PREFIX_INGREDIENT_PROTEIN, PREFIX_INGREDIENT_FRUIT,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                        PREFIX_INGREDIENT_OTHER, PREFIX_STEP, PREFIX_GOAL);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        boolean isAtLeastOneIngredientPresent \u003d areAnyPrefixesPresent(argMultimap, PREFIX_INGREDIENT_GRAIN,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                PREFIX_INGREDIENT_VEGE, PREFIX_INGREDIENT_PROTEIN, PREFIX_INGREDIENT_FRUIT, PREFIX_INGREDIENT_OTHER);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_TIME)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty() || !isAtLeastOneIngredientPresent) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Time time \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME).get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        List\u003cStep\u003e steps \u003d ParserUtil.parseSteps(argMultimap.getAllValues(PREFIX_STEP));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Set\u003cGoal\u003e goalList \u003d ParserUtil.parseGoals(argMultimap.getAllValues(PREFIX_GOAL));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Set\u003cGrain\u003e grainsList \u003d ParserUtil.parseGrains(argMultimap.getAllValues(PREFIX_INGREDIENT_GRAIN));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Set\u003cVegetable\u003e vegetablesList \u003d ParserUtil.parseVegetables(argMultimap.getAllValues(PREFIX_INGREDIENT_VEGE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Set\u003cProtein\u003e proteinsList \u003d ParserUtil.parseProteins(argMultimap.getAllValues(PREFIX_INGREDIENT_PROTEIN));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Set\u003cFruit\u003e fruitsList \u003d ParserUtil.parseFruits(argMultimap.getAllValues(PREFIX_INGREDIENT_FRUIT));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Set\u003cOther\u003e othersList \u003d ParserUtil.parseOthers(argMultimap.getAllValues(PREFIX_INGREDIENT_OTHER));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // When recipe is first added, it will not be marked as favourite by default."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Recipe recipe \u003d new Recipe(name, time,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                grainsList, vegetablesList, proteinsList, fruitsList, othersList,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                steps, goalList, false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return new AddCommand(recipe);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Returns true if one of the prefixes is not an empty {@code Optional} value in the given"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private static boolean areAnyPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 3,
      "tharshita": 3,
      "-": 36,
      "beatricetay": 49
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/parser/AddIngredientCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_FRUIT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_GRAIN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_OTHER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_PROTEIN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_VEGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.AddIngredientCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.EditCommand.EditRecipeDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Fruit;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Grain;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Other;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Protein;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Vegetable;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Parses input arguments and creates a new AddIngredientCommand object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class AddIngredientCommandParser implements Parser\u003cAddIngredientCommand\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddIngredientCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * and returns an AddIngredientCommand object for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public AddIngredientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (args.isBlank()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddIngredientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_INGREDIENT_GRAIN, PREFIX_INGREDIENT_VEGE,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        PREFIX_INGREDIENT_PROTEIN, PREFIX_INGREDIENT_FRUIT, PREFIX_INGREDIENT_OTHER);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new ParseException(ParserUtil.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        EditRecipeDescriptor editRecipeDescriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        parseGrainsForAddIngredient(argMultimap.getAllValues(PREFIX_INGREDIENT_GRAIN))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .ifPresent(editRecipeDescriptor::setGrains);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        parseVegetablesForAddIngredient(argMultimap.getAllValues(PREFIX_INGREDIENT_VEGE))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .ifPresent(editRecipeDescriptor::setVegetables);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        parseProteinsForAddIngredient(argMultimap.getAllValues(PREFIX_INGREDIENT_PROTEIN))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .ifPresent(editRecipeDescriptor::setProteins);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        parseFruitsForAddIngredient(argMultimap.getAllValues(PREFIX_INGREDIENT_FRUIT))"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .ifPresent(editRecipeDescriptor::setFruits);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        parseOthersForAddIngredient(argMultimap.getAllValues(PREFIX_INGREDIENT_OTHER))"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .ifPresent(editRecipeDescriptor::setOthers);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (!editRecipeDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return new AddIngredientCommand(index, editRecipeDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses and adds the {@code Collection\u003cString\u003e grains} into the {@code Set\u003cGrain\u003e}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * If {@code grains} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * {@code Set\u003cGrain\u003e} containing zero Grain ingredients."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private Optional\u003cSet\u003cGrain\u003e\u003e parseGrainsForAddIngredient(Collection\u003cString\u003e grains) throws ParseException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assert grains !\u003d null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (grains.isEmpty()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Collection\u003cString\u003e grainSet \u003d grains.size() \u003d\u003d 1 \u0026\u0026 grains.contains(\"\") ? Collections.emptySet() : grains;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return Optional.of(ParserUtil.parseGrains(grainSet));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses and adds the {@code Collection\u003cString\u003e vegetables} into the {@code Set\u003cVegetable\u003e}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * If {@code vegetables} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * {@code Set\u003cVegetable\u003e} containing zero Vegetable ingredients."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private Optional\u003cSet\u003cVegetable\u003e\u003e parseVegetablesForAddIngredient(Collection\u003cString\u003e vegetables)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assert vegetables !\u003d null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (vegetables.isEmpty()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Collection\u003cString\u003e vegetableSet \u003d vegetables.size() \u003d\u003d 1 \u0026\u0026 vegetables.contains(\"\")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                ? Collections.emptySet()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                : vegetables;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return Optional.of(ParserUtil.parseVegetables(vegetableSet));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses and adds the {@code Collection\u003cString\u003e proteins} into the {@code Set\u003cProtein\u003e}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * If {@code proteins} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * {@code Set\u003cProtein\u003e} containing zero Protein ingredients."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private Optional\u003cSet\u003cProtein\u003e\u003e parseProteinsForAddIngredient(Collection\u003cString\u003e proteins) throws ParseException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assert proteins !\u003d null;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (proteins.isEmpty()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Collection\u003cString\u003e proteinSet \u003d proteins.size() \u003d\u003d 1 \u0026\u0026 proteins.contains(\"\")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                ? Collections.emptySet()"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                : proteins;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return Optional.of(ParserUtil.parseProteins(proteinSet));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses and adds the {@code Collection\u003cString\u003e fruits} into the {@code Set\u003cFruit\u003e}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * If {@code fruits} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * {@code Set\u003cFruit\u003e} containing zero Protein ingredients."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private Optional\u003cSet\u003cFruit\u003e\u003e parseFruitsForAddIngredient(Collection\u003cString\u003e fruits) throws ParseException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assert fruits !\u003d null;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (fruits.isEmpty()) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Collection\u003cString\u003e fruitSet \u003d fruits.size() \u003d\u003d 1 \u0026\u0026 fruits.contains(\"\")"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                ? Collections.emptySet()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                : fruits;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return Optional.of(ParserUtil.parseFruits(fruitSet));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses and adds the {@code Collection\u003cString\u003e others} into the {@code Set\u003cOther\u003e}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * If {@code others} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * {@code Set\u003cOther\u003e} containing zero Other ingredients."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private Optional\u003cSet\u003cOther\u003e\u003e parseOthersForAddIngredient(Collection\u003cString\u003e others) throws ParseException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assert others !\u003d null;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (others.isEmpty()) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Collection\u003cString\u003e otherSet \u003d others.size() \u003d\u003d 1 \u0026\u0026 others.contains(\"\") ? Collections.emptySet() : others;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return Optional.of(ParserUtil.parseOthers(otherSet));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 145,
      "beatricetay": 17
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/parser/AddStepCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_STEP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.AddStepCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Step;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Parses input arguments and creates a new AddStepCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class AddStepCommandParser implements Parser\u003cAddStepCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddStepCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * and returns an AddStepCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public AddStepCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (args.isBlank()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddStepCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_STEP);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        List\u003cStep\u003e newSteps \u003d parseStepsForAddStep(argMultimap.getAllValues(PREFIX_STEP));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return new AddStepCommand(index, newSteps);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e steps} into a {@code List\u003cStep\u003e}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private List\u003cStep\u003e parseStepsForAddStep(Collection\u003cString\u003e steps) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assert steps !\u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (steps.isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddStepCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return ParserUtil.parseSteps(steps);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 44,
      "beatricetay": 7
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 59,
      "beatricetay": 1
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 147,
      "beatricetay": 1
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final Prefix PREFIX_TIME \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final Prefix PREFIX_STEP \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final Prefix PREFIX_GOAL \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final Prefix PREFIX_INGREDIENT_GRAIN \u003d new Prefix(\"ig/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final Prefix PREFIX_INGREDIENT_VEGE \u003d new Prefix(\"iv/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final Prefix PREFIX_INGREDIENT_PROTEIN \u003d new Prefix(\"ip/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final Prefix PREFIX_INGREDIENT_FRUIT \u003d new Prefix(\"if/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final Prefix PREFIX_INGREDIENT_OTHER \u003d new Prefix(\"io/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 3,
      "-": 10,
      "beatricetay": 7
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/parser/CookedCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "package seedu.recipe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.logic.commands.CookedCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Parses input arguments and creates a new CookedCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class CookedCommandParser implements Parser\u003cCookedCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CookedCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * and returns a CookedCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public CookedCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            Index[] index \u003d ParserUtil.parseMultipleIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            return new CookedCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        } catch (ParseException exception) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CookedCommand.MESSAGE_USAGE), exception);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 29
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            Index[] index \u003d ParserUtil.parseMultipleIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 1,
      "-": 23,
      "beatricetay": 5
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/parser/DeleteIngredientCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_FRUIT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_GRAIN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_OTHER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_PROTEIN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_VEGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.DeleteIngredientCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.EditCommand.EditRecipeDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Fruit;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Grain;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Other;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Protein;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Vegetable;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Parses input arguments and creates a new DeleteIngredientCommand object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class DeleteIngredientCommandParser implements Parser\u003cDeleteIngredientCommand\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteIngredientCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * and returns an DeleteIngredientCommand object for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public DeleteIngredientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (args.isBlank()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteIngredientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_INGREDIENT_GRAIN, PREFIX_INGREDIENT_VEGE,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        PREFIX_INGREDIENT_PROTEIN, PREFIX_INGREDIENT_FRUIT, PREFIX_INGREDIENT_OTHER);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        EditRecipeDescriptor editRecipeDescriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        parseGrainsForDeleteIngredient(argMultimap.getAllValues(PREFIX_INGREDIENT_GRAIN))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .ifPresent(editRecipeDescriptor::setGrains);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        parseVegetablesForDeleteIngredient(argMultimap.getAllValues(PREFIX_INGREDIENT_VEGE))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .ifPresent(editRecipeDescriptor::setVegetables);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        parseProteinsForDeleteIngredient(argMultimap.getAllValues(PREFIX_INGREDIENT_PROTEIN))"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .ifPresent(editRecipeDescriptor::setProteins);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        parseFruitsForDeleteIngredient(argMultimap.getAllValues(PREFIX_INGREDIENT_FRUIT))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .ifPresent(editRecipeDescriptor::setFruits);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        parseOthersForDeleteIngredient(argMultimap.getAllValues(PREFIX_INGREDIENT_OTHER))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .ifPresent(editRecipeDescriptor::setOthers);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (!editRecipeDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return new DeleteIngredientCommand(index, editRecipeDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses and adds the {@code Collection\u003cString\u003e grains} into the {@code Set\u003cGrain\u003e}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * If {@code grains} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * {@code Set\u003cGrain\u003e} containing zero Grain ingredients."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private Optional\u003cSet\u003cGrain\u003e\u003e parseGrainsForDeleteIngredient(Collection\u003cString\u003e grains) throws ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assert grains !\u003d null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (grains.isEmpty()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Collection\u003cString\u003e grainSet \u003d grains.size() \u003d\u003d 1 \u0026\u0026 grains.contains(\"\") ? Collections.emptySet() : grains;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return Optional.of(ParserUtil.parseGrainsNameOnly(grainSet));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses and adds the {@code Collection\u003cString\u003e vegetables} into the {@code Set\u003cVegetable\u003e}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * If {@code vegetables} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * {@code Set\u003cVegetable\u003e} containing zero Vegetable ingredients."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private Optional\u003cSet\u003cVegetable\u003e\u003e parseVegetablesForDeleteIngredient(Collection\u003cString\u003e vegetables)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assert vegetables !\u003d null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (vegetables.isEmpty()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Collection\u003cString\u003e vegetableSet \u003d vegetables.size() \u003d\u003d 1 \u0026\u0026 vegetables.contains(\"\")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                ? Collections.emptySet()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                : vegetables;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return Optional.of(ParserUtil.parseVegetablesNameOnly(vegetableSet));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses and adds the {@code Collection\u003cString\u003e proteins} into the {@code Set\u003cProtein\u003e}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * If {@code proteins} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * {@code Set\u003cProtein\u003e} containing zero Protein ingredients."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private Optional\u003cSet\u003cProtein\u003e\u003e parseProteinsForDeleteIngredient(Collection\u003cString\u003e proteins) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assert proteins !\u003d null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (proteins.isEmpty()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Collection\u003cString\u003e proteinSet \u003d proteins.size() \u003d\u003d 1 \u0026\u0026 proteins.contains(\"\")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                ? Collections.emptySet()"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                : proteins;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return Optional.of(ParserUtil.parseProteinsNameOnly(proteinSet));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses and adds the {@code Collection\u003cString\u003e fruits} into the {@code Set\u003cFruit\u003e}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * If {@code fruits} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * {@code Set\u003cFruit\u003e} containing zero Protein ingredients."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private Optional\u003cSet\u003cFruit\u003e\u003e parseFruitsForDeleteIngredient(Collection\u003cString\u003e fruits) throws ParseException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assert fruits !\u003d null;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (fruits.isEmpty()) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Collection\u003cString\u003e fruitSet \u003d fruits.size() \u003d\u003d 1 \u0026\u0026 fruits.contains(\"\")"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                ? Collections.emptySet()"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                : fruits;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return Optional.of(ParserUtil.parseFruitsNameOnly(fruitSet));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses and adds the {@code Collection\u003cString\u003e others} into the {@code Set\u003cOther\u003e}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * If {@code others} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * {@code Set\u003cOther\u003e} containing zero Other ingredients."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private Optional\u003cSet\u003cOther\u003e\u003e parseOthersForDeleteIngredient(Collection\u003cString\u003e others) throws ParseException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assert others !\u003d null;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (others.isEmpty()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Collection\u003cString\u003e otherSet \u003d others.size() \u003d\u003d 1 \u0026\u0026 others.contains(\"\") ? Collections.emptySet() : others;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return Optional.of(ParserUtil.parseOthersNameOnly(otherSet));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 140,
      "beatricetay": 17
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/parser/DeleteStepCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.DeleteStepCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Parses input arguments and creates a new DeleteStepCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class DeleteStepCommandParser implements Parser\u003cDeleteStepCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteStepCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * and returns a DeleteStepCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public DeleteStepCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (args.isBlank()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteStepCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String[] argsArray \u003d args.trim().split(\"\\\\s\", 2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Integer[] stepNumbers;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argsArray[0]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            stepNumbers \u003d Arrays.stream(ParserUtil.parseMultipleIndex(argsArray[1]))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    .map(Index::getZeroBased)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    .toArray(Integer[]::new);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException aioobe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteStepCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return new DeleteStepCommand(index, stepNumbers);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 38,
      "beatricetay": 5
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_GOAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_FRUIT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_GRAIN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_OTHER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_PROTEIN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_VEGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_STEP;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.EditCommand.EditRecipeDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.goal.Goal;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Step;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Fruit;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Grain;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Other;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Protein;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Vegetable;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Parses input arguments and creates a new EditCommand object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_TIME, PREFIX_INGREDIENT_GRAIN,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                        PREFIX_INGREDIENT_VEGE, PREFIX_INGREDIENT_PROTEIN, PREFIX_INGREDIENT_FRUIT,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                        PREFIX_INGREDIENT_OTHER, PREFIX_STEP, PREFIX_GOAL);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        EditRecipeDescriptor editRecipeDescriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            editRecipeDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TIME).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            editRecipeDescriptor.setTime(ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        parseGrainsForEdit(argMultimap.getAllValues(PREFIX_INGREDIENT_GRAIN))"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .ifPresent(editRecipeDescriptor::setGrains);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        parseVegetablesForEdit(argMultimap.getAllValues(PREFIX_INGREDIENT_VEGE))"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .ifPresent(editRecipeDescriptor::setVegetables);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        parseProteinsForEdit(argMultimap.getAllValues(PREFIX_INGREDIENT_PROTEIN))"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .ifPresent(editRecipeDescriptor::setProteins);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        parseFruitsForEdit(argMultimap.getAllValues(PREFIX_INGREDIENT_FRUIT))"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .ifPresent(editRecipeDescriptor::setFruits);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        parseOthersForEdit(argMultimap.getAllValues(PREFIX_INGREDIENT_OTHER))"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .ifPresent(editRecipeDescriptor::setOthers);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        parseStepsForEdit(argMultimap.getAllValues(PREFIX_STEP)).ifPresent(editRecipeDescriptor::setSteps);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        parseGoalsForEdit(argMultimap.getAllValues(PREFIX_GOAL)).ifPresent(editRecipeDescriptor::setGoals);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (!editRecipeDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return new EditCommand(index, editRecipeDescriptor);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Parses and adds the {@code Collection\u003cString\u003e grains} into the {@code Set\u003cGrain\u003e}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * If {@code grains} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * {@code Set\u003cGrain\u003e} containing zero Grain ingredients."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private Optional\u003cSet\u003cGrain\u003e\u003e parseGrainsForEdit(Collection\u003cString\u003e grains) throws ParseException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assert grains !\u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (grains.isEmpty()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Collection\u003cString\u003e grainSet \u003d grains.size() \u003d\u003d 1 \u0026\u0026 grains.contains(\"\") ? Collections.emptySet() : grains;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return Optional.of(ParserUtil.parseGrains(grainSet));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Parses and adds the {@code Collection\u003cString\u003e vegetables} into the {@code Set\u003cVegetable\u003e}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * If {@code vegetables} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * {@code Set\u003cVegetable\u003e} containing zero Vegetable ingredients."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private Optional\u003cSet\u003cVegetable\u003e\u003e parseVegetablesForEdit(Collection\u003cString\u003e vegetables) throws ParseException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assert vegetables !\u003d null;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (vegetables.isEmpty()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Collection\u003cString\u003e vegetableSet \u003d vegetables.size() \u003d\u003d 1 \u0026\u0026 vegetables.contains(\"\")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                ? Collections.emptySet()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                : vegetables;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return Optional.of(ParserUtil.parseVegetables(vegetableSet));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Parses and adds the {@code Collection\u003cString\u003e proteins} into the {@code Set\u003cProtein\u003e}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * If {@code proteins} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * {@code Set\u003cProtein\u003e} containing zero Protein ingredients."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private Optional\u003cSet\u003cProtein\u003e\u003e parseProteinsForEdit(Collection\u003cString\u003e proteins) throws ParseException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assert proteins !\u003d null;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (proteins.isEmpty()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Collection\u003cString\u003e proteinSet \u003d proteins.size() \u003d\u003d 1 \u0026\u0026 proteins.contains(\"\")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                ? Collections.emptySet()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                : proteins;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return Optional.of(ParserUtil.parseProteins(proteinSet));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Parses and adds the {@code Collection\u003cString\u003e fruits} into the {@code Set\u003cFruit\u003e}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * If {@code fruits} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * {@code Set\u003cFruit\u003e} containing zero Fruit ingredients."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private Optional\u003cSet\u003cFruit\u003e\u003e parseFruitsForEdit(Collection\u003cString\u003e fruits) throws ParseException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assert fruits !\u003d null;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (fruits.isEmpty()) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Collection\u003cString\u003e fruitSet \u003d fruits.size() \u003d\u003d 1 \u0026\u0026 fruits.contains(\"\")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                ? Collections.emptySet()"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                : fruits;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return Optional.of(ParserUtil.parseFruits(fruitSet));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Parses and adds the {@code Collection\u003cString\u003e others} into the {@code Set\u003cOther\u003e}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * If {@code others} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * {@code Set\u003cOther\u003e} containing zero Other ingredients."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private Optional\u003cSet\u003cOther\u003e\u003e parseOthersForEdit(Collection\u003cString\u003e others) throws ParseException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assert others !\u003d null;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (others.isEmpty()) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Collection\u003cString\u003e otherSet \u003d others.size() \u003d\u003d 1 \u0026\u0026 others.contains(\"\") ? Collections.emptySet() : others;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return Optional.of(ParserUtil.parseOthers(otherSet));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e goals} into a {@code Set\u003cGoal\u003e} if {@code goals} is non-empty."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * If {@code goals} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * {@code Set\u003cGoal\u003e} containing zero goals."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private Optional\u003cSet\u003cGoal\u003e\u003e parseGoalsForEdit(Collection\u003cString\u003e goals) throws ParseException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assert goals !\u003d null;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (goals.isEmpty()) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Collection\u003cString\u003e goalSet \u003d goals.size() \u003d\u003d 1 \u0026\u0026 goals.contains(\"\") ? Collections.emptySet() : goals;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return Optional.of(ParserUtil.parseGoals(goalSet));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e steps} into a {@code List\u003cStep\u003e} if {@code steps} is non-empty."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private Optional\u003cList\u003cStep\u003e\u003e parseStepsForEdit(Collection\u003cString\u003e steps) throws ParseException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assert steps !\u003d null;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (steps.isEmpty()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return Optional.of(ParserUtil.parseSteps(steps));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 16,
      "tharshita": 15,
      "-": 45,
      "beatricetay": 115
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/parser/EditIngredientCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_FRUIT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_GRAIN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_OTHER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_PROTEIN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_VEGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.EditCommand.EditRecipeDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.EditIngredientCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Fruit;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Grain;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Other;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Protein;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Vegetable;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Parses input arguments and creates a new EditIngredientCommand object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class EditIngredientCommandParser implements Parser\u003cEditIngredientCommand\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditIngredientCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * and returns an EditIngredientCommand object for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public EditIngredientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (args.isBlank()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditIngredientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_INGREDIENT_GRAIN, PREFIX_INGREDIENT_VEGE,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        PREFIX_INGREDIENT_PROTEIN, PREFIX_INGREDIENT_FRUIT, PREFIX_INGREDIENT_OTHER);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        EditRecipeDescriptor editRecipeDescriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        parseGrainsForEditIngredient(argMultimap.getAllValues(PREFIX_INGREDIENT_GRAIN))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .ifPresent(editRecipeDescriptor::setGrains);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        parseVegetablesForEditIngredient(argMultimap.getAllValues(PREFIX_INGREDIENT_VEGE))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .ifPresent(editRecipeDescriptor::setVegetables);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        parseProteinsForEditIngredient(argMultimap.getAllValues(PREFIX_INGREDIENT_PROTEIN))"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .ifPresent(editRecipeDescriptor::setProteins);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        parseFruitsForEditIngredient(argMultimap.getAllValues(PREFIX_INGREDIENT_FRUIT))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .ifPresent(editRecipeDescriptor::setFruits);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        parseOthersForEditIngredient(argMultimap.getAllValues(PREFIX_INGREDIENT_OTHER))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .ifPresent(editRecipeDescriptor::setOthers);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (!editRecipeDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return new EditIngredientCommand(index, editRecipeDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses and adds the {@code Collection\u003cString\u003e grains} into the {@code Set\u003cGrain\u003e}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * If {@code grains} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * {@code Set\u003cGrain\u003e} containing zero Grain ingredients."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private Optional\u003cSet\u003cGrain\u003e\u003e parseGrainsForEditIngredient(Collection\u003cString\u003e grains) throws ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assert grains !\u003d null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (grains.isEmpty()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Collection\u003cString\u003e grainSet \u003d grains.size() \u003d\u003d 1 \u0026\u0026 grains.contains(\"\") ? Collections.emptySet() : grains;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return Optional.of(ParserUtil.parseGrains(grainSet));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses and adds the {@code Collection\u003cString\u003e vegetables} into the {@code Set\u003cVegetable\u003e}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * If {@code vegetables} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * {@code Set\u003cVegetable\u003e} containing zero Vegetable ingredients."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private Optional\u003cSet\u003cVegetable\u003e\u003e parseVegetablesForEditIngredient(Collection\u003cString\u003e vegetables)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assert vegetables !\u003d null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (vegetables.isEmpty()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Collection\u003cString\u003e vegetableSet \u003d vegetables.size() \u003d\u003d 1 \u0026\u0026 vegetables.contains(\"\")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                ? Collections.emptySet()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                : vegetables;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return Optional.of(ParserUtil.parseVegetables(vegetableSet));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses and adds the {@code Collection\u003cString\u003e proteins} into the {@code Set\u003cProtein\u003e}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * If {@code proteins} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * {@code Set\u003cProtein\u003e} containing zero Protein ingredients."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private Optional\u003cSet\u003cProtein\u003e\u003e parseProteinsForEditIngredient(Collection\u003cString\u003e proteins) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assert proteins !\u003d null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (proteins.isEmpty()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Collection\u003cString\u003e proteinSet \u003d proteins.size() \u003d\u003d 1 \u0026\u0026 proteins.contains(\"\")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                ? Collections.emptySet()"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                : proteins;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return Optional.of(ParserUtil.parseProteins(proteinSet));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses and adds the {@code Collection\u003cString\u003e fruits} into the {@code Set\u003cFruit\u003e}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * If {@code fruits} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * {@code Set\u003cFruit\u003e} containing zero Protein ingredients."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private Optional\u003cSet\u003cFruit\u003e\u003e parseFruitsForEditIngredient(Collection\u003cString\u003e fruits) throws ParseException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assert fruits !\u003d null;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (fruits.isEmpty()) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Collection\u003cString\u003e fruitSet \u003d fruits.size() \u003d\u003d 1 \u0026\u0026 fruits.contains(\"\")"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                ? Collections.emptySet()"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                : fruits;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return Optional.of(ParserUtil.parseFruits(fruitSet));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses and adds the {@code Collection\u003cString\u003e others} into the {@code Set\u003cOther\u003e}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * If {@code others} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * {@code Set\u003cOther\u003e} containing zero Other ingredients."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private Optional\u003cSet\u003cOther\u003e\u003e parseOthersForEditIngredient(Collection\u003cString\u003e others) throws ParseException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assert others !\u003d null;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (others.isEmpty()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Collection\u003cString\u003e otherSet \u003d others.size() \u003d\u003d 1 \u0026\u0026 others.contains(\"\") ? Collections.emptySet() : others;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return Optional.of(ParserUtil.parseOthers(otherSet));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 140,
      "beatricetay": 17
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/parser/EditStepCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_STEP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.EditStepCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Step;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Parses input arguments and creates a new EditStepCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class EditStepCommandParser implements Parser\u003cEditStepCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditStepCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * and returns a EditStepCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public EditStepCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (args.isBlank()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditStepCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_STEP);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String[] argsArray \u003d argMultimap.getPreamble().trim().split(\" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Step editedStep \u003d parseStepsForEditStep(argMultimap.getAllValues(PREFIX_STEP));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        int stepNumber;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argsArray[0]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            stepNumber \u003d ParserUtil.parseIndex(argsArray[1]).getZeroBased();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException aioobe) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditStepCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return new EditStepCommand(index, stepNumber, editedStep);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses {@code List\u003cString\u003e steps} into a {@code Step}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private Step parseStepsForEditStep(List\u003cString\u003e steps) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assert steps !\u003d null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (steps.isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditStepCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return ParserUtil.parseStep(steps.get(0));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 51,
      "beatricetay": 7
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/parser/FavouriteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.FavouriteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Parses input arguments and creates a new FavouriteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class FavouriteCommandParser implements Parser\u003cFavouriteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FavouriteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * and returns a FavouriteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public FavouriteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            Index[] index \u003d ParserUtil.parseMultipleIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return new FavouriteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FavouriteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 23,
      "beatricetay": 5
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/parser/FilterCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_GOAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_FRUIT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_GRAIN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_OTHER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_PROTEIN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_VEGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.goal.Goal;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.RecipeMatchesKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Time;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Fruit;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Grain;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Other;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Protein;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Vegetable;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Parses input arguments and creates a new FilterCommand object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class FilterCommandParser implements Parser\u003cFilterCommand\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FilterCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * and returns a FilterCommand object for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public FilterCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TIME, PREFIX_INGREDIENT_GRAIN, PREFIX_INGREDIENT_VEGE,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        PREFIX_INGREDIENT_PROTEIN, PREFIX_INGREDIENT_OTHER, PREFIX_GOAL);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        List\u003cTime\u003e filterByTime \u003d argMultimap.getValue(PREFIX_TIME).isPresent()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                ? parseTimeForFilter(argMultimap.getValue(PREFIX_TIME).get())"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                : Collections.emptyList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        boolean isFilteredByFavourites \u003d isFilteredByFavourites(argMultimap.getPreamble().toLowerCase());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Set\u003cGoal\u003e filterByGoals \u003d parseGoalsForFilter(argMultimap.getAllValues(PREFIX_GOAL));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Set\u003cGrain\u003e filterByGrain \u003d parseGrainsForFilter(argMultimap.getAllValues(PREFIX_INGREDIENT_GRAIN));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Set\u003cVegetable\u003e filterByVeg \u003d parseVegetablesForFilter(argMultimap.getAllValues(PREFIX_INGREDIENT_VEGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Set\u003cProtein\u003e filterByProtein \u003d parseProteinsForFilter(argMultimap.getAllValues(PREFIX_INGREDIENT_PROTEIN));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Set\u003cFruit\u003e filterByFruit \u003d parseFruitsForFilter(argMultimap.getAllValues(PREFIX_INGREDIENT_FRUIT));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Set\u003cOther\u003e filterByOthers \u003d parseOthersForFilter(argMultimap.getAllValues(PREFIX_INGREDIENT_OTHER));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (!CollectionUtil.isAnyNonEmpty(filterByTime, filterByGoals, filterByGrain, filterByVeg,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                filterByProtein, filterByFruit, filterByOthers) \u0026\u0026 !isFilteredByFavourites) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return new FilterCommand(new RecipeMatchesKeywordsPredicate(filterByTime, filterByGoals, isFilteredByFavourites,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                filterByGrain, filterByVeg, filterByProtein, filterByFruit, filterByOthers));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Returns whether user specified filtering by favourites."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private boolean isFilteredByFavourites(String preamble) throws ParseException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assert preamble !\u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (preamble.isBlank()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (preamble.equals(\"favourites\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses and adds the {@code Collection\u003cString\u003e grains} into the {@code Set\u003cGrain\u003e}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * If {@code grains} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * {@code Set\u003cGrain\u003e} containing zero Grain ingredients."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private Set\u003cGrain\u003e parseGrainsForFilter(Collection\u003cString\u003e grains) throws ParseException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assert grains !\u003d null;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Collection\u003cString\u003e grainSet \u003d (grains.size() \u003d\u003d 1 \u0026\u0026 grains.contains(\"\")) || grains.isEmpty()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                ? Collections.emptySet()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                : grains;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return ParserUtil.parseGrainsNameOnly(grainSet);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses and adds the {@code Collection\u003cString\u003e vegetables} into the {@code Set\u003cVegetable\u003e}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * If {@code vegetables} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * {@code Set\u003cVegetable\u003e} containing zero Vegetable ingredients."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private Set\u003cVegetable\u003e parseVegetablesForFilter(Collection\u003cString\u003e vegetables) throws ParseException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assert vegetables !\u003d null;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Collection\u003cString\u003e vegetableSet \u003d (vegetables.size() \u003d\u003d 1 \u0026\u0026 vegetables.contains(\"\")) || vegetables.isEmpty()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                ? Collections.emptySet()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                : vegetables;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return ParserUtil.parseVegetablesNameOnly(vegetableSet);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses and adds the {@code Collection\u003cString\u003e proteins} into the {@code Set\u003cProtein\u003e}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * If {@code proteins} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * {@code Set\u003cProtein\u003e} containing zero Protein ingredients."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private Set\u003cProtein\u003e parseProteinsForFilter(Collection\u003cString\u003e proteins) throws ParseException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assert proteins !\u003d null;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Collection\u003cString\u003e proteinSet \u003d (proteins.size() \u003d\u003d 1 \u0026\u0026 proteins.contains(\"\")) || proteins.isEmpty()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                ? Collections.emptySet()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                : proteins;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return ParserUtil.parseProteinsNameOnly(proteinSet);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses and adds the {@code Collection\u003cString\u003e fruits} into the {@code Set\u003cFruit\u003e}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * If {@code fruits} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * {@code Set\u003cFruit\u003e} containing zero Protein ingredients."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private Set\u003cFruit\u003e parseFruitsForFilter(Collection\u003cString\u003e fruits) throws ParseException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assert fruits !\u003d null;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Collection\u003cString\u003e fruitSet \u003d (fruits.size() \u003d\u003d 1 \u0026\u0026 fruits.contains(\"\")) || fruits.isEmpty()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                ? Collections.emptySet()"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                : fruits;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return ParserUtil.parseFruitsNameOnly(fruitSet);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses and adds the {@code Collection\u003cString\u003e others} into the {@code Set\u003cOther\u003e}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * If {@code others} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * {@code Set\u003cOther\u003e} containing zero Other ingredients."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private Set\u003cOther\u003e parseOthersForFilter(Collection\u003cString\u003e others) throws ParseException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assert others !\u003d null;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Collection\u003cString\u003e otherSet \u003d (others.size() \u003d\u003d 1 \u0026\u0026 others.contains(\"\")) || others.isEmpty()"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                ? Collections.emptySet()"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                : others;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return ParserUtil.parseOthersNameOnly(otherSet);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e goals} into a {@code Set\u003cGoal\u003e} if {@code goals} is non-empty."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * If {@code goals} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * {@code Set\u003cGoal\u003e} containing zero goals."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private Set\u003cGoal\u003e parseGoalsForFilter(Collection\u003cString\u003e goals) throws ParseException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assert goals !\u003d null;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Collection\u003cString\u003e goalSet \u003d (goals.size() \u003d\u003d 1 \u0026\u0026 goals.contains(\"\")) || goals.isEmpty()"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                ? Collections.emptySet()"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                : goals;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return ParserUtil.parseGoals(goalSet);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses {@code String time} into a {@code List\u003cTime\u003e} if {@code time} is non-empty."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private List\u003cTime\u003e parseTimeForFilter(String time) throws ParseException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assert time !\u003d null;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return time.isBlank()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                ? Collections.emptyList()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                : Arrays.asList(ParserUtil.parseTimeRange(time));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 150,
      "beatricetay": 20
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (nameKeywords[0].toLowerCase().equals(\"/strict\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (nameKeywords.length \u003c 2) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return new FindCommand(new NameContainsKeywordsPredicate(true,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    nameKeywords[1].replaceAll(\"\\\\s{2,}\", \" \")));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return new FindCommand(new NameContainsKeywordsPredicate(false,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    trimmedArgs.replaceAll(\"\\\\s{2,}\", \" \")));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 12,
      "-": 23,
      "beatricetay": 5
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "beatricetay": 3
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.goal.Goal;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Step;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Fruit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Grain;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Ingredient;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Other;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Protein;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Quantity;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Unit;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Vegetable;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.util.QuantityUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses multiple {@code oneBasedIndex} into an {@code Index} array and returns it."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static Index[] parseMultipleIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String[] args \u003d oneBasedIndex.trim().split(\" \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        int len \u003d args.length;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Integer[] toSort \u003d new Integer[len];"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        for (int i \u003d 0; i \u003c len; i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            String index \u003d args[i];"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (!StringUtil.isNonZeroUnsignedInteger(index)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            toSort[i] \u003d Integer.parseInt(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        toSort \u003d Arrays.stream(toSort).distinct().sorted().toArray(Integer[]::new);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Index[] indices \u003d new Index[toSort.length];"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        for (int i \u003d 0; i \u003c indices.length; i++) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            indices[i] \u003d Index.fromOneBased(toSort[i]);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return indices;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Parses a {@code String time} into a {@code Time}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @throws ParseException if the given {@code time} is invalid."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static Time parseTime(String time) throws ParseException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        String trimmedTime \u003d time.trim();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (!Time.isValidTime(trimmedTime)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            throw new ParseException(Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return new Time(trimmedTime);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses a {@code String time} into a {@code Time[] array}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Used to parse a range of times when the filter command is called."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @throws ParseException if the given {@code time} is invalid."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static Time[] parseTimeRange(String time) throws ParseException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String[] parsedTimeString \u003d time.split(\"-\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assert(parsedTimeString.length \u003e 0);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        int numOfTime \u003d parsedTimeString.length;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (numOfTime \u003e 2) { // Case: If there are more than 2 timings specified (ie. more than 2 dashes in the range)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new ParseException(Time.TIME_RANGE_CONSTRANTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else if (numOfTime \u003d\u003d 1) { // Case: If there is only one timing specified"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            String trimmedTime \u003d parsedTimeString[0].trim();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (!Time.isValidTime(trimmedTime)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                throw new ParseException(Time.TIME_RANGE_CONSTRANTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return new Time[] {new Time(trimmedTime)};"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else { // Case: If a range of timings is specified"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            String[] sortedTimeString;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                sortedTimeString \u003d Stream.of(parsedTimeString).map(String::trim).mapToInt(Integer::parseInt)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        .sorted().mapToObj(String::valueOf).toArray(String[]::new);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                // Case: If user uses wrong delimiter (eg. t/10,20 instead of t/10-20)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                throw new ParseException(Time.TIME_RANGE_CONSTRANTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            Time[] parsedTime \u003d new Time[2];"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            for (int i \u003d 0; i \u003c 2; i++) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                if (!Time.isValidTime(sortedTimeString[i])) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    throw new ParseException(Time.TIME_RANGE_CONSTRANTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                parsedTime[i] \u003d new Time(sortedTimeString[i]);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (parsedTime[0].equals(parsedTime[1])) { // Case: If user inputs same timings in range (eg. t/10-10)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                return new Time[] {parsedTime[0]};"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return parsedTime;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Parses a {@code String step} into an {@code Step}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @throws ParseException if the given {@code step} is invalid."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static Step parseStep(String step) throws ParseException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireNonNull(step);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        String trimmedStep \u003d step.trim();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (!Step.isValidStep(trimmedStep)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            throw new ParseException(Step.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return new Step(trimmedStep);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e steps} into a {@code List\u003cStep\u003e}."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static List\u003cStep\u003e parseSteps(Collection\u003cString\u003e steps) throws ParseException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(steps);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (steps.contains(\"\")) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new ParseException(Step.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        final List\u003cStep\u003e stepsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        for (String step : steps) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            Step nextStep \u003d parseStep(step);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (!stepsList.contains(nextStep)) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                stepsList.add(nextStep);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return stepsList;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Parses a {@code String goal} into a {@code Goal}."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @throws ParseException if the given {@code goal} is invalid."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static Goal parseGoal(String goal) throws ParseException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireNonNull(goal);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        String trimmedGoal \u003d goal.trim();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (!Goal.isValidGoalName(trimmedGoal)) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            throw new ParseException(Goal.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return new Goal(trimmedGoal);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e goals} into a {@code Set\u003cGoal\u003e}."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static Set\u003cGoal\u003e parseGoals(Collection\u003cString\u003e goals) throws ParseException {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireNonNull(goals);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        final Set\u003cGoal\u003e goalSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        for (String goalName : goals) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            goalSet.add(parseGoal(goalName));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return goalSet;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Parses {@code String quantity} that is in the form (magnitude unit) into a {@code Quantity}."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed, and units are case-insensitive."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * @throws ParseException if the give {@code quantity} is invalid."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static Quantity parseQuantity(String quantity) throws ParseException {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        quantity \u003d quantity.toLowerCase().trim();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        int indexOfUnit \u003d QuantityUtil.indexOfFirstAlphabet(quantity);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (indexOfUnit \u003d\u003d 0 || indexOfUnit \u003d\u003d quantity.length()) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throw new ParseException(Ingredient.MESSAGE_MISSING_FIELD);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        double magnitude \u003d Double.parseDouble(quantity.substring(0, indexOfUnit));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String unitString \u003d quantity.substring(indexOfUnit);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (!QuantityUtil.getAvailUnitsAsList().contains(unitString)) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throw new ParseException(Quantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Unit unit \u003d QuantityUtil.parseUnit(unitString);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return new Quantity(magnitude, unit);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Parses a {@code String grain} into a {@code Grain}."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * @throws ParseException if the given {@code grain} is invalid."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static Grain parseGrain(String grain) throws ParseException {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        requireNonNull(grain);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String[] splitFields \u003d grain.split(\",\", 2);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (splitFields.length \u003c 2) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throw new ParseException(Ingredient.MESSAGE_MISSING_FIELD);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String trimmedGrainName \u003d splitFields[1].trim();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String trimmedGrainQuantity \u003d splitFields[0].trim();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (!Ingredient.isValidIngredientName(trimmedGrainName)) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throw new ParseException(Ingredient.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Quantity grainQuantity \u003d parseQuantity(trimmedGrainQuantity);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return new Grain(trimmedGrainName, grainQuantity);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e grains} into a {@code Set\u003cGrain\u003e}."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static Set\u003cGrain\u003e parseGrains(Collection\u003cString\u003e grains) throws ParseException {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        requireNonNull(grains);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        final Set\u003cGrain\u003e grainsSet \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        for (String grain : grains) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            grainsSet.add(parseGrain(grain));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return grainsSet;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e grains} into a {@code Set\u003cGrain\u003e} where each {@code Grain} is constructed"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * with only a {@code String name}."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @throws ParseException if any given {@code Grain} name is invalid."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static Set\u003cGrain\u003e parseGrainsNameOnly(Collection\u003cString\u003e grains) throws ParseException {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(grains);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        final Set\u003cGrain\u003e grainsSet \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        for (String grain : grains) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            String trimmedGrainName \u003d grain.trim();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (!Ingredient.isValidIngredientName(trimmedGrainName)) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                throw new ParseException(Ingredient.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            grainsSet.add(new Grain(trimmedGrainName));"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return grainsSet;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Parses a {@code String vegetable} into a {@code Vegetable}."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * @throws ParseException if the given {@code vegetable} is invalid."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static Vegetable parseVegetable(String vegetable) throws ParseException {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        requireNonNull(vegetable);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String[] splitFields \u003d vegetable.split(\",\", 2);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (splitFields.length !\u003d 2) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throw new ParseException(Ingredient.MESSAGE_MISSING_FIELD);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String trimmedVegetableName \u003d splitFields[1].trim();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String trimmedVegetableQuantity \u003d splitFields[0].trim();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (!Ingredient.isValidIngredientName(trimmedVegetableName)) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throw new ParseException(Ingredient.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Quantity vegetableQuantity \u003d parseQuantity(trimmedVegetableQuantity);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return new Vegetable(trimmedVegetableName, vegetableQuantity);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e vegetables} into a {@code Set\u003cVegetable\u003e}."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static Set\u003cVegetable\u003e parseVegetables(Collection\u003cString\u003e vegetables) throws ParseException {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        requireNonNull(vegetables);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        final Set\u003cVegetable\u003e vegetablesSet \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        for (String vegetable : vegetables) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            vegetablesSet.add(parseVegetable(vegetable));"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return vegetablesSet;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e vegetables} into a {@code Set\u003cVegetable\u003e} where each {@code Vegetable} is"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * constructed with only a {@code String name}."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @throws ParseException if any given {@code Vegetable} name is invalid."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static Set\u003cVegetable\u003e parseVegetablesNameOnly(Collection\u003cString\u003e vegetables) throws ParseException {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(vegetables);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        final Set\u003cVegetable\u003e vegetablesSet \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        for (String vegetable : vegetables) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            String trimmedVegetableName \u003d vegetable.trim();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (!Ingredient.isValidIngredientName(trimmedVegetableName)) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                throw new ParseException(Ingredient.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            vegetablesSet.add(new Vegetable(trimmedVegetableName));"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return vegetablesSet;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Parses a {@code String protein} into a {@code Protein}."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * @throws ParseException if the given {@code protein} is invalid."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static Protein parseProtein(String protein) throws ParseException {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        requireNonNull(protein);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String[] splitFields \u003d protein.split(\",\", 2);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (splitFields.length !\u003d 2) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throw new ParseException(Ingredient.MESSAGE_MISSING_FIELD);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String trimmedProteinName \u003d splitFields[1].trim();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String trimmedProteinQuantity \u003d splitFields[0].trim();"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (!Ingredient.isValidIngredientName(trimmedProteinName)) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throw new ParseException(Ingredient.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Quantity proteinQuantity \u003d parseQuantity(trimmedProteinQuantity);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return new Protein(trimmedProteinName, proteinQuantity);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e proteins} into a {@code Set\u003cProtein\u003e}."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static Set\u003cProtein\u003e parseProteins(Collection\u003cString\u003e proteins) throws ParseException {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        requireNonNull(proteins);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        final Set\u003cProtein\u003e proteinsSet \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        for (String protein : proteins) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            proteinsSet.add(parseProtein(protein));"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return proteinsSet;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e proteins} into a {@code Set\u003cProtein\u003e} where each {@code Protein} is"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * constructed with only a {@code String name}."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @throws ParseException if any given {@code Protein} name is invalid."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static Set\u003cProtein\u003e parseProteinsNameOnly(Collection\u003cString\u003e proteins) throws ParseException {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(proteins);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        final Set\u003cProtein\u003e proteinsSet \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        for (String protein : proteins) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            String trimmedProteinName \u003d protein.trim();"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (!Ingredient.isValidIngredientName(trimmedProteinName)) {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                throw new ParseException(Ingredient.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            proteinsSet.add(new Protein(trimmedProteinName));"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return proteinsSet;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Parses a {@code String fruit} into a {@code Fruit}."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * @throws ParseException if the given {@code fruit} is invalid."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static Fruit parseFruit(String fruit) throws ParseException {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        requireNonNull(fruit);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String[] splitFields \u003d fruit.split(\",\", 2);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (splitFields.length !\u003d 2) {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throw new ParseException(Ingredient.MESSAGE_MISSING_FIELD);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String trimmedFruitName \u003d splitFields[1].trim();"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String trimmedFruitQuantity \u003d splitFields[0].trim();"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (!Ingredient.isValidIngredientName(trimmedFruitName)) {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throw new ParseException(Ingredient.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Quantity fruitQuantity \u003d parseQuantity(trimmedFruitQuantity);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return new Fruit(trimmedFruitName, fruitQuantity);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e fruits} into a {@code Set\u003cFruit\u003e}."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static Set\u003cFruit\u003e parseFruits(Collection\u003cString\u003e fruits) throws ParseException {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        requireNonNull(fruits);"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        final Set\u003cFruit\u003e fruitsSet \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        for (String fruit : fruits) {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            fruitsSet.add(parseFruit(fruit));"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return fruitsSet;"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e fruits} into a {@code Set\u003cFruit\u003e} where each {@code Fruit} is"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * constructed with only a {@code String name}."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @throws ParseException if any given {@code Fruit} name is invalid."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static Set\u003cFruit\u003e parseFruitsNameOnly(Collection\u003cString\u003e fruits) throws ParseException {"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(fruits);"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        final Set\u003cFruit\u003e fruitsSet \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        for (String fruit : fruits) {"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            String trimmedFruitName \u003d fruit.trim();"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (!Ingredient.isValidIngredientName(trimmedFruitName)) {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                throw new ParseException(Ingredient.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            fruitsSet.add(new Fruit(trimmedFruitName));"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return fruitsSet;"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Parses a {@code String other} into a {@code Other}."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * @throws ParseException if the given {@code other} is invalid."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static Other parseOther(String other) throws ParseException {"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        requireNonNull(other);"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String[] splitFields \u003d other.split(\",\", 2);"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (splitFields.length !\u003d 2) {"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throw new ParseException(Ingredient.MESSAGE_MISSING_FIELD);"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String trimmedOtherName \u003d splitFields[1].trim();"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String trimmedOtherQuantity \u003d splitFields[0].trim();"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (!Ingredient.isValidIngredientName(trimmedOtherName)) {"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throw new ParseException(Ingredient.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Quantity otherQuantity \u003d parseQuantity(trimmedOtherQuantity);"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return new Other(trimmedOtherName, otherQuantity);"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e others} into a {@code Set\u003cOther\u003e}."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static Set\u003cOther\u003e parseOthers(Collection\u003cString\u003e others) throws ParseException {"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        final Set\u003cOther\u003e othersSet \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        requireNonNull(others);"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        for (String other : others) {"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            othersSet.add(parseOther(other));"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return othersSet;"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e others} into a {@code Set\u003cOther\u003e} where each {@code Other} is"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * constructed with only a {@code String name}."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @throws ParseException if any given {@code Other} ingredient name is invalid."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static Set\u003cOther\u003e parseOthersNameOnly(Collection\u003cString\u003e others) throws ParseException {"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(others);"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        final Set\u003cOther\u003e othersSet \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        for (String other : others) {"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            String trimmedOtherName \u003d other.trim();"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (!Ingredient.isValidIngredientName(trimmedOtherName)) {"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                throw new ParseException(Ingredient.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            othersSet.add(new Other(trimmedOtherName));"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return othersSet;"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Parses {@code String date} into a {@code Date}."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static Date parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (!Date.isValidDate(trimmedDate)) {"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            throw new ParseException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return new Date(trimmedDate);"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 191,
      "tharshita": 37,
      "-": 69,
      "beatricetay": 231
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * E.g. \u0027g/\u0027 in \u0027add James g/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 1,
      "-": 37,
      "beatricetay": 1
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/parser/RecipeBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.AddIngredientCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.AddStepCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.logic.commands.CookedCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.DeleteIngredientCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.DeleteStepCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.EditIngredientCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.EditStepCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.FavouriteCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.ListGoalsCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.SwitchCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.UnfavouriteCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.plan.ClearPlanCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.plan.DeletePlanCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.plan.PlanCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.parser.plan.DeletePlanCommandParser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.parser.plan.PlanCommandParser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class RecipeBookParser {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\").toLowerCase();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        case ListGoalsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            return new ListGoalsCommand();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        case CookedCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            return new CookedCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        case FavouriteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return new FavouriteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        case UnfavouriteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return new UnfavouriteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        case FilterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return new FilterCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return new UndoCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return new RedoCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        case AddStepCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return new AddStepCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        case DeleteStepCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return new DeleteStepCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        case EditStepCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return new EditStepCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        case AddIngredientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return new AddIngredientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        case DeleteIngredientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return new DeleteIngredientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        case EditIngredientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return new EditIngredientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        case PlanCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return new PlanCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        case DeletePlanCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return new DeletePlanCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        case ClearPlanCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return new ClearPlanCommand();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        case SwitchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            return new SwitchCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 35,
      "tharshita": 11,
      "-": 60,
      "beatricetay": 40
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/parser/RedoCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.util.StringUtil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Parses input arguments and creates a new RedoCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class RedoCommandParser implements Parser\u003cRedoCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RedoCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * and returns a RedoCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public RedoCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String[] argsArray \u003d args.trim().split(\" \");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (argsArray.length \u003e 1) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new ParseException(RedoCommand.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        int numberOfRedo;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (argsArray[0].isBlank()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            numberOfRedo \u003d 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else if (argsArray[0].toLowerCase().equals(\"all\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            numberOfRedo \u003d 0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (!StringUtil.isNonZeroUnsignedInteger(argsArray[0])) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                throw new ParseException(UndoCommand.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            numberOfRedo \u003d Integer.parseInt(argsArray[0]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return new RedoCommand(numberOfRedo);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 33,
      "beatricetay": 5
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/parser/SwitchCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.SwitchCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.ui.tab.Tab;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Parses input arguments and creates a new SwitchCommand object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class SwitchCommandParser implements Parser\u003cSwitchCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SwitchCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * and returns a SwitchCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public SwitchCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        String specifiedTab \u003d args.trim().toLowerCase();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (specifiedTab.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, SwitchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (specifiedTab.equals(\"recipes\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            return new SwitchCommand(Tab.RECIPES);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        } else if (specifiedTab.equals(\"planning\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            return new SwitchCommand(Tab.PLANNING);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        } else if (specifiedTab.equals(\"goals\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            return new SwitchCommand(Tab.GOALS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        } else if (specifiedTab.equals(\"achievements\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            return new SwitchCommand(Tab.ACHIEVEMENTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, SwitchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 35,
      "beatricetay": 5
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/parser/UndoCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.util.StringUtil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Parses input arguments and creates a new UndoCommand object"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class UndoCommandParser implements Parser\u003cUndoCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UndoCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * and returns an UndoCommand object for execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public UndoCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String[] argsArray \u003d args.trim().split(\" \");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (argsArray.length \u003e 1) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new ParseException(UndoCommand.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        int numberOfUndo;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (argsArray[0].isBlank()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            numberOfUndo \u003d 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else if (argsArray[0].toLowerCase().equals(\"all\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            numberOfUndo \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (!StringUtil.isNonZeroUnsignedInteger(argsArray[0])) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                throw new ParseException(UndoCommand.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            numberOfUndo \u003d Integer.parseInt(argsArray[0]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return new UndoCommand(numberOfUndo);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 33,
      "beatricetay": 4
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/parser/UnfavouriteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.UnfavouriteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Parses input arguments and creates a new UnfavouriteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class UnfavouriteCommandParser implements Parser\u003cUnfavouriteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UnfavouriteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * and returns a UnfavouriteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public UnfavouriteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            Index[] index \u003d ParserUtil.parseMultipleIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return new UnfavouriteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnfavouriteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 23,
      "beatricetay": 5
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/parser/ViewCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.plan.PlannedRecipeWithinDateRangePredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * Parses input arguments and creates a new ViewCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "public class ViewCommandParser implements Parser\u003cViewCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * and returns a ViewCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public ViewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (args.equals(\"week\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            System.out.println(\"hi\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        PlannedRecipeWithinDateRangePredicate predicate \u003d new PlannedRecipeWithinDateRangePredicate("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                new Date(LocalDate.parse(\"2020-03-30\")), new Date(LocalDate.parse(\"2020-04-06\")));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        // model.updateFilteredRecipeList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return new ViewCommand(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 2,
      "beatricetay": 33
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/parser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "beatricetay": 2
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/parser/plan/DeletePlanCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.parser.plan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.plan.DeletePlanCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * Parses input arguments and creates a new DeletePlanCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "public class DeletePlanCommandParser implements Parser\u003cDeletePlanCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Parses the given {@code args} of arguments in the context of the DeletePlanCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * and returns an PlanCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public DeletePlanCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_DATE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                    DeletePlanCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DATE)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePlanCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return new DeletePlanCommand(index, date);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 2,
      "beatricetay": 54
    }
  },
  {
    "path": "src/main/java/seedu/recipe/logic/parser/plan/PlanCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.parser.plan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.plan.PlanCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * Parses input arguments and creates a new PlanCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "public class PlanCommandParser implements Parser\u003cPlanCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Parses the given {@code args} of arguments in the context of the PlanCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * and returns an PlanCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public PlanCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_DATE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, PlanCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DATE)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, PlanCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (!date.isDateInFuture()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, PlanCommand.MESSAGE_INVALID_DATE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return new PlanCommand(index, date);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 2,
      "beatricetay": 57
    }
  },
  {
    "path": "src/main/java/seedu/recipe/model/Date.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "package seedu.recipe.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.time.format.TextStyle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.time.temporal.WeekFields;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Represents a date in the recipes book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "public class Date implements Comparable\u003cDate\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            \"Date should be written in the format YYYY-MM-DD\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[0-9-]+\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final DateTimeFormatter DAY_OF_WEEK \u003d DateTimeFormatter.ofPattern(\"EEEE\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final DateTimeFormatter DATE_AND_MONTH \u003d DateTimeFormatter.ofPattern(\"dd MMMM yyyy\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final ZoneId ZONE_ID \u003d ZoneId.of(\"Asia/Singapore\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final Locale SINGAPORE_LOCALE \u003d new Locale(\"en\", \"SGP\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Constructs a {@code Date}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * @param date A valid date."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public Date(String date) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        checkArgument(isValidDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.date \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public Date(LocalDate date) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public Date() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.date \u003d LocalDate.now();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Returns true if a given string is a valid date"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (test.isBlank() || !test.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            // DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"dd MM YYYY\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            // todo: be able to parse other formats as well"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            LocalDate.parse(test);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Returns the Date of today, according to the input timezone."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static Date today() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return new Date(LocalDate.now(ZONE_ID));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Returns true if the date is older than today\u0027s date, according to the input timezone."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public boolean isDateInFuture() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Date yesterday \u003d new Date(LocalDate.now(ZONE_ID).minusDays(1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return isAfter(yesterday);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Checks whether the current date falls within the range of {@code start} Date and {@code end} Date."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * The start and end dates are non-inclusive."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public boolean isWithinRange(Date start, Date end) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (!start.isAfter(end)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return date.isAfter(start.date) \u0026\u0026 date.isBefore(end.date);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Returns true if the current date is after {@code otherDate}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public boolean isAfter(Date otherDate) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return date.isAfter(otherDate.date);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public String getMonthName() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return date.getMonth().getDisplayName(TextStyle.FULL, SINGAPORE_LOCALE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public String getDayOfWeek() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return \"\" + date.getDayOfWeek();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public String getWeekOfMonth() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        WeekFields weekFields \u003d WeekFields.of(SINGAPORE_LOCALE.getDefault());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return \"\" + date.get(weekFields.weekOfMonth());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public String toStringForJson() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return date.toString();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public int compareTo(Date other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        LocalDate otherLocalDate \u003d other.date;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (date.isBefore(otherLocalDate)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        } else if (date.isAfter(otherLocalDate)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return date.format(DAY_OF_WEEK) + \": \" + date.format(DATE_AND_MONTH);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                || (other instanceof Date // instanceof handles nulls"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                \u0026\u0026 date.equals(((Date) other).date)); // state check"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return date.hashCode();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tharshita": 11,
      "beatricetay": 137
    }
  },
  {
    "path": "src/main/java/seedu/recipe/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.logic.commands.CommandType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.cooked.Record;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.plan.PlannedDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    Predicate\u003cRecipe\u003e PREDICATE_SHOW_ALL_RECIPES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    Predicate\u003cPlannedDate\u003e PREDICATE_SHOW_ALL_PLANNED_RECIPES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Returns the user prefs\u0027 recipe book file path."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    Path getRecipeBookFilePath();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Sets the user prefs\u0027 recipe book file path."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    void setRecipeBookFilePath(Path recipeBookFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Replaces recipe book data with the data in {@code recipeBook}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    void setRecipeBook(ReadOnlyRecipeBook recipeBook);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /** Returns the RecipeBook */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    ReadOnlyRecipeBook getRecipeBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Returns true if a recipe with the same identity as {@code recipe} exists in the recipe book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    boolean hasRecipe(Recipe recipe);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Deletes the given recipe."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * The recipe must exist in the recipe book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    void deleteRecipe(Recipe target);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Favourites the given recipe."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * The recipe must exist in the recipe book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    void favouriteRecipe(Recipe target);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Unfavourites the given recipe."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * The recipe must exist in the recipe book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    void unfavouriteRecipe(Recipe target);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Adds the given recipe."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * {@code recipe} must not already exist in the recipe book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    void addRecipe(Recipe recipe);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Replaces the given recipe {@code target} with {@code editedRecipe}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * {@code target} must exist in the recipe book."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * The recipe identity of {@code editedRecipe} must not be the same as another existing recipe in the recipe book."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    void setRecipe(Recipe target, Recipe editedRecipe);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Checks if it is possible to undo. Returns true if there is at least {@code numberOfUndo} older states"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * of the RecipeBook (relative to the current state) being stored."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    boolean canUndo(int numberOfUndo);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Checks if it is possible to redo. Returns true if there is at least {@code numberOfRedo} newer states"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * of the RecipeBook (relative to the current state) being stored."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    boolean canRedo(int numberOfRedo);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Stores the new state of the RecipeBook when the RecipeBook undergoes a state change."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    void commitBook(CommandType commandType);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Reverts the RecipeBook back by {@code numberOfUndo} states."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    void undoBook(int numberOfUndo, Model model);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Fast forwards the RecipeBook by {@code numberOfRedo} states."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    void redoBook(int numberOfRedo, Model model);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /** Returns the PlannedBook */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    ReadOnlyPlannedBook getPlannedBook();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /** Returns an unmodifiable view of the filtered recipe list */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    ObservableList\u003cRecipe\u003e getFilteredRecipeList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Updates the filter of the filtered recipe list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    void updateFilteredRecipeList(Predicate\u003cRecipe\u003e predicate);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Replaces the data in the planned book with data from {@code plannedBook}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    void setPlannedBook(ReadOnlyPlannedBook plannedBook);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Adds the {@code plannedDate} that plans for {@code recipe}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    void addOnePlan(Recipe recipe, PlannedDate plannedDate);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Adds the {@code plannedDate} that plans for all {@code recipes}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    void addAllRecipesToPlan(List\u003cRecipe\u003e recipes, PlannedDate plannedDate);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Deletes the {@code recipe} plan."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    void deleteOnePlan(Recipe recipe, PlannedDate plannedDate);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Deletes all plans for {@code recipe}."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    void deleteAllRecipePlans(Recipe recipe);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Updates the recipe in the planned recipes from {@code target} to {@code editedRecipe}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    void setRecipeInPlans(Recipe target, Recipe editedRecipe);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Returns an unmodifiable view of the planned recipes."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    ObservableList\u003cPlannedDate\u003e getFilteredPlannedList();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Updates the filtered planned list to be filtered using the {@code predicate}. //todo: throw exception"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    void updateFilteredPlannedList(Predicate\u003cPlannedDate\u003e predicate) throws NullPointerException;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    //updateAndFillPlannedList //todo: implement for weekly view"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Adds a record in the cookedRecord list"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    void addRecord(Record record);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /** Returns an unmodifiable view of the filtered record list */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    ObservableList\u003cRecord\u003e getFilteredRecordList();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /** Returns an unmodifiable view of the filtered goals list */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    ObservableList\u003cInteger\u003e getFilteredGoalsTally();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Replaces record book data with the data in {@code CookedRecordBook}."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    ReadOnlyCookedRecordBook getRecordBook();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns true if a record with the same identity as {@code record} exists in the record book."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    boolean hasRecord(Record record);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 55,
      "tharshita": 33,
      "-": 59,
      "beatricetay": 52
    }
  },
  {
    "path": "src/main/java/seedu/recipe/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.logic.commands.CommandType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.cooked.CookedRecordBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.cooked.Record;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.plan.PlannedBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.plan.PlannedDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Represents the in-memory model of the recipe book data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final RecipeBook recipeBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private final PlannedBook plannedBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private final FilteredList\u003cRecipe\u003e filteredRecipes;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final MultipleBookStateManager states;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private final CookedRecordBook cookedRecordBook;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private final FilteredList\u003cRecord\u003e filteredRecords;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private final FilteredList\u003cPlannedDate\u003e filteredPlannedDates;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Initializes a ModelManager with the given recipeBook and userPrefs."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public ModelManager(ReadOnlyRecipeBook recipeBook, ReadOnlyUserPrefs userPrefs,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                        ReadOnlyCookedRecordBook cookedRecordBook, ReadOnlyPlannedBook plannedBook) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireAllNonNull(recipeBook, userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        logger.fine(\"Initializing with recipe book: \" + recipeBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.recipeBook \u003d new RecipeBook(recipeBook);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.plannedBook \u003d new PlannedBook(plannedBook);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        filteredRecipes \u003d new FilteredList\u003c\u003e(this.recipeBook.getRecipeList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.cookedRecordBook \u003d new CookedRecordBook(cookedRecordBook);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.filteredRecords \u003d new FilteredList\u003c\u003e(this.cookedRecordBook.getRecordsList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.states \u003d new MultipleBookStateManager(recipeBook, plannedBook, cookedRecordBook);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        filteredPlannedDates \u003d new FilteredList\u003c\u003e(this.plannedBook.getPlannedList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this(new RecipeBook(), new UserPrefs(), new CookedRecordBook(), new PlannedBook());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public Path getRecipeBookFilePath() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return userPrefs.getRecipeBookFilePath();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void setRecipeBookFilePath(Path recipeBookFilePath) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(recipeBookFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        userPrefs.setRecipeBookFilePath(recipeBookFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d RecipeBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void setRecipeBook(ReadOnlyRecipeBook recipeBook) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.recipeBook.resetData(recipeBook);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public ReadOnlyRecipeBook getRecipeBook() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return recipeBook;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public boolean hasRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireNonNull(recipe);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return recipeBook.hasRecipe(recipe);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void deleteRecipe(Recipe target) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        recipeBook.removeRecipe(target);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        plannedBook.deleteAllRecipePlans(target);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void favouriteRecipe(Recipe target) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        recipeBook.favouriteRecipe(target);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        plannedBook.favouriteRecipe(target);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void unfavouriteRecipe(Recipe target) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        recipeBook.unfavouriteRecipe(target);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        plannedBook.unfavouriteRecipe(target);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void addRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        recipeBook.addRecipe(recipe);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        updateFilteredRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void setRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireAllNonNull(target, editedRecipe);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        recipeBook.setRecipe(target, editedRecipe);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        plannedBook.setRecipe(target, editedRecipe);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public boolean canUndo(int numberOfUndo) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return states.canUndo(numberOfUndo);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public boolean canRedo(int numberOfRedo) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return states.canRedo(numberOfRedo);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void commitBook(CommandType commandType) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        case MAIN_LONE:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            states.commitRecipeBook(new RecipeBook(recipeBook), commandType);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        case MAIN:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            states.commitRecipeAndPlannedBook(new RecipeBook(recipeBook), new PlannedBook(plannedBook), commandType);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        case PLAN:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            states.commitPlannedBook(new PlannedBook(plannedBook), commandType);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        case GOALS:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            // Need to develop methods for deleting records before this can be implemented"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            // This block will never be reached"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void undoBook(int numberOfUndo, Model model) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        states.undo(numberOfUndo, model);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void redoBook(int numberOfRedo, Model model) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        states.redo(numberOfRedo, model);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Recipe List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Recipe} backed by the internal list of"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * {@code multipleBookManager}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public ObservableList\u003cRecipe\u003e getFilteredRecipeList() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return filteredRecipes;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void updateFilteredRecipeList(Predicate\u003cRecipe\u003e predicate) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        filteredRecipes.setPredicate(predicate);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PlannedBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public ReadOnlyPlannedBook getPlannedBook() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return plannedBook;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void setPlannedBook(ReadOnlyPlannedBook plannedBook) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.plannedBook.resetData(plannedBook);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Plan Recipe List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public void addOnePlan(Recipe recipe, PlannedDate plannedDate) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        plannedBook.addOnePlan(recipe, plannedDate);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public void addAllRecipesToPlan(List\u003cRecipe\u003e recipes, PlannedDate plannedDate) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        plannedBook.addAllRecipesToPlan(recipes, plannedDate);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public void deleteOnePlan(Recipe recipe, PlannedDate plannedDate) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        plannedBook.deleteOnePlan(recipe, plannedDate);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public void deleteAllRecipePlans(Recipe recipe) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        plannedBook.deleteAllRecipePlans(recipe);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public void setRecipeInPlans(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        plannedBook.setRecipe(target, editedRecipe);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public ObservableList\u003cPlannedDate\u003e getFilteredPlannedList() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return filteredPlannedDates;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public void updateFilteredPlannedList(Predicate\u003cPlannedDate\u003e predicate) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        filteredPlannedDates.setPredicate(predicate);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return recipeBook.equals(other.recipeBook)"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                \u0026\u0026 plannedBook.equals(other.plannedBook)"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                \u0026\u0026 filteredRecipes.equals(other.filteredRecipes);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Cooked Recipe List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void addRecord(Record record) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        cookedRecordBook.addRecord(record);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public ObservableList\u003cRecord\u003e getFilteredRecordList() {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return filteredRecords;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public ObservableList\u003cInteger\u003e getFilteredGoalsTally() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return cookedRecordBook.getFilteredGoalsTally();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public ReadOnlyCookedRecordBook getRecordBook() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return cookedRecordBook;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public boolean hasRecord(Record record) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireNonNull(record);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return cookedRecordBook.hasRecord(record);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 78,
      "tharshita": 53,
      "-": 106,
      "beatricetay": 69
    }
  },
  {
    "path": "src/main/java/seedu/recipe/model/MultipleBookStateManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "package seedu.recipe.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.logic.commands.CommandType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Maintains different versions (states) of RecipeBooks, PlannedBooks, and CookedRecordBooks in a list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class MultipleBookStateManager extends RecipeBook {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final ArrayList\u003cReadOnlyRecipeBook\u003e recipeBookStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final ArrayList\u003cReadOnlyPlannedBook\u003e plannedBookStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final ArrayList\u003cReadOnlyCookedRecordBook\u003e cookedRecordBookStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final Stack\u003cCommandType\u003e stackToUndo \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final Stack\u003cCommandType\u003e stackToRedo \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private int recipeBookStatePointer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private int plannedBookStatePointer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private int cookedRecordBookStatePointer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public MultipleBookStateManager(ReadOnlyRecipeBook recipeBook, ReadOnlyPlannedBook plannedBook,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    ReadOnlyCookedRecordBook cookedRecordBook) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.recipeBookStateList.add(recipeBook);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.plannedBookStateList.add(plannedBook);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.cookedRecordBookStateList.add(cookedRecordBook);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.recipeBookStatePointer \u003d 0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.plannedBookStatePointer \u003d 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.cookedRecordBookStatePointer \u003d 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Checks if it is possible to undo. Returns true if there is at least {@code numberOfUndo} older states"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * of the RecipeBook (relative to the current state) stored in the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public boolean canUndo(int numberOfUndo) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assert numberOfUndo \u003e\u003d 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (numberOfUndo \u003e 0) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return numberOfUndo \u003c\u003d stackToUndo.size();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return !stackToUndo.empty();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Checks if it is possible to redo. Returns true if there is are at least {@code numberOfRedo} newer states"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * of the RecipeBook (relative to the current state) stored in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public boolean canRedo(int numberOfRedo) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assert numberOfRedo \u003e\u003d 0;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (numberOfRedo \u003e 0) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return numberOfRedo \u003c\u003d stackToRedo.size();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return !stackToRedo.empty();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Removes redundant states after a user commits a book."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private void removeRedundantStates() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        while (recipeBookStateList.size() - 1 \u003e recipeBookStatePointer"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                || plannedBookStateList.size() - 1 \u003e plannedBookStatePointer) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            assert !stackToRedo.empty();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            CommandType redoCommandType \u003d stackToRedo.pop();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            switch (redoCommandType) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            case MAIN_LONE:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                recipeBookStateList.remove(recipeBookStateList.size() - 1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            case MAIN:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                recipeBookStateList.remove(recipeBookStateList.size() - 1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                plannedBookStateList.remove(plannedBookStateList.size() - 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            case PLAN:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                plannedBookStateList.remove(plannedBookStateList.size() - 1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Adds the new state of the RecipeBook to the list when the RecipeBook undergoes a state change."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * If the current state is not the last item on the list, the new state will override all states"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * after the current state."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void commitRecipeBook(ReadOnlyRecipeBook recipeBook, CommandType commandType) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        stackToUndo.push(commandType); // CommandType.MAIN_LONE"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if ((recipeBookStatePointer !\u003d recipeBookStateList.size() - 1)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                || (plannedBookStatePointer !\u003d plannedBookStateList.size() - 1)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            removeRedundantStates();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        recipeBookStateList.add(recipeBook);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        recipeBookStatePointer++;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Commits both the recipe book and planned book as there are changes made to both of them."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void commitRecipeAndPlannedBook(ReadOnlyRecipeBook recipeBook, ReadOnlyPlannedBook plannedBook,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                           CommandType commandType) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        stackToUndo.push(commandType); // CommandType.MAIN"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if ((recipeBookStatePointer !\u003d recipeBookStateList.size() - 1)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            || (plannedBookStatePointer !\u003d plannedBookStateList.size() - 1)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            removeRedundantStates();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        recipeBookStateList.add(recipeBook);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        recipeBookStatePointer++;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        plannedBookStateList.add(plannedBook);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        plannedBookStatePointer++;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Commits only the planned book as changes were only made to it."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void commitPlannedBook(ReadOnlyPlannedBook plannedBook, CommandType commandType) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        stackToUndo.push(commandType); // CommandType.PLAN"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (plannedBookStatePointer !\u003d plannedBookStateList.size() - 1) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            removeRedundantStates();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        plannedBookStateList.add(plannedBook);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        plannedBookStatePointer++;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Reverts the books back by {@code numberOfUndo} states."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void undo(int numberOfUndo, Model model) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assert numberOfUndo \u003e\u003d 0;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        int undoCounter \u003d numberOfUndo;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (numberOfUndo \u003d\u003d 0) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            undoCounter \u003d stackToUndo.size();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        while (undoCounter \u003e 0) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            CommandType commandType \u003d stackToUndo.pop();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            stackToRedo.push(commandType);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            switch (commandType) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            case MAIN_LONE:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                recipeBookStatePointer--;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            case MAIN:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                recipeBookStatePointer--;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                plannedBookStatePointer--;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            case PLAN:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                plannedBookStatePointer--;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            case GOALS:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                cookedRecordBookStatePointer--;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            undoCounter--;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        model.setRecipeBook(recipeBookStateList.get(recipeBookStatePointer));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        model.setPlannedBook(plannedBookStateList.get(plannedBookStatePointer));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Fast forwards the books by {@code numberOfRedo} states."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void redo(int numberOfRedo, Model model) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assert numberOfRedo \u003e\u003d 0;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        int redoCounter \u003d numberOfRedo;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (numberOfRedo \u003d\u003d 0) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            redoCounter \u003d stackToRedo.size();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        while (redoCounter \u003e 0) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            CommandType commandType \u003d stackToRedo.pop();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            stackToUndo.push(commandType);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            switch (commandType) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            case MAIN_LONE:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                recipeBookStatePointer++;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            case MAIN:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                recipeBookStatePointer++;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                plannedBookStatePointer++;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            case PLAN:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                plannedBookStatePointer++;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            case GOALS:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                cookedRecordBookStatePointer++;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            redoCounter--;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        model.setRecipeBook(recipeBookStateList.get(recipeBookStatePointer));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        model.setPlannedBook(plannedBookStateList.get(plannedBookStatePointer));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 198
    }
  },
  {
    "path": "src/main/java/seedu/recipe/model/ReadOnlyCookedRecordBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "package seedu.recipe.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.cooked.Record;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Unmodifiable view of a cooked Records"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public interface ReadOnlyCookedRecordBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns an unmodifiable view of the cooked record list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * This list contains history of cooked meals"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    ObservableList\u003cRecord\u003e getRecordsList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    ObservableList\u003cInteger\u003e getFilteredGoalsTally();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 18
    }
  },
  {
    "path": "src/main/java/seedu/recipe/model/ReadOnlyPlannedBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.plan.PlannedDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.plan.PlannedRecipeMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * Unmodifiable view of a schedule book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "public interface ReadOnlyPlannedBook {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Returns an unmodifiable view of the planned recipes map."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * This map will not contain duplicate recipes on the same day."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    ObservableList\u003cPlannedDate\u003e getPlannedList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    PlannedRecipeMap getPlannedMap();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "beatricetay": 20
    }
  },
  {
    "path": "src/main/java/seedu/recipe/model/ReadOnlyRecipeBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Unmodifiable view of a recipe book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public interface ReadOnlyRecipeBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns an unmodifiable view of the recipes list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * This list will not contain any duplicate recipes."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    ObservableList\u003cRecipe\u003e getRecipeList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 2,
      "tharshita": 3,
      "-": 9,
      "beatricetay": 2
    }
  },
  {
    "path": "src/main/java/seedu/recipe/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    Path getRecipeBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    Path getPlannedBookFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 1,
      "-": 14,
      "beatricetay": 3
    }
  },
  {
    "path": "src/main/java/seedu/recipe/model/RecipeBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.UniqueRecipeList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * Wraps all data at the recipe-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Duplicates are not allowed (by .isSameRecipe comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class RecipeBook implements ReadOnlyRecipeBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private final UniqueRecipeList recipes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        recipes \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public RecipeBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Creates a RecipeBook using the Recipes in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public RecipeBook(ReadOnlyRecipeBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Replaces the contents of the recipe list with {@code recipes}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * {@code recipes} must not contain duplicate recipes."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void setRecipes(List\u003cRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.recipes.setRecipes(recipes);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Resets the existing data of this {@code RecipeBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param newData"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void resetData(ReadOnlyRecipeBook newData) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        setRecipes(newData.getRecipeList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    //// recipe-level operations"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns true if a recipe with the same identity as {@code recipe} exists in the address book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public boolean hasRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireNonNull(recipe);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return recipes.contains(recipe);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Adds a recipe to the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * The recipe must not already exist in the address book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void addRecipe(Recipe p) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        recipes.add(p);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Replaces the given recipe {@code target} in the list with {@code editedRecipe}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * The recipe identity of {@code editedRecipe} must not be the same as another existing recipe in the address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void setRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireNonNull(editedRecipe);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        recipes.setRecipe(target, editedRecipe);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Removes {@code key} from this {@code RecipeBook}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * {@code key} must exist in the recipe book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void removeRecipe(Recipe key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        recipes.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Favourites {@code key} from this {@code RecipeBook}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * {@code key} must exist in the recipe book."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void favouriteRecipe(Recipe key) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        recipes.favourite(key);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Unfavourites {@code key} from this {@code RecipeBook}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * {@code key} must exist in the recipe book."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void unfavouriteRecipe(Recipe key) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        recipes.unfavourite(key);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return recipes.asUnmodifiableObservableList().size() + \" recipes\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public ObservableList\u003cRecipe\u003e getRecipeList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return recipes.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                || (other instanceof RecipeBook // instanceof handles nulls"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                \u0026\u0026 recipes.equals(((RecipeBook) other).recipes));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return recipes.hashCode();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 27,
      "tharshita": 28,
      "-": 78,
      "beatricetay": 4
    }
  },
  {
    "path": "src/main/java/seedu/recipe/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private Path recipeBookFilePath \u003d Paths.get(\"data\" , \"recipebook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private Path cookedRecordFilePath \u003d Paths.get(\"data\" , \"cookedrecords.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private Path plannedBookFilePath \u003d Paths.get(\"data\", \"plannedbook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        setRecipeBookFilePath(newUserPrefs.getRecipeBookFilePath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        setPlannedBookFilePath(newUserPrefs.getPlannedBookFilePath());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public Path getRecipeBookFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return recipeBookFilePath;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void setRecipeBookFilePath(Path recipeBookFilePath) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(recipeBookFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.recipeBookFilePath \u003d recipeBookFilePath;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public Path getPlannedBookFilePath() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return plannedBookFilePath;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public void setPlannedBookFilePath(Path plannedBookFilePath) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        requireNonNull(plannedBookFilePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.plannedBookFilePath \u003d plannedBookFilePath;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                \u0026\u0026 recipeBookFilePath.equals(o.recipeBookFilePath)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                \u0026\u0026 plannedBookFilePath.equals(o.plannedBookFilePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return Objects.hash(guiSettings, recipeBookFilePath, plannedBookFilePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        sb.append(\"\\nLocal recipe data file location : \" + recipeBookFilePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        sb.append(\"\\nLocal planned recipe data file location: \" + plannedBookFilePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public Path getCookedRecordFilePath() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return cookedRecordFilePath;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 6,
      "tharshita": 3,
      "-": 78,
      "beatricetay": 18
    }
  },
  {
    "path": "src/main/java/seedu/recipe/model/cooked/CookedRecordBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "package seedu.recipe.model.cooked;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.ReadOnlyCookedRecordBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Duplicates are not allowed (by .isSameRecipe comparison)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class CookedRecordBook implements ReadOnlyCookedRecordBook {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private final UniqueRecordList records;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        records \u003d new UniqueRecordList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public CookedRecordBook() {}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Creates a RecipeBook using the Recipes in the {@code toBeCopied}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public CookedRecordBook(ReadOnlyCookedRecordBook toBeCopied) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Replaces the contents of the recipe list with {@code records}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * {@code records} must not contain duplicate recipes."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void setRecords(List\u003cRecord\u003e records) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.records.setRecords(records);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Resets the existing data of this {@code CookedRecordBook} with {@code newData}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @param newData"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void resetData(ReadOnlyCookedRecordBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        setRecords(newData.getRecordsList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    //// recipe-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns true if a record with the same identity as {@code record} exists in the cookedrecord."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public boolean hasRecord(Record record) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireNonNull(record);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return records.contains(record);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Adds a record to the cookedrecords."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * The record must not already exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void addRecord(Record p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        records.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Replaces the given recipe {@code target} in the list with {@code editedRecipe}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * The recipe identity of {@code editedRecipe} must not be the same as another existing recipe in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void setRecord(Record target, Record editedRecord) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireNonNull(editedRecord);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        records.setRecord(target, editedRecord);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Removes {@code key} from this {@code CookedRcord}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * {@code key} must exist in the cookedrecord."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void removeRecord(Record key) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        records.remove(key);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return records.asUnmodifiableObservableList().size() + \" records\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                || (other instanceof CookedRecordBook // instanceof handles nulls"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                \u0026\u0026 records.equals(((CookedRecordBook) other).records));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return records.hashCode();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public ObservableList\u003cRecord\u003e getRecordsList() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return records.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public ObservableList\u003cInteger\u003e getFilteredGoalsTally() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return records.getGoalsTally();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 126
    }
  },
  {
    "path": "src/main/java/seedu/recipe/model/cooked/Record.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "package seedu.recipe.model.cooked;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.recipe.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.goal.Goal;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.recipe.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Represents a Record in the cooked records book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class Record {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private final Set\u003cGoal\u003e goals \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public Record(Name name, Date date, Set\u003cGoal\u003e goals) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireAllNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.goals.addAll(goals);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns an immutable goal set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public Set\u003cGoal\u003e getGoals() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return Collections.unmodifiableSet(goals);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns true if both recipes of the same name and same date."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * This defines a weaker notion of equality between two recipes."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public boolean isSameRecord(Record otherRecord) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (otherRecord \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return otherRecord !\u003d null"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                \u0026\u0026 otherRecord.getName().equals(getName())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                \u0026\u0026 otherRecord.getDate().equals(getDate());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns true if both recipes have the same identity and data fields."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * This defines a stronger notion of equality between two recipes."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (!(other instanceof Record)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Record otherRecord \u003d (Record) other;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return otherRecord.getName().equals(getName())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                \u0026\u0026 otherRecord.getDate().equals(getDate())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                \u0026\u0026 otherRecord.getGoals().equals(getGoals());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return Objects.hash(name, date);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                .append(\"\\nDate: \")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                .append(getDate())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                .append(\"\\nGoals: \");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        getGoals().forEach(builder::append);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 105
    }
  },
  {
    "path": "src/main/java/seedu/recipe/model/cooked/UniqueRecordList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "package seedu.recipe.model.cooked;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.recipe.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.goal.Goal;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.recipe.exceptions.DuplicateRecipeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.recipe.exceptions.RecipeNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * A list of records that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * A record is considered unique by comparing using {@code Record#isSameRecord(Record)}. As such, adding and updating of"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * records uses Record#isSameRecord(Record) for equality so as to ensure that the recipe being added or updated is"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * unique in terms of identity in the UniqueRecipeList. However, the removal of a record uses Record#equals(Object) so"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * as to ensure that the record with exactly the same fields will be removed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": " *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * @see Recipe#isSameRecipe(Recipe)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class UniqueRecordList implements Iterable\u003cRecord\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private final ObservableList\u003cRecord\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private final ObservableList\u003cRecord\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void setRecords(UniqueRecordList replacement) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Replaces the contents of this list with {@code recipes}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * {@code recipes} must not contain duplicate recipes."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void setRecords(List\u003cRecord\u003e records) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireAllNonNull(records);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (!recordsAreUnique(records)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            throw new DuplicateRecipeException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        internalList.setAll(records);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns true if the list contains an equivalent record as the given argument."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public boolean contains(Record toCheck) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameRecord);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Adds a record to the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * The record must not already exist in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void add(Record toAdd) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            throw new DuplicateRecipeException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Replaces the record {@code target} in the list with {@code editedRecord}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * The recipe identity of {@code editedRecord} must not be the same as another existing record in the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void setRecord(Record target, Record editedRecord) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireAllNonNull(target, editedRecord);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            //exception to be changed"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            throw new RecipeNotFoundException();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (!target.isSameRecord(editedRecord) \u0026\u0026 contains(editedRecord)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            throw new DuplicateRecipeException();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        internalList.set(index, editedRecord);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Removes the equivalent record from the list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * The record must exist in the list."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void remove(Record toRemove) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            throw new RecipeNotFoundException();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public ObservableList\u003cRecord\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public Iterator\u003cRecord\u003e iterator() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns true if {@code recipes} contains only unique recipes."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private boolean recordsAreUnique(List\u003cRecord\u003e records) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        for (int i \u003d 0; i \u003c records.size() - 1; i++) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            for (int j \u003d i + 1; j \u003c records.size(); j++) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                if (records.get(i).isSameRecord(records.get(j))) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns goalTally for all main {@code goal} in cookedRecordBook."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public ObservableList\u003cInteger\u003e getGoalsTally() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        HashMap\u003cString, Integer\u003e goalMap \u003d new HashMap\u003cString, Integer\u003e();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        goalMap.put(\"Herbivore\", 0);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        goalMap.put(\"Bulk like the Hulk\", 0);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        goalMap.put(\"Wholesome Wholemeal\", 0);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        for (int i \u003d 0; i \u003c internalList.size(); i++) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            List\u003cGoal\u003e currGoals \u003d new ArrayList\u003cGoal\u003e();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            currGoals.addAll(internalList.get(i).getGoals());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            for (Goal curr : currGoals) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                String goalName \u003d curr.goalName;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                Integer prevCount \u003d goalMap.get(goalName);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                goalMap.put(goalName, prevCount + 1);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        ObservableList\u003cInteger\u003e internalGoalList \u003d FXCollections.observableArrayList("
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                goalMap.get(\"Herbivore\"),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                goalMap.get(\"Bulk like the Hulk\"),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                goalMap.get(\"Wholesome Wholemeal\"));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalGoalList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 155
    }
  },
  {
    "path": "src/main/java/seedu/recipe/model/goal/Goal.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.model.goal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Represents a Goal in the recipe book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidGoalName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class Goal {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Goals names should contain only alphabetical letters or spaces\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[ A-Za-z]+$+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public final String goalName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Constructs a {@code Goal}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @param goalName A valid goal name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public Goal(String goalName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireNonNull(goalName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        checkArgument(isValidGoalName(goalName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.goalName \u003d goalName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns true if a given string is a valid goal name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static boolean isValidGoalName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                || (other instanceof Goal // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                \u0026\u0026 goalName.toLowerCase().equals(((Goal) other).goalName.toLowerCase())); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return goalName.toLowerCase().hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return \u0027[\u0027 + goalName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 3,
      "tharshita": 47,
      "beatricetay": 4
    }
  },
  {
    "path": "src/main/java/seedu/recipe/model/plan/DuplicatePlannedRecipeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.model.plan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * Signals that the operation will result in duplicate Planned Recipes"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "public class DuplicatePlannedRecipeException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public DuplicatePlannedRecipeException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        super(\"Operation would result in duplicate planned recipes\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "beatricetay": 10
    }
  },
  {
    "path": "src/main/java/seedu/recipe/model/plan/PlannedBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.model.plan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.ReadOnlyPlannedBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * Wraps all data at the planned-recipe-book level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * Duplicates are not allowed (by .isSameRecipe comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "public class PlannedBook implements ReadOnlyPlannedBook {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private final UniquePlannedList plannedDates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private final PlannedRecipeMap recipeMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public PlannedBook() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        plannedDates \u003d new UniquePlannedList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        recipeMap \u003d new PlannedRecipeMap();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Creates a PlannedBook using the planned recipes in the {@code toBeCopied}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public PlannedBook(ReadOnlyPlannedBook toBeCopied) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Replaces the contents of the planned recipe list with {@code plannedDates}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * {@code plannedDates} must not contain duplicate recipes on the same day."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public void setPlannedDates(ObservableList\u003cPlannedDate\u003e plannedDates) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.plannedDates.setPlannedDates(plannedDates);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Replaces the contents of the recipe map with {@code plannedRecipeMap}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public void setRecipeMap(PlannedRecipeMap recipeMap) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.recipeMap.setPlannedRecipeMap(recipeMap);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Resets the existing data of this {@code PlannedBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public void resetData(ReadOnlyPlannedBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        setPlannedDates(newData.getPlannedList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        setRecipeMap(newData.getPlannedMap());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d PlannedDate-level methods \u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Checks whether the planned book contains {@code plannedDate}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public boolean contains(PlannedDate plannedDate) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return plannedDates.hasPlannedDate(plannedDate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Adds {@code plannedDate} into the planned recipes and recipe map."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * The planned recipe must not exist in the planned book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public void addOnePlan(Recipe recipe, PlannedDate plannedDate) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        plannedDates.add(plannedDate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        recipeMap.addOnePlannedRecipe(recipe, plannedDate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Updates the recipe map for all {@code recipes}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Adds {@code plannedDate} into the planned recipes list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * The planned recipe must not exist in the planned book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public void addAllRecipesToPlan(List\u003cRecipe\u003e recipes, PlannedDate plannedDate) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        plannedDates.add(plannedDate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        recipeMap.addAllRecipesToPlan(recipes, plannedDate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Deletes {@code recipe} from all planned dates in the planned recipes list and map."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public void deleteAllRecipePlans(Recipe recipe) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        List\u003cPlannedDate\u003e plans \u003d new ArrayList\u003c\u003e(recipeMap.getPlans(recipe));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        recipeMap.deleteAllPlannedRecipes(recipe);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        for (PlannedDate plan: plans) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            if (plan.isOneRecipe()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                plannedDates.remove(plan); // delete planned date if it consisted of that one recipe only"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                plannedDates.remove(plan);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                PlannedDate newPlannedDate \u003d plan.deleteRecipe(recipe);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                plannedDates.add(newPlannedDate);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Deletes {@code recipe} from the planned recipes internal list in the {@code plannedDate}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * If the {@code recipe} is the last recipe in the internal list, delete the {@code plannedDate}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * from the plannedRecipes list."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Deletes {@code recipe} in the mapping as well."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public void deleteOnePlan(Recipe recipe, PlannedDate plannedDate) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (plannedDate.isOneRecipe()) { // if one recipe is left, remove plannedDate"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            plannedDates.remove(plannedDate);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            plannedDates.remove(plannedDate);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            plannedDate \u003d plannedDate.deleteRecipe(recipe);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            plannedDates.add(plannedDate);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        recipeMap.deleteOnePlannedRecipe(recipe, plannedDate);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Sets {@code target} to {@code editedRecipe} in the list and map."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public void setRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (recipeMap.contains(target)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            List\u003cPlannedDate\u003e oldPlans \u003d new ArrayList\u003c\u003e(recipeMap.getPlans(target));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            List\u003cPlannedDate\u003e newPlans \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            for (PlannedDate plan : oldPlans) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                plannedDates.remove(plan);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                PlannedDate newPlan \u003d plan.setRecipe(target, editedRecipe);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                newPlans.add(newPlan);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                plannedDates.add(newPlan);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            recipeMap.setRecipe(target, editedRecipe, newPlans);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Favourites a recipe."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public void favouriteRecipe(Recipe toFavourite) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Recipe newRecipe \u003d new Recipe(toFavourite.getName(), toFavourite.getTime(), toFavourite.getGrains(),"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                toFavourite.getVegetables(), toFavourite.getProteins(), toFavourite.getFruits(),"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                toFavourite.getOthers(), toFavourite.getSteps(), toFavourite.getGoals(), true);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        setRecipe(toFavourite, newRecipe);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Unfavourites a recipe."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public void unfavouriteRecipe(Recipe toUnfavourite) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Recipe newRecipe \u003d new Recipe(toUnfavourite.getName(), toUnfavourite.getTime(), toUnfavourite.getGrains(),"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                toUnfavourite.getVegetables(), toUnfavourite.getProteins(), toUnfavourite.getFruits(),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                toUnfavourite.getOthers(), toUnfavourite.getSteps(), toUnfavourite.getGoals(), false);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        setRecipe(toUnfavourite, newRecipe);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d Util methods \u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public ObservableList\u003cPlannedDate\u003e getPlannedList() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return plannedDates.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public PlannedRecipeMap getPlannedMap() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return recipeMap;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                || (other instanceof PlannedBook // instanceof handles nulls"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                \u0026\u0026 plannedDates.equals(((PlannedBook) other).plannedDates));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return plannedDates.hashCode();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "beatricetay": 183
    }
  },
  {
    "path": "src/main/java/seedu/recipe/model/plan/PlannedDate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.model.plan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.exceptions.DuplicateRecipeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * Represents a planned recipe in the planned recipes book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * Stores the list of all recipes planned on a date."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "public class PlannedDate implements Comparable\u003cPlannedDate\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private List\u003cRecipe\u003e recipes;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public PlannedDate(List\u003cRecipe\u003e recipes, Date date) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.recipes \u003d recipes;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Replaces the entire planned recipes list with {@code recipes}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public void setRecipes(List\u003cRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.recipes \u003d recipes;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Replaces the {@code target} Recipe with the {@code newRecipe} recipe in the planned recipe\u0027s list of recipes"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * and returns a new PlannedDate."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public PlannedDate setRecipe(Recipe target, Recipe newRecipe) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        List\u003cRecipe\u003e newRecipes \u003d new ArrayList\u003c\u003e(recipes);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        int index \u003d newRecipes.indexOf(target);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        newRecipes.set(index, newRecipe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return new PlannedDate(newRecipes, date);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Concatenates all recipes planned on the same day and returns a new PlannedDate."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public PlannedDate addRecipes(PlannedDate plannedDate) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (recipes.contains(plannedDate)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throw new DuplicateRecipeException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        List\u003cRecipe\u003e newRecipes \u003d new ArrayList\u003c\u003e(recipes);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        newRecipes.addAll(plannedDate.getRecipes());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return new PlannedDate(newRecipes, date);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Deletes {@code recipe} from the list and returns a new PlannedDate."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public PlannedDate deleteRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        List\u003cRecipe\u003e newRecipes \u003d new ArrayList\u003c\u003e(recipes);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        newRecipes.remove(recipe);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return new PlannedDate(newRecipes, date);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Returns true if the size of recipes is 1."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public boolean isOneRecipe() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return recipes.size() \u003d\u003d 1;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Returns true if {@code plannedDate} is planned on the same day and all its recipes"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * can be found in the current PlannedDate\u0027s list, or if duplicate recipes are found in {@code plannedDate}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public boolean hasSameRecipeInPlan(PlannedDate plannedDate) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (plannedDate.recipesAreUnique()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return date.equals(plannedDate.date) \u0026\u0026 recipes.containsAll(plannedDate.getRecipes());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Returns true if it is planned on {@code onDate}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public boolean isOnDate(Date onDate) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return date.equals(onDate);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Returns true if the recipes in the internal recipe list consist of unique recipes."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public boolean recipesAreUnique() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Set\u003cRecipe\u003e uniqueRecipeSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        for (Recipe recipe: recipes) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            if (!uniqueRecipeSet.add(recipe)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Checks whether the date of this planned recipe falls within the {@code start} date and the {@code end} date."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * The start and end date is non-inclusive."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public boolean isWithinRange(Date start, Date end) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return date.isWithinRange(start, end);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public boolean hasSameDate(PlannedDate other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return date.equals(other.date);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public List\u003cRecipe\u003e getRecipes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return recipes;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public int compareTo(PlannedDate other) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return date.compareTo(other.date);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return Objects.hash(recipes, date);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                || (other instanceof PlannedDate // instanceof handles nulls"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                \u0026\u0026 date.equals(((PlannedDate) other).date) // state check"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                \u0026\u0026 recipes.equals(((PlannedDate) other).recipes));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return date.toString() + \"\\n\" + recipes.toString();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 3,
      "beatricetay": 145
    }
  },
  {
    "path": "src/main/java/seedu/recipe/model/plan/PlannedRecipeMap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.model.plan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * A map of recipe to list-of-planned-recipes that contains mappings to ease the updating of planned recipes when"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * the original recipes are changed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "public class PlannedRecipeMap {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private Map\u003cRecipe, List\u003cPlannedDate\u003e\u003e internalMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public PlannedRecipeMap() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        internalMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Replaces the contents of the map with {@code plannedRecipeMap}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public void setPlannedRecipeMap(PlannedRecipeMap plannedRecipeMap) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        internalMap.clear();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        internalMap.putAll(plannedRecipeMap.getInternalMap());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Adds the {@code plannedDate} to the list of planned recipes at {@code recipe}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public void addOnePlannedRecipe(Recipe recipe, PlannedDate plannedDate) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (internalMap.containsKey(recipe)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            internalMap.get(recipe).add(plannedDate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            List\u003cPlannedDate\u003e allPlans \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            allPlans.add(plannedDate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            internalMap.put(recipe, allPlans);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Adds all {@code plannedDates} to the {@code recipe} key."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public void addAllPlannedRecipes(Recipe recipe, List\u003cPlannedDate\u003e plannedDates) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (internalMap.containsKey(recipe)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            internalMap.get(recipe).addAll(plannedDates);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            internalMap.put(recipe, plannedDates);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Adds the {@code plannedDate} to all {@code recipes} keys"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public void addAllRecipesToPlan(List\u003cRecipe\u003e recipes, PlannedDate plannedDate) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        recipes.stream().forEach(recipe -\u003e addOnePlannedRecipe(recipe, plannedDate));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Deletes the {@code plannedDate} from the list at the {@code recipe} key."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public void deleteOnePlannedRecipe(Recipe recipe, PlannedDate plannedDate) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        List\u003cPlannedDate\u003e allPlans \u003d internalMap.get(recipe);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (allPlans.size() \u003d\u003d 1) { // only one plan in this list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            internalMap.remove(recipe);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            allPlans.remove(plannedDate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Deletes the list of planned recipes at {@code recipe} key."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public void deleteAllPlannedRecipes(Recipe recipe) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        internalMap.remove(recipe);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Returns a new list of planned dates at the {@code recipe} key."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public List\u003cPlannedDate\u003e getPlans(Recipe recipe) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (contains(recipe)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return new ArrayList\u003c\u003e(internalMap.get(recipe));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Removes the values at {@code target} key and places the updated values at the {@code editedRecipe} key."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public void setRecipe(Recipe target, Recipe editedRecipe, List\u003cPlannedDate\u003e newPlans) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (internalMap.containsKey(target)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            internalMap.remove(target);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            internalMap.put(editedRecipe, newPlans);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Returns true if map contains {@code key}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public boolean contains(Recipe key) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return internalMap.containsKey(key);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Returns a new copy of the recipe to list-of-planned-recipes mapping."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private Map\u003cRecipe, List\u003cPlannedDate\u003e\u003e getInternalMap() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return new HashMap\u003c\u003e(internalMap);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "beatricetay": 115
    }
  },
  {
    "path": "src/main/java/seedu/recipe/model/plan/PlannedRecipeNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.model.plan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * Signals that the operation is unable to find the specified planned recipe."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "public class PlannedRecipeNotFoundException extends RuntimeException { }"
      }
    ],
    "authorContributionMap": {
      "beatricetay": 6
    }
  },
  {
    "path": "src/main/java/seedu/recipe/model/plan/PlannedRecipeOnDatePredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.model.plan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * Tests that a PlannedDate PlannedDate is on the specified Date."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "public class PlannedRecipeOnDatePredicate implements Predicate\u003cPlannedDate\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private Date onDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public PlannedRecipeOnDatePredicate(Date onDate) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.onDate \u003d onDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public boolean test(PlannedDate recipe) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return recipe.isOnDate(onDate);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "beatricetay": 23
    }
  },
  {
    "path": "src/main/java/seedu/recipe/model/plan/PlannedRecipeWithinDateRangePredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.model.plan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * Tests that a PlannedDate\u0027s PlannedDate falls within the specified Date range."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * The start and end dates are non-inclusive."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "public class PlannedRecipeWithinDateRangePredicate implements Predicate\u003cPlannedDate\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private Date start;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private Date end;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public PlannedRecipeWithinDateRangePredicate(Date start, Date end) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public boolean test(PlannedDate recipe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return recipe.isWithinRange(start, end);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 5,
      "beatricetay": 20
    }
  },
  {
    "path": "src/main/java/seedu/recipe/model/plan/UniquePlannedList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.model.plan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * A list of planned dates that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * Ensures that at any point in time, the items in the list of planned dates each has a unique Date."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * This means that PlannedDate items with the same Date must not exist in the list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * A planned date is considered unique by comparing using {@code PlannedDate#equals(object)}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " *  Supports a minimal set of list operations."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "public class UniquePlannedList {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private ObservableList\u003cPlannedDate\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private ObservableList\u003cPlannedDate\u003e unmodifiableObservableList \u003d FXCollections"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Replaces the contents of this map with {@code plannedDates}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * {@code plannedDates} must not contain duplicate recipes on the same date."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public void setPlannedDates(ObservableList\u003cPlannedDate\u003e plannedDates) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        requireAllNonNull(plannedDates);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (!plannedDatesAreUnique(plannedDates)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throw new DuplicatePlannedRecipeException();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        internalList.setAll(plannedDates);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Adds {@code plannedDate} to the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public void add(PlannedDate plannedDate) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        requireNonNull(plannedDate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (internalList.contains(plannedDate) || hasPlannedDate(plannedDate)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throw new DuplicatePlannedRecipeException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Optional\u003cPlannedDate\u003e optionalSameDate \u003d withSameDate(plannedDate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (optionalSameDate.isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            internalList.add(plannedDate); // planned on a new day"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            PlannedDate sameDate \u003d optionalSameDate.get();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            internalList.remove(sameDate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            sameDate \u003d sameDate.addRecipes(plannedDate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            internalList.add(sameDate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            System.out.println(\"reached, internal list: \" + internalList.size());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Removes {@code plannedDate} from the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public void remove(PlannedDate plannedDate) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        requireNonNull(plannedDate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        System.out.println(\"removing + \" + plannedDate); //todo remove"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (!internalList.remove(plannedDate)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throw new PlannedRecipeNotFoundException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Returns true if the list contains the same recipes at the planned date from {@code otherPlannedDate}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public boolean hasPlannedDate(PlannedDate otherPlannedDate) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (internalList.contains(otherPlannedDate)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        for (PlannedDate plannedDate : internalList) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            if (plannedDate.hasSameRecipeInPlan(otherPlannedDate)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Returns an optional planned date with the same date as {@code otherPlannedDate}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Returns optional empty if no such planned date exists."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private Optional\u003cPlannedDate\u003e withSameDate(PlannedDate otherPlannedDate) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        List\u003cPlannedDate\u003e copyOfInternal \u003d new ArrayList\u003c\u003e(internalList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return copyOfInternal.stream().filter(plan -\u003e plan.hasSameDate(otherPlannedDate)).findFirst();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Returns true if {@code plannedDates} contains only unique planned dates."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private boolean plannedDatesAreUnique(List\u003cPlannedDate\u003e plannedDates) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        for (int i \u003d 0; i \u003c plannedDates.size() - 1; i++) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            if (!plannedDates.get(i).recipesAreUnique()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                return false; // checks if the recipes in each plannedDate is unique"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            for (int j \u003d i + 1; j \u003c plannedDates.size(); j++) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                if (plannedDates.get(i).equals(plannedDates.get(j))) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        int lastItem \u003d plannedDates.size() - 1;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (lastItem \u003e 0 \u0026\u0026 !plannedDates.get(plannedDates.size() - 1).recipesAreUnique()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return false; // checks if the recipes in the last plannedDate is unique"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Sorts the list then returns it as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public ObservableList\u003cPlannedDate\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        FXCollections.sort(internalList);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return unmodifiableObservableList;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                || (other instanceof UniquePlannedList // instanceof handles nulls"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniquePlannedList) other).internalList));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public String size() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return internalList.size() + \"\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "beatricetay": 141
    }
  },
  {
    "path": "src/main/java/seedu/recipe/model/recipe/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Represents a Recipe\u0027s name in the recipe book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            \"Names should only contain alphanumeric characters, spaces, or special characters from \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                    + \"this set {\u0026, %, (, ), -, /, \u0027, ,}. The name should also not be blank.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[\\\\sA-Za-z0-9\\\\()\u0026%/\u0027,-]+$+\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param name A valid recipe name."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.fullName \u003d removeExtraWhitespace(name);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return (!test.isBlank()) \u0026\u0026 test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Removes additional whitespaces between words (ie. words should only have one whitespace between them)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private String removeExtraWhitespace(String stringToProcess) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return stringToProcess.replaceAll(\"\\\\s{2,}\", \" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 8,
      "-": 49,
      "beatricetay": 6
    }
  },
  {
    "path": "src/main/java/seedu/recipe/model/recipe/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Tests that a {@code Recipe}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cRecipe\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final String keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final boolean isStrict;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public NameContainsKeywordsPredicate(boolean isStrict, String keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.isStrict \u003d isStrict;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public boolean test(Recipe recipe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (isStrict) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            String[] nameKeywords \u003d keywords.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return Arrays.stream(nameKeywords)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(recipe.getName().fullName, keyword));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return recipe.getName().fullName.toLowerCase().contains(keywords);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                \u0026\u0026 isStrict \u003d\u003d ((NameContainsKeywordsPredicate) other).isStrict"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 12,
      "tharshita": 4,
      "-": 21,
      "beatricetay": 2
    }
  },
  {
    "path": "src/main/java/seedu/recipe/model/recipe/Recipe.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.goal.Goal;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Fruit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Grain;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Other;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Protein;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Vegetable;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Represents a Recipe in the recipe book."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class Recipe {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private final Time time;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final List\u003cStep\u003e steps \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private final Set\u003cGoal\u003e goals \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private final Set\u003cGrain\u003e grains \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private final Set\u003cVegetable\u003e vegetables \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private final Set\u003cProtein\u003e proteins \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private final Set\u003cFruit\u003e fruits \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private final Set\u003cOther\u003e others \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private boolean isFavourite;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public Recipe(Name name, Time time,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                  Set\u003cGrain\u003e grains, Set\u003cVegetable\u003e vegetables,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                  Set\u003cProtein\u003e proteins, Set\u003cFruit\u003e fruits, Set\u003cOther\u003e others,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                  List\u003cStep\u003e steps, Set\u003cGoal\u003e goals, boolean isFavourite) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireAllNonNull(name, time, steps, goals);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.steps.addAll(steps);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.goals.addAll(goals);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.grains.addAll(grains);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.vegetables.addAll(vegetables);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.proteins.addAll(proteins);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.fruits.addAll(fruits);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.others.addAll(others);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.isFavourite \u003d isFavourite;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public boolean isFavourite() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return isFavourite;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public Time getTime() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public List\u003cStep\u003e getSteps() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return Collections.unmodifiableList(steps);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Returns an immutable ingredient set for the respective ingredient type,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public Set\u003cGrain\u003e getGrains() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return Collections.unmodifiableSet(grains);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Returns an immutable ingredient set for the respective ingredient type,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public Set\u003cVegetable\u003e getVegetables() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return Collections.unmodifiableSet(vegetables);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Returns an immutable ingredient set for the respective ingredient type,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public Set\u003cProtein\u003e getProteins() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return Collections.unmodifiableSet(proteins);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Returns an immutable ingredient set for the respective ingredient type,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public Set\u003cFruit\u003e getFruits() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return Collections.unmodifiableSet(fruits);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Returns an immutable ingredient set for the respective ingredient type,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public Set\u003cOther\u003e getOthers() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return Collections.unmodifiableSet(others);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Returns an immutable goal set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public Set\u003cGoal\u003e getGoals() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return Collections.unmodifiableSet(goals);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Returns the total number of ingredients that this recipe has."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public int getTotalNumberOfIngredients() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return grains.size() + vegetables.size() + proteins.size() + fruits.size() + others.size();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns true if both recipes of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * This defines a weaker notion of equality between two recipes."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public boolean isSameRecipe(Recipe otherRecipe) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (otherRecipe \u003d\u003d this) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return otherRecipe !\u003d null"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                \u0026\u0026 otherRecipe.getName().equals(getName())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                \u0026\u0026 (otherRecipe.getTime().equals(getTime()) || otherRecipe.getSteps().equals(getSteps()));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns true if both recipes have the same identity and data fields."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * This defines a stronger notion of equality between two recipes."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (!(other instanceof Recipe)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Recipe otherRecipe \u003d (Recipe) other;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        // debug purposes todo remove string debugging later"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        /*System.out.print(\"my: \" + grains + \", other: \" + otherRecipe.getGrains()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                + \"my: \" + vegetables + \", other: \" + otherRecipe.getVegetables()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                + \"my: \" + proteins + \", other: \" + otherRecipe.getProteins()"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                + \"my: \" + others + \", other: \" + otherRecipe.getOthers());*/"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return otherRecipe.getName().equals(getName())"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                \u0026\u0026 otherRecipe.getTime().equals(getTime())"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                \u0026\u0026 otherRecipe.getGrains().equals(getGrains())"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                \u0026\u0026 otherRecipe.getVegetables().equals(getVegetables())"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                \u0026\u0026 otherRecipe.getProteins().equals(getProteins())"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                \u0026\u0026 otherRecipe.getFruits().equals(getFruits())"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                \u0026\u0026 otherRecipe.getOthers().equals(getOthers())"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                \u0026\u0026 otherRecipe.getSteps().equals(getSteps())"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                \u0026\u0026 otherRecipe.getGoals().equals(getGoals());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return Objects.hash(name, time, grains, vegetables, proteins, fruits, others, steps, goals);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .append(\"\\nTime: \")"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                .append(getTime())"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .append(\" mins\")"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .append(\"\\nIngredients: \");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        getGrains().forEach(grain -\u003e builder.append(grain).append(\", \"));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        getVegetables().forEach(vegetable -\u003e builder.append(vegetable).append(\", \"));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        getProteins().forEach(protein -\u003e builder.append(protein).append(\", \"));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        getFruits().forEach(fruit -\u003e builder.append(fruit).append(\", \"));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        getOthers().forEach(other -\u003e builder.append(other).append(\", \"));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        builder.delete(builder.length() - 2, builder.length());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        builder.append(\"\\nSteps: \")"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .append(getSteps())"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .append(\"\\nGoals: \");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        getGoals().forEach(builder::append);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 36,
      "tharshita": 22,
      "-": 69,
      "beatricetay": 81
    }
  },
  {
    "path": "src/main/java/seedu/recipe/model/recipe/RecipeMatchesKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.goal.Goal;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Fruit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Grain;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Ingredient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Other;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Protein;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Vegetable;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Tests that a {@code Recipe}\u0027s {@code Time}, {@code Ingredient}, or {@code Goal} matches any of the arguments given."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class RecipeMatchesKeywordsPredicate implements Predicate\u003cRecipe\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final List\u003cTime\u003e time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final Set\u003cGoal\u003e goals;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final boolean favourites;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final Set\u003cGrain\u003e grains;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final Set\u003cVegetable\u003e vegetables;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final Set\u003cProtein\u003e proteins;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final Set\u003cFruit\u003e fruits;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final Set\u003cOther\u003e others;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public RecipeMatchesKeywordsPredicate(List\u003cTime\u003e time, Set\u003cGoal\u003e goals, boolean favourites, Set\u003cGrain\u003e grains,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                          Set\u003cVegetable\u003e vegetables, Set\u003cProtein\u003e proteins, Set\u003cFruit\u003e fruits,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                          Set\u003cOther\u003e others) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.goals \u003d goals;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.favourites \u003d favourites;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.grains \u003d grains;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.vegetables \u003d vegetables;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.proteins \u003d proteins;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.fruits \u003d fruits;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.others \u003d others;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public boolean test(Recipe recipe) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return timeTest(recipe) \u0026\u0026 goalsTest(recipe) \u0026\u0026 favouritesTest(recipe) \u0026\u0026 grainsTest(recipe)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                \u0026\u0026 vegetablesTest(recipe) \u0026\u0026 proteinsTest(recipe) \u0026\u0026 fruitsTest(recipe) \u0026\u0026 othersTest(recipe);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Gets the user included ingredient names in the ingredients set as a {@code Stream\u003cString\u003e}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private Stream\u003cString\u003e getIncludedIngredientNameStream(Set\u003c? extends Ingredient\u003e ingredients) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return ingredients.stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .map(ingredient -\u003e ingredient.getIngredientName().toLowerCase())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .filter(ingredient -\u003e !ingredient.trim().split(\" \")[0].equals(\"exclude\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Gets the user excluded ingredient names in the ingredients set as a {@code Stream\u003cString\u003e}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private Stream\u003cString\u003e getExcludedIngredientNameStream(Set\u003c? extends Ingredient\u003e ingredients) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return ingredients.stream()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .map(ingredient -\u003e ingredient.getIngredientName().toLowerCase())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .filter(ingredient -\u003e ingredient.trim().split(\" \")[0].equals(\"exclude\"))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .map(ingredient -\u003e ingredient.substring(7).trim());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * If time predicate exists, tests if recipe\u0027s {@code Time} fulfills the time predicate and returns the outcome."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Otherwise, returns true to allow the recipe to pass through by default."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private boolean timeTest(Recipe recipe) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (time.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return time.get(0).isLessThan(recipe.getTime());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else if (time.size() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return recipe.getTime().isWithinRange(time.get(0), time.get(1));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * If goals predicate exists, tests if recipe\u0027s {@code Goal} fulfills the goals predicate and returns the outcome."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Otherwise, returns true to allow the recipe to pass through by default."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private boolean goalsTest(Recipe recipe) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (!goals.isEmpty()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return goals.stream().anyMatch(goal -\u003e recipe.getGoals().contains(goal));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * If favourites predicate exists, tests if recipe is a favourite and returns the outcome."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Otherwise, returns true to allow the recipe to pass through by default."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private boolean favouritesTest(Recipe recipe) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (favourites) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return recipe.isFavourite();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * If grains predicate exists, tests if recipe\u0027s {@code Grain} ingredients fulfill the grains predicate"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * and returns the outcome. Otherwise, returns true to allow the recipe to pass through by default."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private boolean grainsTest(Recipe recipe) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (!grains.isEmpty()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            boolean hasMatchCriteria \u003d true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            ArrayList\u003cString\u003e grainsInRecipe \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            recipe.getGrains().forEach(grain -\u003e grainsInRecipe.add(grain.getIngredientName().toLowerCase()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (getIncludedIngredientNameStream(grains).count() \u003e 0) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                hasMatchCriteria \u003d hasMatchCriteria"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        \u0026\u0026 getIncludedIngredientNameStream(grains)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        .anyMatch(grainsInRecipe::contains);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (getExcludedIngredientNameStream(grains).count() \u003e 0) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                hasMatchCriteria \u003d hasMatchCriteria"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        \u0026\u0026 getExcludedIngredientNameStream(grains)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        .anyMatch(grain -\u003e !grainsInRecipe.contains(grain));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return hasMatchCriteria;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * If vegetables predicate exists, tests if recipe\u0027s {@code Vegetable} ingredients fulfill the vegetables predicate"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * and returns the outcome. Otherwise, returns true to allow the recipe to pass through by default."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private boolean vegetablesTest(Recipe recipe) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (!vegetables.isEmpty()) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            boolean hasMatchCriteria \u003d true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            ArrayList\u003cString\u003e vegeInRecipe \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            recipe.getVegetables().forEach(vege -\u003e vegeInRecipe.add(vege.getIngredientName().toLowerCase()));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (getIncludedIngredientNameStream(vegetables).count() \u003e 0) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                hasMatchCriteria \u003d hasMatchCriteria"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        \u0026\u0026 getIncludedIngredientNameStream(vegetables)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        .anyMatch(vegeInRecipe::contains);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (getExcludedIngredientNameStream(vegetables).count() \u003e 0) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                hasMatchCriteria \u003d hasMatchCriteria"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        \u0026\u0026 getExcludedIngredientNameStream(vegetables)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        .anyMatch(vegetable -\u003e !vegeInRecipe.contains(vegetable));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return hasMatchCriteria;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * If proteins predicate exists, tests if recipe\u0027s {@code Protein} ingredients fulfill the proteins predicate"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * and returns the outcome. Otherwise, returns true to allow the recipe to pass through by default."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private boolean proteinsTest(Recipe recipe) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (!proteins.isEmpty()) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            boolean hasMatchCriteria \u003d true;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            ArrayList\u003cString\u003e proteinsInRecipe \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            recipe.getProteins().forEach(protein -\u003e proteinsInRecipe.add(protein.getIngredientName().toLowerCase()));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (getIncludedIngredientNameStream(proteins).count() \u003e 0) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                hasMatchCriteria \u003d hasMatchCriteria"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        \u0026\u0026 getIncludedIngredientNameStream(proteins)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        .anyMatch(proteinsInRecipe::contains);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (getExcludedIngredientNameStream(proteins).count() \u003e 0) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                hasMatchCriteria \u003d hasMatchCriteria"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        \u0026\u0026 getExcludedIngredientNameStream(proteins)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        .anyMatch(protein -\u003e !proteinsInRecipe.contains(protein));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return hasMatchCriteria;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * If fruits predicate exists, tests if recipe\u0027s {@code Fruit} ingredients fulfill the fruits predicate"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * and returns the outcome. Otherwise, returns true to allow the recipe to pass through by default."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private boolean fruitsTest(Recipe recipe) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (!fruits.isEmpty()) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            boolean hasMatchCriteria \u003d true;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            ArrayList\u003cString\u003e fruitsInRecipe \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            recipe.getFruits().forEach(fruit -\u003e fruitsInRecipe.add(fruit.getIngredientName().toLowerCase()));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (getIncludedIngredientNameStream(fruits).count() \u003e 0) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                hasMatchCriteria \u003d hasMatchCriteria"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        \u0026\u0026 getIncludedIngredientNameStream(fruits)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        .anyMatch(fruitsInRecipe::contains);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (getExcludedIngredientNameStream(fruits).count() \u003e 0) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                hasMatchCriteria \u003d hasMatchCriteria"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        \u0026\u0026 getExcludedIngredientNameStream(fruits)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        .anyMatch(fruit -\u003e !fruitsInRecipe.contains(fruit));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return hasMatchCriteria;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * If others predicate exists, tests if recipe\u0027s {@code Other} ingredients fulfill the others predicate"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * and returns the outcome. Otherwise, returns true to allow the recipe to pass through by default."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private boolean othersTest(Recipe recipe) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (!others.isEmpty()) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            boolean hasMatchCriteria \u003d true;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            ArrayList\u003cString\u003e othersInRecipe \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            recipe.getOthers().forEach(other -\u003e othersInRecipe.add(other.getIngredientName().toLowerCase()));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (getIncludedIngredientNameStream(others).count() \u003e 0) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                hasMatchCriteria \u003d hasMatchCriteria"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        \u0026\u0026 getIncludedIngredientNameStream(others)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        .anyMatch(othersInRecipe::contains);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (getExcludedIngredientNameStream(others).count() \u003e 0) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                hasMatchCriteria \u003d hasMatchCriteria"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        \u0026\u0026 getExcludedIngredientNameStream(others)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        .anyMatch(other -\u003e !othersInRecipe.contains(other));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return hasMatchCriteria;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                || (other instanceof RecipeMatchesKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                \u0026\u0026 time.equals(((RecipeMatchesKeywordsPredicate) other).time)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                \u0026\u0026 goals.equals(((RecipeMatchesKeywordsPredicate) other).goals)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                \u0026\u0026 favourites \u003d\u003d ((RecipeMatchesKeywordsPredicate) other).favourites"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                \u0026\u0026 grains.equals(((RecipeMatchesKeywordsPredicate) other).grains)"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                \u0026\u0026 vegetables.equals(((RecipeMatchesKeywordsPredicate) other).vegetables)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                \u0026\u0026 proteins.equals(((RecipeMatchesKeywordsPredicate) other).proteins)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                \u0026\u0026 fruits.equals(((RecipeMatchesKeywordsPredicate) other).fruits)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                \u0026\u0026 others.equals(((RecipeMatchesKeywordsPredicate) other).others)); // state check"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 242,
      "beatricetay": 8
    }
  },
  {
    "path": "src/main/java/seedu/recipe/model/recipe/Step.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Represents a Recipe\u0027s step in the recipe book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidStep(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class Step {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Step should not be empty or blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(.|\\\\s)*\\\\S(.|\\\\s)*\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Constructs an {@code Step}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @param step A valid step address."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public Step(String step) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireNonNull(step);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        checkArgument(isValidStep(step), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.value \u003d step;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns if a given string is a valid step."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static boolean isValidStep(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                || (other instanceof Step // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                \u0026\u0026 value.equals(((Step) other).value)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 2,
      "tharshita": 13,
      "-": 35,
      "beatricetay": 2
    }
  },
  {
    "path": "src/main/java/seedu/recipe/model/recipe/Time.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Represents a Recipe\u0027s time number in the recipe book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTime(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class Time {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            \"Time should only contain whole numbers in terms of minutes, and it should be at least 1 digit long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String TIME_RANGE_CONSTRANTS \u003d \"Time or time range should only contain whole numbers in terms \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"of minutes, be at least 1 digit long, and be separated by a single dash.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"Example: filter t/10 or filter t/10-20\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{1,}\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Constructs a {@code Time}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @param time A valid time number."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public Time(String time) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        checkArgument(isValidTime(time), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.value \u003d time;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns true if a given string is a valid time number."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static boolean isValidTime(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Returns true if the value of the given time object is less than or equal to the value of this time object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public boolean isLessThan(Time time) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return Integer.parseInt(time.value) \u003c\u003d Integer.parseInt(value);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Returns true if the value of this time object is within the range of the values of the given lower and upper"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * bound time objects."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public boolean isWithinRange(Time lowerBound, Time upperBound) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        int valueAsInt \u003d Integer.parseInt(value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return valueAsInt \u003e\u003d Integer.parseInt(lowerBound.value)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                \u0026\u0026 valueAsInt \u003c\u003d Integer.parseInt(upperBound.value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                || (other instanceof Time // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                \u0026\u0026 value.equals(((Time) other).value)); // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 23,
      "tharshita": 48,
      "beatricetay": 2
    }
  },
  {
    "path": "src/main/java/seedu/recipe/model/recipe/UniqueRecipeList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.exceptions.DuplicateRecipeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.exceptions.RecipeNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * A list of recipes that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * A recipe is considered unique by comparing using {@code Recipe#isSameRecipe(Recipe)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * recipes uses Recipe#isSameRecipe(Recipe) for equality so as to ensure that the recipe being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * unique in terms of identity in the UniqueRecipeList. However, the removal of a recipe uses Recipe#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * as to ensure that the recipe with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * @see Recipe#isSameRecipe(Recipe)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class UniqueRecipeList implements Iterable\u003cRecipe\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private final ObservableList\u003cRecipe\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private final ObservableList\u003cRecipe\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns true if the list contains an equivalent recipe as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public boolean contains(Recipe toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameRecipe);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Adds a recipe to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * The recipe must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void add(Recipe toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            throw new DuplicateRecipeException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Replaces the recipe {@code target} in the list with {@code editedRecipe}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * The recipe identity of {@code editedRecipe} must not be the same as another existing recipe in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void setRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireAllNonNull(target, editedRecipe);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            throw new RecipeNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (!target.isSameRecipe(editedRecipe) \u0026\u0026 contains(editedRecipe)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            throw new DuplicateRecipeException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        internalList.set(index, editedRecipe);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Removes the equivalent recipe from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * The recipe must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void remove(Recipe toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            throw new RecipeNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Favourites the equivalent recipe from the list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * The recipe must exist in the list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void favourite(Recipe toFavourite) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(toFavourite);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        int index \u003d internalList.indexOf(toFavourite);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new RecipeNotFoundException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (!toFavourite.isFavourite()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            internalList.set(index, new Recipe(toFavourite.getName(), toFavourite.getTime(), toFavourite.getGrains(),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    toFavourite.getVegetables(), toFavourite.getProteins(), toFavourite.getFruits(),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    toFavourite.getOthers(), toFavourite.getSteps(), toFavourite.getGoals(), true));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Unfavourites the equivalent recipe from the list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * The recipe must exist in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void unfavourite(Recipe toUnfavourite) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(toUnfavourite);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        int index \u003d internalList.indexOf((toUnfavourite));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new RecipeNotFoundException();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (toUnfavourite.isFavourite()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            internalList.set(index, new Recipe(toUnfavourite.getName(), toUnfavourite.getTime(),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    toUnfavourite.getGrains(), toUnfavourite.getVegetables(), toUnfavourite.getProteins(),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    toUnfavourite.getFruits(), toUnfavourite.getOthers(), toUnfavourite.getSteps(),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    toUnfavourite.getGoals(), false));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void setRecipes(UniqueRecipeList replacement) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Replaces the contents of this list with {@code recipes}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * {@code recipes} must not contain duplicate recipes."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void setRecipes(List\u003cRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireAllNonNull(recipes);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (!recipesAreUnique(recipes)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            throw new DuplicateRecipeException();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        internalList.setAll(recipes);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public ObservableList\u003cRecipe\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public Iterator\u003cRecipe\u003e iterator() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                || (other instanceof UniqueRecipeList // instanceof handles nulls"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueRecipeList) other).internalList));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns true if {@code recipes} contains only unique recipes."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private boolean recipesAreUnique(List\u003cRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        for (int i \u003d 0; i \u003c recipes.size() - 1; i++) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            for (int j \u003d i + 1; j \u003c recipes.size(); j++) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                if (recipes.get(i).isSameRecipe(recipes.get(j))) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 35,
      "tharshita": 133,
      "beatricetay": 4
    }
  },
  {
    "path": "src/main/java/seedu/recipe/model/recipe/exceptions/DuplicateRecipeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.model.recipe.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Signals that the operation will result in duplicate Recipes (Recipes are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class DuplicateRecipeException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public DuplicateRecipeException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        super(\"Operation would result in duplicate recipes\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 10,
      "beatricetay": 1
    }
  },
  {
    "path": "src/main/java/seedu/recipe/model/recipe/exceptions/RecipeNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.model.recipe.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Signals that the operation is unable to find the specified recipe."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class RecipeNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 5,
      "beatricetay": 1
    }
  },
  {
    "path": "src/main/java/seedu/recipe/model/recipe/ingredient/Fruit.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.model.recipe.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * Represents a Fruit Ingredient in the recipe book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "public class Fruit extends Ingredient {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public Fruit(String name, Quantity quantity) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        super(name, quantity);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Overloaded Fruit constructor for the purpose of filtering by fruit name."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public Fruit(String name) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 7,
      "beatricetay": 12
    }
  },
  {
    "path": "src/main/java/seedu/recipe/model/recipe/ingredient/Grain.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.model.recipe.ingredient;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * Represents a Grain Ingredient in the recipe book."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "public class Grain extends Ingredient {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private boolean isWholemeal;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public Grain(String name, Quantity quantity) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        super(name, quantity);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        isWholemeal \u003d false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Overloaded Grain constructor for the purpose of filtering by grain name."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public Grain(String name) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public boolean isWholemeal() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return isWholemeal;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public void setWholemeal(boolean wholemeal) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        isWholemeal \u003d wholemeal;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 7,
      "beatricetay": 23
    }
  },
  {
    "path": "src/main/java/seedu/recipe/model/recipe/ingredient/Ingredient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.model.recipe.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * Represents an Ingredient in the recipe book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "public abstract class Ingredient implements Comparable\u003cIngredient\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Ingredient names should contain \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + \"alphanumeric characters, spaces, or special characters from this set {\u0026, %, (, ), -, /, \u0027 , ,}.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String MESSAGE_MISSING_FIELD \u003d \"Ingredients require a quantity and name written in the format: \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + \"Tag/Quantity, Name\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + \"For example, to enter 50g of Broccoli, the format is iv/50g, Broccoli\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[\\\\sA-Za-z0-9\\\\()\u0026%/\u0027,-]+$+\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    protected String ingredientName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    protected Quantity quantity;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Constructs an {@code Ingredient}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param ingredientName A valid ingredient name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param quantity A valid quantity of the ingredient"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public Ingredient(String ingredientName, Quantity quantity) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        requireNonNull(quantity, ingredientName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        checkArgument(isValidIngredientName(ingredientName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.ingredientName \u003d caseFormatter(removeExtraWhitespace(ingredientName));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Overloaded Ingredient constructor for the purpose of filtering by ingredient name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public Ingredient(String ingredientName) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(ingredientName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        checkArgument(isValidIngredientName(ingredientName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.ingredientName \u003d caseFormatter(removeExtraWhitespace(ingredientName));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Returns true if a given string is a valid ingredient name."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static boolean isValidIngredientName(String test) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return (!test.isBlank()) \u0026\u0026 test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public Quantity getQuantity() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return quantity;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public String getIngredientName() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return ingredientName;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Formats the input string as a proper noun."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private String caseFormatter(String stringToProcess) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assert stringToProcess !\u003d null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return stringToProcess.substring(0, 1).toUpperCase() + stringToProcess.substring(1).toLowerCase();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Removes additional whitespaces between words (ie. words should only have one whitespace between them)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private String removeExtraWhitespace(String stringToProcess) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assert stringToProcess !\u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return stringToProcess.replaceAll(\"\\\\s{2,}\", \" \");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (quantity \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return ingredientName;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return quantity + \" \" + ingredientName;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                || (other instanceof Ingredient // instanceof handles nulls"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                \u0026\u0026 ingredientName.toLowerCase().equals(((Ingredient) other).getIngredientName().toLowerCase()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return ingredientName.toLowerCase().hashCode();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public int compareTo(Ingredient other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // ingredients are sorted alphabetically"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return ingredientName.toLowerCase().compareTo(other.ingredientName.toLowerCase());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 43,
      "beatricetay": 57
    }
  },
  {
    "path": "src/main/java/seedu/recipe/model/recipe/ingredient/Other.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.model.recipe.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * Represents Other Ingredients in the recipe book. These ingredients include spices, liquids and condiments."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "public class Other extends Ingredient {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public Other(String name, Quantity quantity) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        super(name, quantity);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Overloaded Other constructor for the purpose of filtering by this ingredient\u0027s name."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public Other(String name) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 7,
      "beatricetay": 12
    }
  },
  {
    "path": "src/main/java/seedu/recipe/model/recipe/ingredient/Protein.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.model.recipe.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * Represents a Protein Ingredient in the recipe book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "public class Protein extends Ingredient {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public Protein(String name, Quantity quantity) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        super(name, quantity);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Overloaded Protein constructor for the purpose of filtering by protein name."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public Protein(String name) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 7,
      "beatricetay": 12
    }
  },
  {
    "path": "src/main/java/seedu/recipe/model/recipe/ingredient/Quantity.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.model.recipe.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * Represents a Quantity in an Ingredient."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "public class Quantity {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"The available units of measurement are g, ml, tbsp, tsp and cup.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private double magnitude;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private Unit unit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public Quantity(double magnitude, Unit unit) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.magnitude \u003d magnitude;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.unit \u003d unit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public Quantity() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public Unit getUnit() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return unit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public double getMagnitude() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return magnitude;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return \"\" + magnitude + unit;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "beatricetay": 32
    }
  },
  {
    "path": "src/main/java/seedu/recipe/model/recipe/ingredient/Unit.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.model.recipe.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * Represents the standardized units that will be used in the recipe book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "public enum Unit {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    MILLILITER(\"ml\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    GRAM(\"g\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    TEASPOON(\"tsp\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    TABLESPOON(\"tbsp\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    CUP(\"cup\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private final String unit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    Unit(final String unit) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.unit \u003d unit;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return unit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "beatricetay": 24
    }
  },
  {
    "path": "src/main/java/seedu/recipe/model/recipe/ingredient/Vegetable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.model.recipe.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * Represents a Vegetable Ingredient in the recipe book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "public class Vegetable extends Ingredient {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public Vegetable(String name, Quantity quantity) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        super(name, quantity);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Overloaded Vegetable constructor for the purpose of filtering by vegetable name."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public Vegetable(String name) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 7,
      "beatricetay": 11
    }
  },
  {
    "path": "src/main/java/seedu/recipe/model/util/QuantityUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Quantity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Unit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * Contains utility methods used for parsing strings into a Quantity."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "public class QuantityUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Returns a list of Strings containing all the Units, in String, that HYBB supports."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static List\u003cString\u003e getAvailUnitsAsList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return Arrays.stream(Unit.values())"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .map(unit -\u003e unit.toString())"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Parses the unit String into a Unit, assuming ParseExceptions have been handled."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static Unit parseUnit(String unit) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        unit \u003d unit.toLowerCase();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        switch (unit) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        case \"ml\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return Unit.MILLILITER;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        case \"g\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return Unit.GRAM;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        case \"tbsp\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return Unit.TABLESPOON;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        case \"tsp\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return Unit.TEASPOON;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        case \"cup\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return Unit.CUP;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Parses the quantity String into a Quantity, assuming ParseExceptions have been handled."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static Quantity parseQuantity(String quantity) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (quantity.isBlank()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return new Quantity();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            quantity \u003d quantity.toLowerCase().trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            int indexOfUnit \u003d indexOfFirstAlphabet(quantity);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            double magnitude \u003d Double.parseDouble(quantity.substring(0, indexOfUnit));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            String unitString \u003d quantity.substring(indexOfUnit);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            Unit unit \u003d parseUnit(unitString);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return new Quantity(magnitude, unit);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Converts the Quantity into a double value of the quantity, converted into grams."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static double getQuantityInGram(Quantity quantity) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Unit unit \u003d quantity.getUnit();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        double magnitude \u003d quantity.getMagnitude();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        switch (unit) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        case GRAM:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return magnitude;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        case MILLILITER:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return magnitude;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        case TABLESPOON:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return magnitude * 15;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        case TEASPOON:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return magnitude * 5;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        case CUP:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return magnitude; // todo: throw exception"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            System.out.println(\"This unit is not supported.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Returns the index of the first alphabet detected in a String."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static int indexOfFirstAlphabet(String details) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        while (index \u003c details.length() \u0026\u0026 !Character.isLetter(details.charAt(index))) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "beatricetay": 100
    }
  },
  {
    "path": "src/main/java/seedu/recipe/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.ReadOnlyCookedRecordBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.RecipeBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.cooked.CookedRecordBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.cooked.Record;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.goal.Goal;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Step;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Time;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Fruit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Grain;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Other;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Protein;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Quantity;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Vegetable;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * Contains utility methods for populating {@code RecipeBook} with sample data. todo: populate with real recipes"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static Recipe[] getSampleRecipes() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return new Recipe[] {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            new Recipe(new Name(\"Vegan Thai Green Curry Soup\"), new Time(\"35\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getGrainSet(\"200g, rice vermicelli noodles\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getVegetableSet(\"100g,button mushrooms sliced\", \"1 cup, broccoli florets\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"10g, Thai red eye bird\u0027s chili\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                    getProteinSet(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                    getFruitSet(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getOtherSet(\" 1 tbsp,thai Green Curry Paste\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"0.25 Cup, coconut milk\", \"2 tsp, oil\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"1 tsp, Salt\" , \"1 tsp, soy sauce\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"0.5 tsp, brown sugar\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getStepsList(\"Heat oil in a saucepan. Add the vegetables (broccoli, mushroom) and saute till\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \" they turn soft. Transfer to a plate and set aside.\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"In the same saucepan, add the green curry paste. Saute the curry paste for a minute.\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"Add the coconut milk, brown sugar and soy sauce. \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \"Stir until the curry paste is nicely dissolved.\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"Now add the vegetable stock, salt, red chillies and stir to combine.\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"Bring the soup to a boil over high heat. Reduce the heat and allow the soup to \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \"simmer for 5 minutes.\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"Add the vermicelli noodles and the vegetables. Simmer till the noodles are cooked.\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"Turn off the heat and give soup a nice stir. Taste and adjust the seasoning and\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \" consistency accordingly. If too thick add more stock or coconut milk.\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"Just before serving garnish soup with fresh herbs, crushed peanuts and juice of lemon.\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"Serve Thai Green Curry Soup warm.\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getGoalSet(\"Herbivore\"), false),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            new Recipe(new Name(\"Barley Pilaf\"), new Time(\"50\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getGrainSet(\"0.5 cup, small pieces of broken spaghetti\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getVegetableSet(\"50g, small onion (chopped)\", \"2 tbsp, chives (chopped)\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getProteinSet(\"2.5 cups, low-sodium chicken broth\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                    getFruitSet(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getOtherSet(\"1 tbsp, unsalted butter\", \"1 cup, hulled barley\", \"10g, Salt \u0026 Pepper\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getStepsList(\"Melt butter in saucepan over medium heat. \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \"Add onion and cook until soft and light golden brown.\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"Add barley and stir until grains are coated in butter.\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"Add broth and 0.5 tsp salt, bring to a boil.\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"Reduce heat to medium low, cover, and simmer for 20mins.\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"Uncover and quickly stir in spaghetti. Cover and continue to simmer, \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \"stirring occasionally.\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"Once most liquid is absorbed and barley and spaghetti are tender, \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \"remove from hit and let sit.\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"Season to taste with salt and pepper and sprinkle with chopped chives.\"),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getGoalSet(\"Wholesome Wholemeal\"), false),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            new Recipe(new Name(\"Asian BBQ Chicken\"), new Time(\"30\"),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                    getGrainSet(),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getVegetableSet(\"1 tbsp, garlic \u0026 ginger (finely chopped)\"),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getProteinSet(\"100g, Chicken breast\"),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                    getFruitSet(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getOtherSet(\"2 tbsp, char siew sauce\", \"1 tbsp, rice vinegar\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"1 tsp, honey\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"0.5 tsp, sesame oil\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"1 tsp, Salt \u0026 pepper\"),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getStepsList(\"In a bowl, mix all the ingredients to create marinade. \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \"Mix the chicken with the marinade.\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"Pan sear the chicken from both sides.\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"Serve with rice.\"),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getGoalSet(\"Bulk like the Hulk\"), false),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            new Recipe(new Name(\"Sweet and Sour Chicken\"), new Time(\"20\"),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                    getGrainSet(),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getVegetableSet(\"10g, Garlic cloves\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"10g, knob ginger\", \"1 cup, carrots (diced)\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"1 cup, chinese cabbage (diced)\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"1 cup, bell peppers\", \"1 cup, onions (diced)\"),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getProteinSet(\"300g, chicken\"),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getFruitSet(\"1 cup, pineapple (diced)\", \"1 tbsp, tomato juice\"),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getOtherSet(\"1.5 tsp, corn flour\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"50g, egg\", \"1 tsp, light soya sauce\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"1 tbsp, vegetable oil\", \"10g, Coriander (optional)\"),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getStepsList(\"Pound garlic and ginger into a paste. Marinade chicken in the paste, \""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \"along with corn flour, soy sauce, and salt.\","
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"In a wok, take some oil, saute the carrots, cabbage, onions, and bell peppers. \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \"Add tomato juice and bring to a slight boil.\","
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"Fry the chicken and add to the wok along with some stock and set to simmer.\","
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"Garnish with coriander and serve with rice.\"),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getGoalSet(\"Bulk like the Hulk\"),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    false),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            new Recipe(new Name(\"Quick Carrot Daikon Stir-fry\"), new Time(\"25\"),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getGrainSet(),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getVegetableSet(\"30g, ginger (julienned)\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"30g, garlic (smashed and chopped)\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"50g, carrot (julienned)\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"20g, Daikon radish (peeled and julienned)\", \"20g, scallions\"),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getProteinSet(\"50g, Egg\"),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                    getFruitSet(),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getOtherSet(\"3 tbsp, vegetable oil\","
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"1 tbsp, shaoxing wine\","
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"1.5 tbsp, oyster sauce\","
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"0.25 tsp, white pepper\","
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"0.5 tsp, sesame oil\","
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"0.5 tsp, salt\","
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"0.25 cup, water\"),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getStepsList(\"Heat oil in wok over medium heat. Add ginger and garlic and cook for 20 seconds.\","
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"Add carrot and stir-fry for 30 seconds - oil should turn orange colour. Add in daikon,\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \" turn up heat to high and stir-fry for another 30 seconds.\","
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"Add shaoxing wine, oyster sauce, white pepper, sesame oil, salt, water, \""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \"and white parts of the scallions. Stir to combine, cover, \""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \"turn down heat to medium. Simmer for 5-8 minutes until tender.\","
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"Uncover, add in rest of the scallions and mix everything well. \""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \"When daikon is translucent and tender, the dish is done.\"),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getGoalSet(\"Herbivore\"), false),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            new Recipe(new Name(\"Chinese Tomato Egg Stir-fry\"), new Time(\"10\"),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                    getGrainSet(),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getVegetableSet(\"30 g, tomatoes\", \"10 g, scallion\"),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                    getProteinSet(\"50 g, Egg\"),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                    getFruitSet(),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getOtherSet(\"0.75 tsp, salt\", \"0.25 tsp, white pepper\","
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"0.5 tsp, sesame oil\", \"1 tsp, shaoxing wine\", \"3 tbsp, vegetable oil\","
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"2 tsp, sugar\", \"0.25 cup, water\"),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getStepsList(\"Cut tomatoes into small wedges and finely chop scallion\","
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"Crack eggs into bowl and season with ¼ tsp salt, white pepper\","
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"sesame oil, and shaoxing wine. Beat the eggs.\","
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"Preheat wok over medium heat until it starts to smoke.\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \" Add 2 tbsp of oil and immediately add eggs. Scramble the eggs and remove from \""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \"wok immediately. Set aside.\","
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"Add the remaining tbsp of oil to the wok, turn up heat to high, add tomatoes\""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \" and scallions. Stir-fry for 1min, then add sugar, ½ tsp salt, and water. \""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \"If water cooks off too quickly, add a little more water. Add the cooked eggs.\","
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"Mix everything together, cover the wok, cook for 1-2mins until the tomatoes are completely\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \" softened.\","
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"Uncover, continue to stir-fry over high heat until sauce thickens to your liking. Serve!\"),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getGoalSet(\"Herbivore\"), false),"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            new Recipe(new Name(\"5 Ingredient Spelt Spaghetti\"), new Time(\"25\"),"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getGrainSet(\"80g, Spelt Spaghetti\"),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getVegetableSet(\"2 cups, Arugula (Salad Rockets)\","
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"300g, Tomatoes\","
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"300g, Zucchini\","
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"50g, Leek\"),"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getProteinSet(\"50g, Egg\"),"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getFruitSet(),"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getOtherSet(\"2 tbsp, Xucker Ketchup\","
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"2 tbsp, Italian Herbs\","
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"1 tbsp, Fresh Basil\","
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"2 tbsp, Salt\","
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"1 tbsp, Pepper\","
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"0.5 tbsp, Olive Oil\"),"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getStepsList(\"Thinly slice Tomatoes and Leek and shred your Zucchini.\","
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"Heat up Oil in a large Pan on a medium-high Level and roast Leek until golden.\","
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"Now add Zucchini.\","
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"When the Zucchini´s roasted, stir in Tomatoes and turn down Heat to a lower Level.\","
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"Let cook for 5-7 Minutes until it turn into a Sauce.\","
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"Meanwhile, prepare Spaghetti according to the Directions stated on the Package.\","
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"Then, add Ketchup, Basil, Italian Herbs and Salt, Pepper as desired.\","
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"Finally, stir in Arugula and cooked Noodles and serve on a Plate with Poached Egg,\""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \" Parmesan and more fresh Basil.\"),"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getGoalSet(\"Wholesome Wholemeal\"), false),"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            new Recipe(new Name(\"Bacon, Spinach Caramelized Onion Pasta\"), new Time(\"25\"),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getGrainSet(\"170g, whole wheat penne pasta\"),"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getVegetableSet(\"10g, large yellow onion diced\", \"1 cup, spinach\"),"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getProteinSet(\"120g, chopped bacon\"),"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getFruitSet(),"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getOtherSet(\"2 tbsp, butter\","
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"1 tbsp, brown sugar\","
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"1 tbsp, salt\","
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"1 tbsp, pepper\","
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"1 tbsp, garlic powder\","
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"0.5 cup, Parmesan cheese sprinkles\"),"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getStepsList(\"In a large skillet, add your bacon and cook for 1-2 mins until bacon is halfway done\","
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"In that same pan, and some butter, sugar, spices, and onion; \""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \"sautee until the onion becomes tender, and bacon starts to crisp up.\","
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"Boil pasta in salted water until al dente\","
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"Once the pasta is done, drain it loosely, but leave a tiny amount of water and add it to \""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \"the skillet with the bacon, and onion mixture.\","
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"Mix in the spinach and stir until tender\","
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"Sprinkle with Parmesan before serving.\"),"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getGoalSet(\"Wholesome Wholemeal\"), false),"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            new Recipe(new Name(\"Healthy Chicken Salad Sandwich\"), new Time(\"10\"),"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getGrainSet(\"50 g, whole wheat pita (toasted)\"),"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getVegetableSet(\"120 g, celery (chopped small)\", \"55 g, butter lettuce (chopped)\"),"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getProteinSet(\"200 g, chicken breasts (large, cooked)\", \"350 g, greek yogurt (non-fat)\","
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"30 g, mixed nuts (chopped)\"),"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getFruitSet(),"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getOtherSet(\"3 tbsp, mayonnaise\","
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"1 tbsp, garlic salt\", \"1 tbsp, Dijon mustard (whole grain dijon)\"),"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getStepsList(\"Toast one pita.\","
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"Prep ingredients by cooking, and then shredding or chopping 1/2 large chicken breast, \""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \"chop 1-2 stalks celery to get 1/4 c chopped celery, \""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \"quarter a handful of grapes to get 1/4 cup quartered grapes, \""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \"prepare lettuce by washing/chopping it if needed.\""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \" Also prepare nuts by chopping them if needed, making 1 tbsp chopped nuts.\","
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"Make chicken salad by adding shredded/chopped chicken to a small mixing bowl, \""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \"then add 1/4 c Greek yogurt, 1/4 c mayo, 1/4 tsp garlic salt, \""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \"1 tsp Dijon mustard.\","
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"Mix together well. Once all incorporated, add in 1/4 c chopped celery, \""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \"1/4 c quartered red grapes, and 1 T chopped mixed nuts. Stir together.\","
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"Fill pita with chicken salad mixture and lettuce. Enjoy. \""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \"Store chicken salad in airtight container for up to 5 days\"),"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getGoalSet(\"Wholesome Wholemeal\"), false),"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            new Recipe(new Name(\"All Veggie Sandwich\"), new Time(\"10\"),"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getGrainSet(\"300 g, whole-wheat bread\"),"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getVegetableSet(\"1 cup, baby spinach leaves\", \"40 g, thinly sliced cucumber\","
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"20 g, red bell pepper(seeded and sliced))\", \"1 cup, fresh pea shoots or \""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \"your favorite fresh sprouts\", \"50 g, ripe avocados\"),"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getProteinSet(),"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getFruitSet(),"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getOtherSet(\"4 tbsp, plain hummus\", \"1 tbsp, cilantro leaves\","
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"2 tbsp, kosher salt and fresh black pepper\"),"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getStepsList(\"Spread 1 tablespoon of hummus on each slice of bread.\","
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"Then add the avocado pulp of 1/2 avocado per slice and lightly mash with a fork.\","
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"Depending on the size of your bread slices you may need to use little less avocado. \""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \"I used about 1 avocado per sandwich.\","
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"Layer on spinach leaves, cucumber slices, red pepper, pea shoots, and cilantro leaves. \""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \"Generously season with salt and pepper. \""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \"Top with other slice of bread and enjoy.\"),"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getGoalSet(\"Wholesome Wholemeal\", \"Herbivore\"), false),"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            new Recipe(new Name(\"Summer Asian Slaw\"), new Time(\"25\"),"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getGrainSet(),"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getVegetableSet(\"200g, shredded red and/or green cabbage\","
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"30g, red bell\","
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"20g, poblano\","
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"10g, scallions\","
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"15g, fresh basil (Thai basil, and/or mint)\","
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"15g, Thai chiles (dice)\","
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"10g, pepitas (with or without sesame seeds)\"),"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getProteinSet(\"20g, toasted peanuts\" , \"3 tbsp, cashew or peanut butter\"),"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getFruitSet(\"50g, ripe peach (thinly sliced)\", \"0.5 tbsp, lime juice\"),"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getOtherSet(\"15g, chopped cilantro (including stems)\", \"1 tbsp, Sea salt\","
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"0.5 tbsp, white miso paste\", \"0.25 tbsp, sesame oil\", \"1 tbsp, water\"),"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getStepsList(\"Make the dressing: In a small bowl, whisk together the cashew butter,\""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \" miso paste, lime juice, sesame oil, and ginger. \""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \"Whisk in enough water to create a drizzable consistency. Set aside.\","
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"In a dry cast-iron skillet over medium heat, char the peppers whole, \""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \"rotating until the edges have a little char, about 2 minutes per side. Remove.\""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \" When cool to the touch, slice in half lengthwise, remove the stem, ribbing, \""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \"and seeds and slice horizontally into thin strips.\","
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"In a large bowl, combine the cabbage, peppers, scallions, cilantro, basil, chiles, \""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \"and ¾ of the dressing. Toss until combined. Add the remaining dressing, \""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \"if desired, and season to taste with a few pinches of sea salt. \""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \"Serve topped with the toasted nuts, seeds, and sliced peaches.\"),"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getGoalSet(\"Herbivore\"), false),"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            new Recipe(new Name(\"Avocado Couscous Grapefruit salad with honey lime dressing\"), new Time(\"35\"),"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getGrainSet(\"0.75 cup, uncooked whole wheat couscous\", \"100g, white beans\"),"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                    getVegetableSet(),"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getProteinSet(\"0.75 cup, low sodium chicken stock\"),"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getFruitSet(\"300g, large avocados\","
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"200g, large ruby red grapefruit\","
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"3 tbsp, freshly squeezed lime juice (for dressing)\"),"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getOtherSet(\"0.5 cup, crumbled feta cheese\","
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"3 tbsp, chopped fresh mint\","
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"3 tbsp, finely chopped fresh cilantro\","
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"2 tbsp, honey\","
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"2 tbsp, extra virgin olive oil\","
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"0.25 tbsp, kosher salt\"),"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getStepsList(\"In a small saucepan, bring the stock to a boil. Remove from the heat, \""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \"stir in the couscous, then cover at let sit 5 minutes. \""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \"Fluff with fork and set aside.\","
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"In a small bowl or large measuring cup,whisk together the dressing ingredients:\""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \" lime juice, honey, olive oil, and salt, or shake all of the ingredients \""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \"together in a mason jar with a tight-fitting lid.\","
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"In a large bowl, combine beans and couscous. Pour dressing over top and stir to combine. \""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \"Add the avocados, grapefruit, feta, mint, and cilantro. Toss gently.\""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \" Serve chilled or at room temperature.\"),"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getGoalSet(\"Wholesome Wholemeal\"), false),"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            new Recipe(new Name(\"Teriyaki chicken noodle bowl\"), new Time(\"35\"),"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getGrainSet(),"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getVegetableSet(\"50 g, cloves garlic(minced)\", \"0.25 tbsp, freshly grated ginger\","
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"20g, green onion (thinly sliced)\"),"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getProteinSet(\"100 g, boneless and skinless chicken thighs(cut into 1-inch chunks)\"),"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                    getFruitSet(),"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getOtherSet(\"150 g, refrigerated Yaki-Soba, seasoning sauce packets discarded\","
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"4 tbsp, cornstarch\", \"4 tsp, reduced sodium soy sauce\", \"4 tsp, reduced sodium soy sauce\","
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"3 tsp, brown sugar(packed)\", \"0.5 tbsp, honey\", \"0.25 tbsp, olive oil\","
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"0.25 tbsp, sesame seeds\"),"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getStepsList(\"In a large pot of boiling water, add Yaki-Soba until loosened, \""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \"about 1-2 minutes; drain well.\","
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"In a small bowl, whisk together cornstarch and 1/4 cup water; set aside.\","
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"In a small saucepan over medium heat, add soy sauce, brown sugar, garlic, ginger, \""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \"honey and 1 cup water; bring to a simmer. \""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \"Stir in cornstarch mixture until thickened enough to coat the back of a spoon, \""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \"about 2 minutes; let cool to room temperature. Reserve 1/4 cup and set aside.\","
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"In a gallon size Ziploc bag or large bowl, combine soy sauce mixture and chicken; \""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \"marinate for at least 30 minutes to overnight, turning the bag occasionally. \""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \"Drain the chicken from the marinade.\","
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"Heat olive oil in a large skillet over medium heat. \""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \"Add chicken and cook until golden brown and cooked through, about 3-4 minutes;\""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \" set aside.\","
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"Stir in Yaki-Soba and 1/4 cup reserved soy sauce\""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \" mixture until well combined, about 2 minutes.\","
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"Serve immediately, garnished with sesame seeds and green onion, if desired.\"),"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getGoalSet(\"Bulk like the Hulk\"), false),"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            new Recipe(new Name(\"Overnight Oatmeal\"), new Time(\"10\"),"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getGrainSet(\"1 cup, steel cut oats\"),"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getVegetableSet(),"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getProteinSet(),"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getFruitSet(\"1 cup, dried cranberries\", \"1 cup, dried figs\"),"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getOtherSet(\" 4 cup, water\", \"0.5 cup, milk\"),"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getStepsList(\"In a slow cooker, combine all ingredients and set to low heat. \""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \"Cover and let cook for 8 to 9 hours.\","
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                            \"Stir and remove to serving bowls. \""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                                    + \"This method works best if started before you go to bed.\"),"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getGoalSet(\"Wholesome Wholemeal\"), false),"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static ReadOnlyRecipeBook getSampleRecipeBook() {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        RecipeBook sampleAb \u003d new RecipeBook();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        for (Recipe sampleRecipe : getSampleRecipes()) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            sampleAb.addRecipe(sampleRecipe);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns a goal set containing the list of strings given."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static Set\u003cGoal\u003e getGoalSet(String... goals) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return Arrays.stream(goals)"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                .map(Goal::new)"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Returns an grains set containing the list of strings given in the format (name, quantity)."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static Set\u003cGrain\u003e getGrainSet(String... grains) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Set\u003cGrain\u003e grainSet \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        for (String grain: grains) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            if (!grain.isBlank()) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                String[] splitDetails \u003d grain.split(\",\", 2);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                String name \u003d splitDetails[1].trim();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                Quantity quantity \u003d QuantityUtil.parseQuantity(splitDetails[0].trim());"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                grainSet.add(new Grain(name, quantity));"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return grainSet;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Returns an vegetables set containing the list of strings given in the format (name, quantity)."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static Set\u003cVegetable\u003e getVegetableSet(String... vegetables) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Set\u003cVegetable\u003e vegetableSet \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        for (String vegetable: vegetables) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            if (!vegetable.isBlank()) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                String[] splitDetails \u003d vegetable.split(\",\", 2);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                String name \u003d splitDetails[1].trim();"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                Quantity quantity \u003d QuantityUtil.parseQuantity(splitDetails[0].trim());"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                vegetableSet.add(new Vegetable(name, quantity));"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return vegetableSet;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Returns an proteins set containing the list of strings given in the format (name, quantity)."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static Set\u003cProtein\u003e getProteinSet(String... proteins) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Set\u003cProtein\u003e proteinSet \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        for (String protein: proteins) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            if (!protein.isBlank()) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                String[] splitDetails \u003d protein.split(\",\", 2);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                String name \u003d splitDetails[1].trim();"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                Quantity quantity \u003d QuantityUtil.parseQuantity(splitDetails[0].trim());"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                proteinSet.add(new Protein(name, quantity));"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return proteinSet;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Returns an fruits set containing the list of strings given in the format (name, quantity)."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static Set\u003cFruit\u003e getFruitSet(String... fruits) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Set\u003cFruit\u003e fruitSet \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        for (String fruit: fruits) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            if (!fruit.isBlank()) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                String[] splitDetails \u003d fruit.split(\",\", 2);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                String name \u003d splitDetails[1].trim();"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                Quantity quantity \u003d QuantityUtil.parseQuantity(splitDetails[0].trim());"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                fruitSet.add(new Fruit(name, quantity));"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return fruitSet;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Returns an others set containing the list of strings given in the format (name, quantity)."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static Set\u003cOther\u003e getOtherSet(String... others) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Set\u003cOther\u003e otherSet \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        for (String other: others) {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            if (!other.isBlank()) {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                String[] splitDetails \u003d other.split(\",\", 2);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                String name \u003d splitDetails[1].trim();"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                Quantity quantity \u003d QuantityUtil.parseQuantity(splitDetails[0].trim());"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                otherSet.add(new Other(name, quantity));"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return otherSet;"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Returns a steps list containing the list of steps given."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static List\u003cStep\u003e getStepsList(String ... steps) {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return Arrays.stream(steps)"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .map(Step::new)"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Returns an empty grain set, to be used to replace the default grain ingredient."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static Set\u003cGrain\u003e emptyGrainSet() {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return new TreeSet\u003cGrain\u003e();"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static Record[] getSampleRecords() {"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return new Record[] {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            new Record(new Name(\"Caesar Salad\"), new Date(), getGoalSet(\"Herbivores\")),"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            new Record(new Name(\"Grilled Sandwich\"), new Date(), getGoalSet(\"Wholesome Wholemeal\")),"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            new Record(new Name(\"Boiled Chicken\"), new Date(), getGoalSet(\"Bulk like the Hulk\")),"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            new Record(new Name(\"Chocolate Cake\"), new Date(), getGoalSet(\"Bulk like the Hulk\", \"Wholesome Wholemeal\")),"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            new Record(new Name(\"Omelet\"), new Date(), getGoalSet()),"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            new Record(new Name(\"Tuna Bread\"), new Date(), getGoalSet(\"Wholesome Wholemeal\"))"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        };"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static ReadOnlyCookedRecordBook getSampleRecordBook() {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        CookedRecordBook sampleAb \u003d new CookedRecordBook();"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        for (Record sampleRecord : getSampleRecords()) {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            sampleAb.addRecord(sampleRecord);"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 290,
      "tharshita": 29,
      "-": 23,
      "beatricetay": 123
    }
  },
  {
    "path": "src/main/java/seedu/recipe/storage/CookedRecordBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "package seedu.recipe.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.ReadOnlyCookedRecordBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.cooked.CookedRecordBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Represents a storage for {@link CookedRecordBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public interface CookedRecordBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    Path getCookedRecordBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns CookedRecordBook data as a {@link ReadOnlyCookedRecordBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    Optional\u003cReadOnlyCookedRecordBook\u003e readCookedRecordBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @see #getCookedRecordBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    Optional\u003cReadOnlyCookedRecordBook\u003e readCookedRecordBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Saves the given {@link ReadOnlyCookedRecordBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @param cookedRecordBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    void saveCookedRecordBook(ReadOnlyCookedRecordBook cookedRecordBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @see #saveCookedRecordBook(ReadOnlyCookedRecordBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    void saveCookedRecordBook(ReadOnlyCookedRecordBook cookedRecordBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 45
    }
  },
  {
    "path": "src/main/java/seedu/recipe/storage/JsonAdaptedDate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * Jackson-friendly version of {@link Date}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "public class JsonAdaptedDate {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Constructs a {@code JsonAdaptedDate} with the given {@code plannedDate}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public JsonAdaptedDate(String plannedDate) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        date \u003d plannedDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Converts a given {@code plannedDate} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public JsonAdaptedDate(Date plannedDate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        date \u003d plannedDate.toStringForJson();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Converts this Jackson-friendly adapted plannedDate object into the model\u0027s {@code Date} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * @return Date object that the adapted plannedDate was converted into."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted Date."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public Date toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (!Date.isValidDate(date)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return new Date(date);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "beatricetay": 48
    }
  },
  {
    "path": "src/main/java/seedu/recipe/storage/JsonAdaptedFruit.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Fruit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Quantity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.util.QuantityUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * Jackson-friendly version of {@link Fruit}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "public class JsonAdaptedFruit {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private final String fruitName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private final Quantity quantity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Constructs a {@code JsonAdaptedFruit} with the given {@code fruit}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public JsonAdaptedFruit(String fruit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String[] details \u003d fruit.split(\",\", 2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.fruitName \u003d details[1].trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.quantity \u003d QuantityUtil.parseQuantity(details[0].trim());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Converts a given {@code Fruit} into this class for Jackson use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public JsonAdaptedFruit(Fruit source) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        fruitName \u003d source.getIngredientName();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        quantity \u003d source.getQuantity();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public String getFruit() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return quantity + \",  \" + fruitName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Converts this Jackson-friendly adapted fruit object into the model\u0027s {@code Fruit} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * @return Fruit object that the adapted fruit was converted into."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted Fruit."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public Fruit toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (!Fruit.isValidIngredientName(fruitName)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throw new IllegalValueException(Fruit.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return new Fruit(fruitName, quantity);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "beatricetay": 55
    }
  },
  {
    "path": "src/main/java/seedu/recipe/storage/JsonAdaptedGoal.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.goal.Goal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Jackson-friendly version of {@link Goal}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "public class JsonAdaptedGoal {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private final String goalName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Constructs a {@code JsonAdaptedGoal} with the given {@code goalName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public JsonAdaptedGoal(String goalName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.goalName \u003d goalName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Converts a given {@code Goal} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public JsonAdaptedGoal(Goal source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        goalName \u003d source.goalName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public String getGoalName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return goalName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Converts this Jackson-friendly adapted goal object into the model\u0027s {@code Goal} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted goal."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public Goal toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (!Goal.isValidGoalName(goalName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            throw new IllegalValueException(Goal.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return new Goal(goalName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 16,
      "-": 28,
      "beatricetay": 4
    }
  },
  {
    "path": "src/main/java/seedu/recipe/storage/JsonAdaptedGrain.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Grain;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Quantity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.util.QuantityUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * Jackson-friendly version of {@link Grain}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "public class JsonAdaptedGrain {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private final String grainName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private final Quantity quantity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Constructs a {@code JsonAdaptedGrain} with the given {@code grainName},"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * {@code quantity}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public JsonAdaptedGrain(String grain) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String[] details \u003d grain.split(\",\", 2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.grainName \u003d details[1].trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.quantity \u003d QuantityUtil.parseQuantity(details[0].trim());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Converts a given {@code Grain} into this class for Jackson use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public JsonAdaptedGrain(Grain source) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        grainName \u003d source.getIngredientName();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        quantity \u003d source.getQuantity();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public String getGrain() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return quantity + \",  \" + grainName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Converts this Jackson-friendly adapted grain object into the model\u0027s {@code Grain} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * @return Grain object that the adapted grain was converted into."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted Grain."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public Grain toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (!Grain.isValidIngredientName(grainName)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throw new IllegalValueException(Grain.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return new Grain(grainName, quantity);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "beatricetay": 56
    }
  },
  {
    "path": "src/main/java/seedu/recipe/storage/JsonAdaptedOther.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Other;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Quantity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.util.QuantityUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * Jackson-friendly version of {@link Other}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "public class JsonAdaptedOther {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private final String otherName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private final Quantity quantity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Constructs a {@code JsonAdaptedOther} with the given {@code other}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public JsonAdaptedOther(String other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String[] details \u003d other.split(\",\", 2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.otherName \u003d details[1].trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.quantity \u003d QuantityUtil.parseQuantity(details[0].trim());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Converts a given {@code Other} into this class for Jackson use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public JsonAdaptedOther(Other source) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        otherName \u003d source.getIngredientName();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        quantity \u003d source.getQuantity();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public String getOther() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return quantity + \",  \" + otherName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Converts this Jackson-friendly adapted other object into the model\u0027s {@code Other} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * @return Other object that the adapted other was converted into."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted Other."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public Other toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (!Other.isValidIngredientName(otherName)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throw new IllegalValueException(Other.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return new Other(otherName, quantity);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "beatricetay": 54
    }
  },
  {
    "path": "src/main/java/seedu/recipe/storage/JsonAdaptedProtein.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Protein;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Quantity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.util.QuantityUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * Jackson-friendly version of {@link Protein}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "public class JsonAdaptedProtein {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private final String proteinName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private final Quantity quantity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Constructs a {@code JsonAdaptedProtein} with the given {@code protein}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public JsonAdaptedProtein(String protein) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String[] details \u003d protein.split(\",\", 2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.proteinName \u003d details[1].trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.quantity \u003d QuantityUtil.parseQuantity(details[0].trim());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Converts a given {@code Protein} into this class for Jackson use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public JsonAdaptedProtein(Protein source) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        proteinName \u003d source.getIngredientName();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        quantity \u003d source.getQuantity();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public String getProtein() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return quantity + \",  \" + proteinName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Converts this Jackson-friendly adapted protein object into the model\u0027s {@code Protein} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * @return Protein object that the adapted protein was converted into."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted Protein."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public Protein toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (!Protein.isValidIngredientName(proteinName)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throw new IllegalValueException(Protein.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return new Protein(proteinName, quantity);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "beatricetay": 55
    }
  },
  {
    "path": "src/main/java/seedu/recipe/storage/JsonAdaptedRecipe.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.goal.Goal;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Step;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Fruit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Grain;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Ingredient;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Other;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Protein;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Vegetable;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Jackson-friendly version of {@link Recipe}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "public class JsonAdaptedRecipe {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Recipe\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final boolean isFavourite;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final List\u003cJsonAdaptedStep\u003e steps \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private final List\u003cJsonAdaptedGoal\u003e goals \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private final List\u003cJsonAdaptedGrain\u003e grains \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private final List\u003cJsonAdaptedVegetable\u003e vegetables \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private final List\u003cJsonAdaptedProtein\u003e proteins \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private final List\u003cJsonAdaptedFruit\u003e fruits \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private final List\u003cJsonAdaptedOther\u003e others \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Constructs a {@code JsonAdaptedRecipe} with the given recipe details."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public JsonAdaptedRecipe(@JsonProperty(\"name\") String name, @JsonProperty(\"time\") String time,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            @JsonProperty(\"isFavourite\") boolean isFavourite,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            @JsonProperty(\"grains\") List\u003cJsonAdaptedGrain\u003e grains,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            @JsonProperty(\"vegetables\") List\u003cJsonAdaptedVegetable\u003e vegetables,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            @JsonProperty(\"proteins\") List\u003cJsonAdaptedProtein\u003e proteins,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            @JsonProperty(\"fruits\") List\u003cJsonAdaptedFruit\u003e fruits,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            @JsonProperty(\"others\") List\u003cJsonAdaptedOther\u003e others,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            @JsonProperty(\"steps\") List\u003cJsonAdaptedStep\u003e steps,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            @JsonProperty(\"goals\") List\u003cJsonAdaptedGoal\u003e goals) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.isFavourite \u003d isFavourite;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (grains !\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            this.grains.addAll(grains);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (vegetables !\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            this.vegetables.addAll(vegetables);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (proteins !\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            this.proteins.addAll(proteins);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (fruits !\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            this.fruits.addAll(fruits);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (others !\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            this.others.addAll(others);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (steps !\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            this.steps.addAll(steps);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (goals !\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            this.goals.addAll(goals);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Converts a given {@code Recipe} into this class for Jackson use."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public JsonAdaptedRecipe(Recipe source) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        time \u003d source.getTime().value;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        grains.addAll(source.getGrains().stream()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .map(JsonAdaptedGrain::new)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        vegetables.addAll(source.getVegetables().stream()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .map(JsonAdaptedVegetable::new)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        proteins.addAll(source.getProteins().stream()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .map(JsonAdaptedProtein::new)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        fruits.addAll(source.getFruits().stream()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .map(JsonAdaptedFruit::new)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        others.addAll(source.getOthers().stream()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .map(JsonAdaptedOther::new)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        isFavourite \u003d source.isFavourite();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        steps.addAll(source.getSteps().stream()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .map(JsonAdaptedStep::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        goals.addAll(source.getGoals().stream()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                .map(JsonAdaptedGoal::new)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Converts this Jackson-friendly adapted recipe object into the model\u0027s {@code Recipe} object."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted recipe."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public Recipe toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        final List\u003cGoal\u003e recipeGoals \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        for (JsonAdaptedGoal goal : goals) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            recipeGoals.add(goal.toModelType());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        boolean isOneIngredientPresent \u003d false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        final List\u003cGrain\u003e recipeGrains \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        for (JsonAdaptedGrain grain : grains) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            recipeGrains.add(grain.toModelType());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            isOneIngredientPresent \u003d true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        final List\u003cVegetable\u003e recipeVegetables \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        for (JsonAdaptedVegetable vegetable : vegetables) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            recipeVegetables.add(vegetable.toModelType());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            isOneIngredientPresent \u003d true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        final List\u003cProtein\u003e recipeProteins \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        for (JsonAdaptedProtein protein : proteins) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            recipeProteins.add(protein.toModelType());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            isOneIngredientPresent \u003d true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        final List\u003cFruit\u003e recipeFruits \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        for (JsonAdaptedFruit fruit : fruits) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            recipeFruits.add(fruit.toModelType());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            isOneIngredientPresent \u003d true;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        final List\u003cOther\u003e recipeOthers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        for (JsonAdaptedOther other : others) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            recipeOthers.add(other.toModelType());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            isOneIngredientPresent \u003d true;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (!isOneIngredientPresent) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                    Ingredient.class.getSimpleName()));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        final List\u003cStep\u003e recipeSteps \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        for (JsonAdaptedStep step : steps) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            recipeSteps.add(step.toModelType());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (time \u003d\u003d null) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Time.class.getSimpleName()));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (!Time.isValidTime(time)) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            throw new IllegalValueException(Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        final Time modelTime \u003d new Time(time);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        final Set\u003cGoal\u003e modelGoals \u003d new HashSet\u003c\u003e(recipeGoals);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        final Set\u003cGrain\u003e modelGrains \u003d new TreeSet\u003c\u003e(recipeGrains);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        final Set\u003cVegetable\u003e modelVegetables \u003d new TreeSet\u003c\u003e(recipeVegetables);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        final Set\u003cProtein\u003e modelProteins \u003d new TreeSet\u003c\u003e(recipeProteins);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        final Set\u003cFruit\u003e modelFruits \u003d new TreeSet\u003c\u003e(recipeFruits);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        final Set\u003cOther\u003e modelOthers \u003d new TreeSet\u003c\u003e(recipeOthers);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        final ArrayList\u003cStep\u003e modelSteps \u003d new ArrayList\u003c\u003e(recipeSteps);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return new Recipe(modelName, modelTime,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                modelGrains, modelVegetables, modelProteins, modelFruits, modelOthers,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                modelSteps, modelGoals, isFavourite);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 16,
      "tharshita": 27,
      "-": 49,
      "beatricetay": 101
    }
  },
  {
    "path": "src/main/java/seedu/recipe/storage/JsonAdaptedRecord.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "package seedu.recipe.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.cooked.Record;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.goal.Goal;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.recipe.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Jackson-friendly version of {@link Record}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": "class JsonAdaptedRecord {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Record\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private final List\u003cJsonAdaptedGoal\u003e goals \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Constructs a {@code JsonAdaptedRecord} with the given recipe details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public JsonAdaptedRecord(@JsonProperty(\"name\") String name, @JsonProperty(\"date\") String date,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                             @JsonProperty(\"goals\") List\u003cJsonAdaptedGoal\u003e goals) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (goals !\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            this.goals.addAll(goals);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Converts a given {@code Record} into this class for Jackson use."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public JsonAdaptedRecord(Record source) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        date \u003d source.getDate().toStringForJson();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        goals.addAll(source.getGoals().stream()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                .map(JsonAdaptedGoal::new)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Converts this Jackson-friendly adapted record object into the model\u0027s {@code Record} object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted recipe."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public Record toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        final Date modelDate \u003d new Date(date);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        final List\u003cGoal\u003e recordGoals \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        for (JsonAdaptedGoal goal : goals) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            recordGoals.add(goal.toModelType());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        final Set\u003cGoal\u003e modelGoals \u003d new HashSet\u003c\u003e(recordGoals);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return new Record(modelName, modelDate, modelGoals);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 77
    }
  },
  {
    "path": "src/main/java/seedu/recipe/storage/JsonAdaptedStep.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Step;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Jackson-friendly version of {@link Step}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class JsonAdaptedStep {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final String step;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Constructs a {@code JsonAdaptedStep} with the given {@code step}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public JsonAdaptedStep(String step) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.step \u003d step;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Converts a given {@code Step} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public JsonAdaptedStep(Step source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        step \u003d source.toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public String getStep() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return step;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Converts this Jackson-friendly adapted step object into the model\u0027s {@code Step} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted step."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public Step toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (!Step.isValidStep(step)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new IllegalValueException(Step.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return new Step(step);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 44,
      "beatricetay": 4
    }
  },
  {
    "path": "src/main/java/seedu/recipe/storage/JsonAdaptedVegetable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Quantity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Vegetable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.util.QuantityUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * Jackson-friendly version of {@link Vegetable}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "public class JsonAdaptedVegetable {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private final String vegetableName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private final Quantity quantity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Constructs a {@code JsonAdaptedVegetable} with the given {@code vegetable}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public JsonAdaptedVegetable(String vegetable) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String[] details \u003d vegetable.split(\",\", 2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.vegetableName \u003d details[1].trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.quantity \u003d QuantityUtil.parseQuantity(details[0].trim());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Converts a given {@code Vegetable} into this class for Jackson use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public JsonAdaptedVegetable(Vegetable source) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        vegetableName \u003d source.getIngredientName();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        quantity \u003d source.getQuantity();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public String getVegetable() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return quantity + \",  \" + vegetableName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Converts this Jackson-friendly adapted vegetable object into the model\u0027s {@code Vegetable} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * @return Vegetable object that the adapted vegetable was converted into."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted Vegetable."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public Vegetable toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (!Vegetable.isValidIngredientName(vegetableName)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throw new IllegalValueException(Vegetable.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return new Vegetable(vegetableName, quantity);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "beatricetay": 55
    }
  },
  {
    "path": "src/main/java/seedu/recipe/storage/JsonCookedRecordBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "package seedu.recipe.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.ReadOnlyCookedRecordBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * A class to access RecipeBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class JsonCookedRecordBookStorage implements CookedRecordBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonRecipeBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public JsonCookedRecordBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public Path getCookedRecordBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public Optional\u003cReadOnlyCookedRecordBook\u003e readCookedRecordBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return readCookedRecordBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Similar to {@link #readCookedRecordBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public Optional\u003cReadOnlyCookedRecordBook\u003e readCookedRecordBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Optional\u003cJsonSerializableCookedRecordBook\u003e jsonCookedRecordBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                filePath, JsonSerializableCookedRecordBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (!jsonCookedRecordBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            return Optional.of(jsonCookedRecordBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void saveCookedRecordBook(ReadOnlyCookedRecordBook cookedRecordBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        saveCookedRecordBook(cookedRecordBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Similar to {@link #saveCookedRecordBook(ReadOnlyCookedRecordBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void saveCookedRecordBook(ReadOnlyCookedRecordBook cookedRecordBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireNonNull(cookedRecordBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableCookedRecordBook(cookedRecordBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 79
    }
  },
  {
    "path": "src/main/java/seedu/recipe/storage/JsonRecipeBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * A class to access RecipeBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class JsonRecipeBookStorage implements RecipeBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonRecipeBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public JsonRecipeBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public Path getRecipeBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public Optional\u003cReadOnlyRecipeBook\u003e readRecipeBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return readRecipeBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Similar to {@link #readRecipeBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public Optional\u003cReadOnlyRecipeBook\u003e readRecipeBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Optional\u003cJsonSerializableRecipeBook\u003e jsonRecipeBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                filePath, JsonSerializableRecipeBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (!jsonRecipeBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return Optional.of(jsonRecipeBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void saveRecipeBook(ReadOnlyRecipeBook recipeBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        saveRecipeBook(recipeBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Similar to {@link #saveRecipeBook(ReadOnlyRecipeBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void saveRecipeBook(ReadOnlyRecipeBook recipeBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(recipeBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableRecipeBook(recipeBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 19,
      "-": 54,
      "beatricetay": 7
    }
  },
  {
    "path": "src/main/java/seedu/recipe/storage/JsonSerializableCookedRecordBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "package seedu.recipe.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.ReadOnlyCookedRecordBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.cooked.CookedRecordBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.cooked.Record;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * An Immutable CookedRecordBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "@JsonRootName(value \u003d \"cookedrecord\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "class JsonSerializableCookedRecordBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final String MESSAGE_COOKED_RECIPE \u003d \"Recipe has already been cooked.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private final List\u003cJsonAdaptedRecord\u003e records \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Constructs a {@code JsonSerializableCookedRecordBook} with the given records."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public JsonSerializableCookedRecordBook(@JsonProperty(\"records\") List\u003cJsonAdaptedRecord\u003e records) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.records.addAll(records);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Converts a given {@code ReadOnlyCookedRecordBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableCookedRecordBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public JsonSerializableCookedRecordBook(ReadOnlyCookedRecordBook source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        records.addAll(source.getRecordsList().stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                .map(JsonAdaptedRecord::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Converts this record book into the model\u0027s {@code CookedRecordBook} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public CookedRecordBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        CookedRecordBook cookedRecord \u003d new CookedRecordBook();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        for (JsonAdaptedRecord jsonAdaptedRecord : records) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            Record record \u003d jsonAdaptedRecord.toModelType();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            if (cookedRecord.hasRecord(record)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                throw new IllegalValueException(MESSAGE_COOKED_RECIPE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            cookedRecord.addRecord(record);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return cookedRecord;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tharshita": 64
    }
  },
  {
    "path": "src/main/java/seedu/recipe/storage/JsonSerializableRecipeBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.RecipeBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * An Immutable RecipeBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "@JsonRootName(value \u003d \"recipebook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "public class JsonSerializableRecipeBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RECIPE \u003d \"Recipes list contains duplicate recipe(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private final List\u003cJsonAdaptedRecipe\u003e recipes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Constructs a {@code JsonSerializableRecipeBook} with the given recipes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public JsonSerializableRecipeBook(@JsonProperty(\"recipes\") List\u003cJsonAdaptedRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.recipes.addAll(recipes);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Converts a given {@code ReadOnlyRecipeBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableRecipeBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public JsonSerializableRecipeBook(ReadOnlyRecipeBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        recipes.addAll(source.getRecipeList().stream().map(JsonAdaptedRecipe::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Converts this recipe book into the model\u0027s {@code RecipeBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public RecipeBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        RecipeBook recipeBook \u003d new RecipeBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        for (JsonAdaptedRecipe jsonAdaptedRecipe : recipes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            Recipe recipe \u003d jsonAdaptedRecipe.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (recipeBook.hasRecipe(recipe)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_RECIPE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            recipeBook.addRecipe(recipe);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return recipeBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 13,
      "tharshita": 7,
      "-": 34,
      "beatricetay": 6
    }
  },
  {
    "path": "src/main/java/seedu/recipe/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 42,
      "beatricetay": 5
    }
  },
  {
    "path": "src/main/java/seedu/recipe/storage/RecipeBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * Represents a storage for {@link seedu.recipe.model.RecipeBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public interface RecipeBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    Path getRecipeBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Returns RecipeBook data as a {@link ReadOnlyRecipeBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    Optional\u003cReadOnlyRecipeBook\u003e readRecipeBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @see #getRecipeBookFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    Optional\u003cReadOnlyRecipeBook\u003e readRecipeBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Saves the given {@link ReadOnlyRecipeBook} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param recipeBook cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    void saveRecipeBook(ReadOnlyRecipeBook recipeBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @see #saveRecipeBook(ReadOnlyRecipeBook)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    void saveRecipeBook(ReadOnlyRecipeBook recipeBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 41,
      "beatricetay": 4
    }
  },
  {
    "path": "src/main/java/seedu/recipe/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.ReadOnlyCookedRecordBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.ReadOnlyPlannedBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.storage.plan.PlannedBookStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public interface Storage extends RecipeBookStorage, CookedRecordBookStorage, PlannedBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    Path getRecipeBookFilePath();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    Optional\u003cReadOnlyRecipeBook\u003e readRecipeBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    void saveRecipeBook(ReadOnlyRecipeBook recipeBook) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d CookedRecords feature \u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    Path getCookedRecordBookFilePath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    Optional\u003cReadOnlyCookedRecordBook\u003e readCookedRecordBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    void saveCookedRecordBook(ReadOnlyCookedRecordBook cookedRecordBook) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d Planning feature \u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    Path getPlannedBookFilePath();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    Optional\u003cReadOnlyPlannedBook\u003e readPlannedBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    void savePlannedBook(ReadOnlyPlannedBook plannedBook) throws IOException;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 3,
      "tharshita": 13,
      "-": 23,
      "beatricetay": 16
    }
  },
  {
    "path": "src/main/java/seedu/recipe/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.ReadOnlyCookedRecordBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.ReadOnlyPlannedBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.storage.plan.PlannedBookStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Manages storage of RecipeBook data in local storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private RecipeBookStorage recipeBookStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private CookedRecordBookStorage cookedRecordStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private PlannedBookStorage plannedBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public StorageManager(RecipeBookStorage recipeBookStorage, CookedRecordBookStorage cookedRecordStorage,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                          PlannedBookStorage plannedBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.recipeBookStorage \u003d recipeBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.cookedRecordStorage \u003d cookedRecordStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.plannedBookStorage \u003d plannedBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d RecipeBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public Path getRecipeBookFilePath() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return recipeBookStorage.getRecipeBookFilePath();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public Optional\u003cReadOnlyRecipeBook\u003e readRecipeBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return readRecipeBook(recipeBookStorage.getRecipeBookFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public Optional\u003cReadOnlyRecipeBook\u003e readRecipeBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        logger.fine(\"Attempting to read recipe book data from file: \" + filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return recipeBookStorage.readRecipeBook(filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void saveRecipeBook(ReadOnlyRecipeBook recipeBook) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        saveRecipeBook(recipeBook, recipeBookStorage.getRecipeBookFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void saveRecipeBook(ReadOnlyRecipeBook recipeBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        logger.fine(\"Attempting to write to recipe book data file: \" + filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        recipeBookStorage.saveRecipeBook(recipeBook, filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CookedRecordBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public Path getCookedRecordBookFilePath() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return cookedRecordStorage.getCookedRecordBookFilePath();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public Optional\u003cReadOnlyCookedRecordBook\u003e readCookedRecordBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return readCookedRecordBook(cookedRecordStorage.getCookedRecordBookFilePath());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public Optional\u003cReadOnlyCookedRecordBook\u003e readCookedRecordBook(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return cookedRecordStorage.readCookedRecordBook(filePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void saveCookedRecordBook(ReadOnlyCookedRecordBook cookedRecordBook) throws IOException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        saveCookedRecordBook(cookedRecordBook, cookedRecordStorage.getCookedRecordBookFilePath());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void saveCookedRecordBook(ReadOnlyCookedRecordBook cookedRecordBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        cookedRecordStorage.saveCookedRecordBook(cookedRecordBook, filePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PlannedBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public Path getPlannedBookFilePath() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return plannedBookStorage.getPlannedBookFilePath();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public Optional\u003cReadOnlyPlannedBook\u003e readPlannedBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return readPlannedBook(plannedBookStorage.getPlannedBookFilePath());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public Optional\u003cReadOnlyPlannedBook\u003e readPlannedBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        logger.fine(\"Attempting to read planned book data from file: \" + filePath);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return plannedBookStorage.readPlannedBook(filePath);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public void savePlannedBook(ReadOnlyPlannedBook plannedBook) throws IOException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        savePlannedBook(plannedBook, plannedBookStorage.getPlannedBookFilePath());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public void savePlannedBook(ReadOnlyPlannedBook plannedBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        logger.fine(\"Attempting to write to planned book data file: \" + filePath);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        plannedBookStorage.savePlannedBook(plannedBook, filePath);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 14,
      "tharshita": 36,
      "-": 53,
      "beatricetay": 41
    }
  },
  {
    "path": "src/main/java/seedu/recipe/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * Represents a storage for {@link seedu.recipe.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Saves the given {@link seedu.recipe.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "beatricetay": 6
    }
  },
  {
    "path": "src/main/java/seedu/recipe/storage/plan/JsonAdaptedPlannedDate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.storage.plan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.plan.PlannedDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.storage.JsonAdaptedDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.storage.JsonAdaptedRecipe;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * Jackson-friendly version of {@link PlannedDate}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "public class JsonAdaptedPlannedDate {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Planned recipe\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private final List\u003cJsonAdaptedRecipe\u003e recipes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private final JsonAdaptedDate date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Constructs a {@code JsonAdaptedPlannedDate} with the given {@code PlannedDate}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public JsonAdaptedPlannedDate(@JsonProperty(\"recipes\") List\u003cJsonAdaptedRecipe\u003e recipes,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                                  @JsonProperty(\"date\") JsonAdaptedDate date) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (recipes !\u003d null) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            this.recipes.addAll(recipes);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Converts a given {@code plannedDate} into this class for Jackson use."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public JsonAdaptedPlannedDate(PlannedDate plannedDate) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        recipes.addAll(plannedDate.getRecipes()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .map(JsonAdaptedRecipe::new)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        date \u003d new JsonAdaptedDate(plannedDate.getDate().toStringForJson());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Converts this Jackson-friendly adapted PlannedDate object into the model\u0027s {@code PlannedDate} object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * @return PlannedDate object that the adapted PlannedDate was converted into."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted PlannedDate."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public PlannedDate toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        final List\u003cRecipe\u003e modelRecipe \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        for (JsonAdaptedRecipe recipe : recipes) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            modelRecipe.add(recipe.toModelType());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        final Date modelPlannedDate \u003d date.toModelType();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return new PlannedDate(modelRecipe, modelPlannedDate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 1,
      "beatricetay": 68
    }
  },
  {
    "path": "src/main/java/seedu/recipe/storage/plan/JsonPlannedBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.storage.plan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.ReadOnlyPlannedBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * A class to access PlannedBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "public class JsonPlannedBookStorage implements PlannedBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonPlannedBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public JsonPlannedBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public Path getPlannedBookFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public Optional\u003cReadOnlyPlannedBook\u003e readPlannedBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return readPlannedBook(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Similar to {@link #readPlannedBook()}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public Optional\u003cReadOnlyPlannedBook\u003e readPlannedBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Optional\u003cJsonSerializablePlannedBook\u003e jsonPlannedBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                filePath, JsonSerializablePlannedBook.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (!jsonPlannedBook.isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return Optional.of(jsonPlannedBook.get().toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public void savePlannedBook(ReadOnlyPlannedBook plannedBook) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        savePlannedBook(plannedBook, filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Similar to {@link #savePlannedBook(ReadOnlyPlannedBook)}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public void savePlannedBook(ReadOnlyPlannedBook plannedBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        requireNonNull(plannedBook);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializablePlannedBook(plannedBook), filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "beatricetay": 82
    }
  },
  {
    "path": "src/main/java/seedu/recipe/storage/plan/JsonSerializablePlannedBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.storage.plan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.ReadOnlyPlannedBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.plan.PlannedBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.plan.PlannedDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * An Immutable PlannedBook that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "@JsonRootName(value \u003d \"plannedbook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "class JsonSerializablePlannedBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PLANNED_RECIPE \u003d \"Planned recipes list contains duplicate\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + \"planned recipe(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private final List\u003cJsonAdaptedPlannedDate\u003e plannedRecipes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Constructs a {@code JsonSerializablePlannedBook} with the given recipes."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public JsonSerializablePlannedBook(@JsonProperty(\"plannedRecipes\") List\u003cJsonAdaptedPlannedDate\u003e plannedRecipes) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.plannedRecipes.addAll(plannedRecipes);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Converts a given {@code ReadOnlyPlannedBook} into this class for Jackson use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializablePlannedBook}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public JsonSerializablePlannedBook(ReadOnlyPlannedBook source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        plannedRecipes.addAll(source.getPlannedList().stream().map(JsonAdaptedPlannedDate::new)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Converts this planned recipe book into the model\u0027s {@code PlannedBook} object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public PlannedBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        PlannedBook plannedBook \u003d new PlannedBook();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        for (JsonAdaptedPlannedDate jsonAdaptedPlannedDate : plannedRecipes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            PlannedDate plannedDate \u003d jsonAdaptedPlannedDate.toModelType();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            if (plannedBook.contains(plannedDate)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PLANNED_RECIPE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            List\u003cRecipe\u003e recipes \u003d plannedDate.getRecipes();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            plannedBook.addAllRecipesToPlan(recipes, plannedDate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return plannedBook;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "beatricetay": 64
    }
  },
  {
    "path": "src/main/java/seedu/recipe/storage/plan/PlannedBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.storage.plan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.ReadOnlyPlannedBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * Represents a storage for {@link seedu.recipe.model.plan.PlannedBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "public interface PlannedBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    Path getPlannedBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Returns PlannedBook data as a {@link ReadOnlyPlannedBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    Optional\u003cReadOnlyPlannedBook\u003e readPlannedBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * @see #getPlannedBookFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    Optional\u003cReadOnlyPlannedBook\u003e readPlannedBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Saves the given {@link ReadOnlyPlannedBook} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * @param plannedBook cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    void savePlannedBook(ReadOnlyPlannedBook plannedBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * @see #savePlannedBook(ReadOnlyPlannedBook)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    void savePlannedBook(ReadOnlyPlannedBook plannedBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "beatricetay": 44
    }
  },
  {
    "path": "src/main/java/seedu/recipe/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "         * @see seedu.recipe.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 72,
      "beatricetay": 5
    }
  },
  {
    "path": "src/main/java/seedu/recipe/ui/CookedCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "package seedu.recipe.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.cooked.Record;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * An UI component that displays information of a {@code Recipe}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class CookedCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private static final String FXML \u003d \"CookedListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public final Record record;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private final String styleIngredientsAndSteps \u003d \"-fx-font-size: 11pt;\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            + \"-fx-font-family: \\\"Segoe UI\\\";\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            + \"-fx-text-fill: #FFFFFF;\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private FlowPane goals;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public CookedCard(Record record, int displayedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.record \u003d record;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        name.setText(record.getName().fullName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        name.setWrapText(true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        date.setText(\"Cooked on \" + record.getDate().toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        date.setWrapText(true);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        record.getGoals().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                .sorted(Comparator.comparing(goal -\u003e goal.goalName))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                .forEach(goal -\u003e goals.getChildren().add(new Label(goal.goalName)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (!(other instanceof CookedCard)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        CookedCard card \u003d (CookedCard) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                \u0026\u0026 record.equals(card.record);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 1,
      "tharshita": 24,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/recipe/ui/CookedListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "package seedu.recipe.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.cooked.Record;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Panel containing the list of recipes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class CookedListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private static final String FXML \u003d \"CookedListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CookedListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private ListView\u003cRecord\u003e cookedListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private PieChart pieChart;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public CookedListPanel(ObservableList\u003cRecord\u003e recordList, ObservableList\u003cInteger\u003e goalCountList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        cookedListView.setItems(recordList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        cookedListView.setCellFactory(listView -\u003e new RecordListViewCell());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        setChart(goalCountList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void setChart(ObservableList\u003cInteger\u003e goalCountList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e pieChartData \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                FXCollections.observableArrayList("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                        new PieChart.Data(\"Herbivore\", goalCountList.get(0)),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                        new PieChart.Data(\"Bulk like the Hulk\", goalCountList.get(1)),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                        new PieChart.Data(\"Wholesome Wholemeal\", goalCountList.get(2)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        pieChart.setTitle(\"My Healthy Plate\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        pieChart.setData(pieChartData);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Record} using a {@code RecordCard}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    class RecordListViewCell extends ListCell\u003cRecord\u003e {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        protected void updateItem(Record record, boolean empty) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            super.updateItem(record, empty);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            if (empty || record \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                setGraphic(new CookedCard(record, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 63
    }
  },
  {
    "path": "src/main/java/seedu/recipe/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s2-cs2103t-t10-1.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuuTon9"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuuTon9"
        },
        "content": "            + \"\\n add     - add a new recipe\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuuTon9"
        },
        "content": "            + \"\\n addStep - add steps to selected recipe\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuuTon9"
        },
        "content": "            + \"\\n edit    - edit selected recipe\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuuTon9"
        },
        "content": "            + \"\\n find    - find a specific recipe\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuuTon9"
        },
        "content": "            + \"\\n delete  - delete selected recipe\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuuTon9"
        },
        "content": "            + \"\\n list    - list all recipes\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuuTon9"
        },
        "content": "            + \"\\n switch  - switch tabs\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuuTon9"
        },
        "content": "            + \"\\n exit    - to leave HYBB\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuuTon9"
        },
        "content": "            + \"\\n\" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 98,
      "beatricetay": 3,
      "YuuTon9": 10
    }
  },
  {
    "path": "src/main/java/seedu/recipe/ui/MainTabPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Panel containing the different tabs of the application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class MainTabPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private static final String FXML \u003d \"MainTabPanel.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(MainTabPanel.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private StackPane recipeListPanelPlaceholder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private StackPane planningListPanelPlaceholder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private StackPane cookedListPanelPlaceholder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private StackPane achievementsListPanelPlaceholder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private TabPane mainTabPanel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    //TODO: change last argument\u0027s RecipeListPanel to AchievementsListPanel once class is created"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public MainTabPanel(RecipeListPanel recipeListPanel, PlanningListPanel planningListPanel,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                        CookedListPanel cookedListPanel, RecipeListPanel achievementsListPanel) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        recipeListPanelPlaceholder.getChildren().add(recipeListPanel.getRoot());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        planningListPanelPlaceholder.getChildren().add(planningListPanel.getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        cookedListPanelPlaceholder.getChildren().add(cookedListPanel.getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        achievementsListPanelPlaceholder.getChildren().add(achievementsListPanel.getRoot());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    protected void switchToRecipesTab() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.mainTabPanel.getSelectionModel().select(0);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    protected void switchToPlanningTab() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.mainTabPanel.getSelectionModel().select(1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    protected void switchToGoalsTab() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.mainTabPanel.getSelectionModel().select(2);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    protected void switchToAchievementsTab() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.mainTabPanel.getSelectionModel().select(3);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 62,
      "beatricetay": 3
    }
  },
  {
    "path": "src/main/java/seedu/recipe/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.cooked.Record;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.plan.PlannedDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.ui.tab.Tab;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private ObservableList\u003cInteger\u003e goalsCountList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private MainTabPanel mainTabPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private PlanningListPanel planningListPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private RecipeListPanel recipeListPanel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private CookedListPanel cookedListPanel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private RecipeListPanel achievementsListPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private StackPane mainTabPanelPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private StackPane planningListPanelPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private StackPane recipeListPanelPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private StackPane cookedListPanelPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private StackPane achievementsListPanelPlaceholder;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        ObservableList\u003cRecipe\u003e recipeList \u003d logic.getFilteredRecipeList();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        recipeListPanel \u003d new RecipeListPanel(recipeList);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        ObservableList\u003cPlannedDate\u003e plannedList \u003d logic.getFilteredPlannedList();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        planningListPanel \u003d new PlanningListPanel(plannedList);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        ObservableList\u003cRecord\u003e cookedList \u003d logic.getFilteredRecordList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        goalsCountList \u003d logic.getFilteredGoalsTally();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        cookedListPanel \u003d new CookedListPanel(cookedList, goalsCountList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        cookedListPanel.setChart(goalsCountList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        //using recipe list as stub for achievements, to be edited later todo"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        ObservableList\u003cRecipe\u003e achievementsList \u003d logic.getFilteredRecipeList();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        achievementsListPanel \u003d new RecipeListPanel(achievementsList);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        mainTabPanel \u003d new MainTabPanel(recipeListPanel, planningListPanel, cookedListPanel, achievementsListPanel);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        mainTabPanelPlaceholder.getChildren().add(mainTabPanel.getRoot());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getRecipeBookFilePath());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public RecipeListPanel getRecipeListPanel() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return recipeListPanel;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Switches of tab depending on {@code tab}."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private void handleSwitchTab(Tab tab) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        switch (tab) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        case RECIPES:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            showRecipesTab();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        case PLANNING:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            showPlanningTab();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        case GOALS:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            showGoalsTab();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        case ACHIEVEMENTS:"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            showAchievementsTab();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * @see seedu.recipe.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            if (commandResult.isSwitchTab()) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                handleSwitchTab(commandResult.getTab());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Switch to recipes tab."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private void showRecipesTab() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        mainTabPanel.switchToRecipesTab();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Switch to planning tab."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private void showPlanningTab() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        mainTabPanel.switchToPlanningTab();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Switch to goals tab."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private void showGoalsTab() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        mainTabPanel.switchToGoalsTab();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        cookedListPanel.setChart(goalsCountList);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Switch to achievements tab."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private void showAchievementsTab() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        mainTabPanel.switchToAchievementsTab();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 1,
      "tharshita": 90,
      "-": 182,
      "beatricetay": 15
    }
  },
  {
    "path": "src/main/java/seedu/recipe/ui/PlanningListCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.plan.PlannedDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * An UI component that displays information of a {@code Recipe}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "public class PlanningListCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private static final String FXML \u003d \"PlanningListCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public final PlannedDate plannedDateObject;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public final Date plannedDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public final List\u003cRecipe\u003e recipes;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private final String styleIngredientsAndSteps \u003d \"-fx-font-size: 11pt;\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + \"-fx-font-family: \\\"Segoe UI\\\";\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + \"-fx-text-fill: #FFFFFF;\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private VBox recipesBox;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public PlanningListCard(PlannedDate plannedDate, int displayedIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.plannedDateObject \u003d plannedDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.plannedDate \u003d plannedDate.getDate();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        date.setText(this.plannedDate.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.recipes \u003d plannedDate.getRecipes();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        for (int i \u003d 0; i \u003c recipes.size(); i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            Recipe recipe \u003d recipes.get(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            recipesBox.getChildren().add(new RecipeCard(recipe, i + 1).getRoot());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (!(other instanceof PlanningListCard)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        PlanningListCard card \u003d (PlanningListCard) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return plannedDate.equals(card.plannedDate)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                \u0026\u0026 recipes.equals(card.recipes);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 1,
      "tharshita": 2,
      "beatricetay": 65
    }
  },
  {
    "path": "src/main/java/seedu/recipe/ui/PlanningListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import javafx.scene.layout.BorderPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.plan.PlannedDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.plan.UniquePlannedList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * Panel containing the list of recipes."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "public class PlanningListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private static final String FXML \u003d \"PlanningListPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private static UniquePlannedList uniqueScheduleMap;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(RecipeListPanel.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private final String styleHeader \u003d \"-fx-font-family: \\\"Segoe UI\\\";\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + \"-fx-text-fill: #FFFFFF;\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + \"-fx-font-weight: bold;\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private final String monthStyleHeader \u003d styleHeader + \"-fx-font-size: 30pt;\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private final String weekStyleHeader \u003d styleHeader + \"-fx-font-size: 15pt;\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private ListView\u003cPlannedDate\u003e planningListView;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private BorderPane borderPane;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private Label monthHeader;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private Label dayHeader;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public PlanningListPanel(ObservableList\u003cPlannedDate\u003e plannedDates) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Date today \u003d Date.today();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        monthHeader.setText(today.getMonthName());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        monthHeader.setStyle(monthStyleHeader);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        dayHeader.setText(today.getDayOfWeek() + \": \" + today.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        dayHeader.setStyle(weekStyleHeader);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        planningListView.setItems(plannedDates);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        planningListView.setCellFactory(planningListView -\u003e new PlanningListViewCell());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code PlannedDate} using a {@code PlanningListCard}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    class PlanningListViewCell extends ListCell\u003cPlannedDate\u003e {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        protected void updateItem(PlannedDate plannedDate, boolean empty) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            super.updateItem(plannedDate, empty);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            if (empty || plannedDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                setGraphic(new PlanningListCard(plannedDate, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "beatricetay": 77
    }
  },
  {
    "path": "src/main/java/seedu/recipe/ui/RecipeCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.concurrent.atomic.AtomicInteger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * An UI component that displays information of a {@code Recipe}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class RecipeCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private static final String FXML \u003d \"RecipeListCard.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public final Recipe recipe;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final String styleIngredientsAndSteps \u003d \"-fx-font-size: 11pt;\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"-fx-font-family: \\\"Segoe UI\\\";\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"-fx-text-fill: #FFFFFF;\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private ImageView favourite;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private Label time;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private VBox grains;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private VBox vegetables;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private VBox proteins;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private VBox fruits;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private VBox others;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private VBox steps;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private FlowPane goals;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private Label ingredientsHeader;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private Label stepsHeader;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public RecipeCard(Recipe recipe, int displayedIndex) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.recipe \u003d recipe;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        name.setText(recipe.getName().fullName);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        name.setWrapText(true);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (recipe.isFavourite()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            favourite.setImage(new Image(\"/images/favourite.png\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        recipe.getGoals().stream()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .sorted(Comparator.comparing(goal -\u003e goal.goalName))"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .forEach(goal -\u003e goals.getChildren().add(new Label(goal.goalName)));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        time.setText(recipe.getTime().value + \" min\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        ingredientsHeader.setText(\"Ingredients\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        ingredientsHeader.setUnderline(true);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        ingredientsHeader.setPadding(new Insets(10, 0, 0, 0));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        recipe.getGrains().forEach(grain -\u003e grains.getChildren().add(new Label(grain.toString())));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        grains.getChildren().forEach(grain -\u003e grain.setStyle(styleIngredientsAndSteps));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        recipe.getVegetables().forEach(vegetable -\u003e vegetables.getChildren().add(new Label(vegetable.toString())));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        vegetables.getChildren().forEach(vegetable -\u003e vegetable.setStyle(styleIngredientsAndSteps));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        recipe.getProteins().forEach(protein -\u003e proteins.getChildren().add(new Label(protein.toString())));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        proteins.getChildren().forEach(protein -\u003e protein.setStyle(styleIngredientsAndSteps));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        recipe.getFruits().forEach(fruit -\u003e fruits.getChildren().add(new Label(fruit.toString())));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        fruits.getChildren().forEach(fruit -\u003e fruit.setStyle(styleIngredientsAndSteps));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        recipe.getOthers().forEach(other -\u003e others.getChildren().add(new Label(other.toString())));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        others.getChildren().forEach(other -\u003e other.setStyle(styleIngredientsAndSteps));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (!recipe.getSteps().isEmpty()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            stepsHeader.setText(\"Steps\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            stepsHeader.setUnderline(true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            stepsHeader.setPadding(new Insets(10, 0, 0, 0));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            // Calculates step number and displays with along with the step"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            AtomicInteger stepNumber \u003d new AtomicInteger(1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            recipe.getSteps().forEach(step -\u003e {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                Label stepLabel \u003d new Label(\"Step \" + stepNumber.getAndIncrement() + \": \" + step.value);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                stepLabel.setWrapText(true);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                stepLabel.setStyle(styleIngredientsAndSteps);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                steps.getChildren().add(stepLabel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            });"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            steps.setSpacing(5);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (!(other instanceof RecipeCard)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        RecipeCard card \u003d (RecipeCard) other;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                \u0026\u0026 recipe.equals(card.recipe);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 58,
      "tharshita": 10,
      "-": 51,
      "beatricetay": 18
    }
  },
  {
    "path": "src/main/java/seedu/recipe/ui/RecipeListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Panel containing the list of recipes."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class RecipeListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private static final String FXML \u003d \"RecipeListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(RecipeListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private ListView\u003cRecipe\u003e recipeListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public RecipeListPanel(ObservableList\u003cRecipe\u003e recipeList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        recipeListView.setItems(recipeList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        recipeListView.setCellFactory(listView -\u003e new RecipeListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Recipe} using a {@code RecipeCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    class RecipeListViewCell extends ListCell\u003cRecipe\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        protected void updateItem(Recipe recipe, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            super.updateItem(recipe, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            if (empty || recipe \u003d\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                setGraphic(new RecipeCard(recipe, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 42,
      "beatricetay": 3
    }
  },
  {
    "path": "src/main/java/seedu/recipe/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        resultDisplay.setWrapText(true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 1,
      "-": 27,
      "beatricetay": 1
    }
  },
  {
    "path": "src/main/java/seedu/recipe/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        //saveLocationStatus.setText(\"recipebook\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "beatricetay": 2
    }
  },
  {
    "path": "src/main/java/seedu/recipe/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "beatricetay": 1
    }
  },
  {
    "path": "src/main/java/seedu/recipe/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/leaf.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 1,
      "-": 80,
      "beatricetay": 5
    }
  },
  {
    "path": "src/main/java/seedu/recipe/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 86,
      "beatricetay": 2
    }
  },
  {
    "path": "src/main/java/seedu/recipe/ui/tab/Tab.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.ui.tab;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * The tabs available for healthybaby."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public enum Tab {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    RECIPES,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    PLANNING,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    GOALS,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    ACHIEVEMENTS"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 10,
      "beatricetay": 1
    }
  },
  {
    "path": "src/main/resources/view/CookedListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"goals\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" alignment\u003d\"BOTTOM_RIGHT\" text\u003d\"\\$date\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "tharshita": 35
    }
  },
  {
    "path": "src/main/resources/view/CookedListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c?import javafx.scene.chart.PieChart?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003cHBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    \u003cBorderPane fx:id\u003d\"borderPane\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        \u003ctop\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            \u003cVBox spacing \u003d \"5\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                \u003cLabel fx:id\u003d\"cooked\" text\u003d\"Cooked Meals\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        \u003c/top\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        \u003ccenter\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            \u003cListView fx:id\u003d\"cookedListView\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        \u003c/center\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    \u003cBorderPane fx:id\u003d\"borderPane2\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        \u003ctop\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            \u003cVBox spacing \u003d \"5\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                \u003cLabel fx:id\u003d\"graph\" text\u003d\"Goals\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        \u003c/top\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        \u003ccenter\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            \u003cVBox spacing \u003d \"5\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                \u003cPieChart id\u003d\"pieChart\" fx:id\u003d\"pieChart\" layoutX\u003d\"10\" layoutY\u003d\"110\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        \u003c/center\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "tharshita": 33
    }
  },
  {
    "path": "src/main/resources/view/MainTabPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    \u003cTabPane fx:id\u003d\"mainTabPanel\" VBox.vgrow\u003d\"ALWAYS\" tabClosingPolicy\u003d\"UNAVAILABLE\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        \u003ctabs\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            \u003cTab text\u003d\"Recipes\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                \u003ccontent\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                    \u003cVBox fx:id\u003d\"recipeList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                          VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                            \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"recipeListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                \u003c/content\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            \u003c/Tab\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            \u003cTab text\u003d\"Planning\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                \u003ccontent\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                    \u003cVBox fx:id\u003d\"planningList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                          VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                            \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"planningListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                \u003c/content\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            \u003c/Tab\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            \u003cTab text\u003d\"Goals\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                \u003ccontent\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                    \u003cVBox fx:id\u003d\"cookedList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                          VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                            \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"cookedListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                \u003c/content\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            \u003c/Tab\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            \u003cTab text\u003d\"Achievements\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                \u003ccontent\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                    \u003cVBox fx:id\u003d\"achievementList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                          VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                            \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"achievementsListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                \u003c/content\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            \u003c/Tab\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        \u003c/tabs\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "tharshita": 58
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "         title\u003d\"HealthyBaby\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    \u003cImage url\u003d\"@/images/leaf.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        \u003cVBox fx:id\u003d\"mainTab\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": "          \u003cStackPane fx:id\u003d\"mainTabPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "tharshita": 4,
      "-": 56
    }
  },
  {
    "path": "src/main/resources/view/PlanningListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        \u003cVBox fx:id\u003d\"recipesBox\"  alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "beatricetay": 23
    }
  },
  {
    "path": "src/main/resources/view/PlanningListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "  \u003cBorderPane fx:id\u003d\"borderPane\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    \u003ctop\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "      \u003cVBox spacing \u003d \"5\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        \u003cLabel fx:id\u003d\"monthHeader\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        \u003cLabel fx:id\u003d\"dayHeader\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    \u003c/top\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    \u003ccenter\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "      \u003cListView fx:id\u003d\"planningListView\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    \u003c/center\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "  \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "beatricetay": 22
    }
  },
  {
    "path": "src/main/resources/view/RecipeListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        \u003cImageView fx:id\u003d\"favourite\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"goals\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "      \u003cLabel fx:id\u003d\"time\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$time\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "      \u003cLabel fx:id\u003d\"ingredientsHeader\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "      \u003cVBox fx:id\u003d\"grains\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "      \u003cVBox fx:id\u003d\"vegetables\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "      \u003cVBox fx:id\u003d\"proteins\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "      \u003cVBox fx:id\u003d\"fruits\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "      \u003cVBox fx:id\u003d\"others\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "      \u003cLabel fx:id\u003d\"stepsHeader\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "      \u003cVBox fx:id\u003d\"steps\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 5,
      "tharshita": 2,
      "-": 32,
      "beatricetay": 5
    }
  },
  {
    "path": "src/main/resources/view/RecipeListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "  \u003cListView fx:id\u003d\"recipeListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "tharshita": 1,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/recipe/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 57,
      "beatricetay": 1
    }
  },
  {
    "path": "src/test/java/seedu/recipe/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 26,
      "beatricetay": 1
    }
  },
  {
    "path": "src/test/java/seedu/recipe/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 133,
      "beatricetay": 2
    }
  },
  {
    "path": "src/test/java/seedu/recipe/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        final Index fifthRecipeIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertTrue(fifthRecipeIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertTrue(fifthRecipeIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertTrue(fifthRecipeIndex.equals(fifthRecipeIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertFalse(fifthRecipeIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertFalse(fifthRecipeIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertFalse(fifthRecipeIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 7,
      "-": 51,
      "beatricetay": 2
    }
  },
  {
    "path": "src/test/java/seedu/recipe/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/leaf.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 1,
      "-": 33,
      "beatricetay": 2
    }
  },
  {
    "path": "src/test/java/seedu/recipe/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 105,
      "beatricetay": 3
    }
  },
  {
    "path": "src/test/java/seedu/recipe/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 112,
      "beatricetay": 4
    }
  },
  {
    "path": "src/test/java/seedu/recipe/commons/util/FileUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 21,
      "beatricetay": 2
    }
  },
  {
    "path": "src/test/java/seedu/recipe/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 42,
      "beatricetay": 3
    }
  },
  {
    "path": "src/test/java/seedu/recipe/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 141,
      "beatricetay": 2
    }
  },
  {
    "path": "src/test/java/seedu/recipe/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.FRUIT_DESC_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.GRAIN_DESC_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.NAME_DESC_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.OTHER_DESC_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.PROTEIN_DESC_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.STEP_DESC_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.TIME_DESC_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.VEGETABLE_DESC_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.TypicalRecipes.TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.Model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.ModelManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.UserPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.plan.PlannedBook;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.storage.JsonCookedRecordBookStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.storage.JsonRecipeBookStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.storage.StorageManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.storage.plan.JsonPlannedBookStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        JsonRecipeBookStorage recipeBookStorage \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                new JsonRecipeBookStorage(temporaryFolder.resolve(\"recipeBook.json\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        JsonPlannedBookStorage plannedBookStorage \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                new JsonPlannedBookStorage(temporaryFolder.resolve(\"plannedBook.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        JsonCookedRecordBookStorage recordBookStorage \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                new JsonCookedRecordBookStorage(temporaryFolder.resolve(\"cookedRecordBook.json\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        StorageManager storage \u003d new StorageManager(recipeBookStorage, recordBookStorage,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                plannedBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // Setup LogicManager with JsonRecipeBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        JsonRecipeBookStorage recipeBookStorage \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                new JsonRecipeBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionRecipeBook.json\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        JsonPlannedBookStorage plannedBookStorage \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                new JsonPlannedBookStorage(temporaryFolder.resolve(\"ioExceptionPlannedBook.json\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        // todo add tests for plannedbook"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        JsonCookedRecordBookStorage recordBookStorage \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                new JsonCookedRecordBookStorage(temporaryFolder.resolve(\"ioExceptionRecordBook.json\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        StorageManager storage \u003d new StorageManager(recipeBookStorage, recordBookStorage,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                plannedBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_TURKEY_SANDWICH + TIME_DESC_TURKEY_SANDWICH"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                + STEP_DESC_TURKEY_SANDWICH + GRAIN_DESC_TURKEY_SANDWICH + VEGETABLE_DESC_TURKEY_SANDWICH"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                + PROTEIN_DESC_TURKEY_SANDWICH + FRUIT_DESC_TURKEY_SANDWICH + OTHER_DESC_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Recipe expectedRecipe \u003d new RecipeBuilder(TURKEY_SANDWICH).withGoals().build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        expectedModel.addRecipe(expectedRecipe);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void getFilteredRecipeList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredRecipeList().remove(0));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getRecipeBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                model.getRecordBook(), new PlannedBook());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private static class JsonRecipeBookIoExceptionThrowingStub extends JsonRecipeBookStorage {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        private JsonRecipeBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        public void saveRecipeBook(ReadOnlyRecipeBook recipeBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 8,
      "tharshita": 18,
      "-": 121,
      "beatricetay": 38
    }
  },
  {
    "path": "src/test/java/seedu/recipe/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.recipe.testutil.TypicalRecords.getTypicalRecordBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.plan.PlannedBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        model \u003d new ModelManager(getTypicalRecipeBook(), new UserPrefs(), getTypicalRecordBook(), new PlannedBook());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void execute_newRecipe_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Recipe validRecipe \u003d new RecipeBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getRecipeBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                model.getRecordBook(), new PlannedBook());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        // System.out.println(validRecipe); // todo remove later"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        expectedModel.addRecipe(validRecipe);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertCommandSuccess(new AddCommand(validRecipe), model,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validRecipe), expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void execute_duplicateRecipe_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Recipe recipeInList \u003d model.getRecipeBook().getRecipeList().get(0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertCommandFailure(new AddCommand(recipeInList), model, AddCommand.MESSAGE_DUPLICATE_RECIPE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 1,
      "tharshita": 14,
      "-": 24,
      "beatricetay": 11
    }
  },
  {
    "path": "src/test/java/seedu/recipe/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.ReadOnlyCookedRecordBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.ReadOnlyPlannedBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.RecipeBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.cooked.Record;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.plan.PlannedDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void constructor_nullRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void execute_recipeAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        ModelStubAcceptingRecipeAdded modelStub \u003d new ModelStubAcceptingRecipeAdded();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Recipe validRecipe \u003d new RecipeBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validRecipe).execute(modelStub);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validRecipe), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertEquals(Arrays.asList(validRecipe), modelStub.recipesAdded);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void execute_duplicateRecipe_throwsCommandException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Recipe validRecipe \u003d new RecipeBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validRecipe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithRecipe(validRecipe);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_RECIPE, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Recipe alice \u003d new RecipeBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Recipe bob \u003d new RecipeBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // different recipe -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        public Path getRecipeBookFilePath() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        public void setRecipeBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        public void addRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        public void setRecipeBook(ReadOnlyRecipeBook newData) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        public ReadOnlyRecipeBook getRecipeBook() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        public boolean hasRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        public void deleteRecipe(Recipe target) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        public void favouriteRecipe(Recipe target) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        public void unfavouriteRecipe(Recipe target) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        public void setRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        public boolean canUndo(int numberOfUndo) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        public boolean canRedo(int numberOfRedo) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        public void commitBook(CommandType commandType) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            // throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        public void undoBook(int numberOfUndo, Model model) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        public void redoBook(int numberOfRedo, Model model) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        public ReadOnlyPlannedBook getPlannedBook() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        public ObservableList\u003cRecipe\u003e getFilteredRecipeList() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        public void updateFilteredRecipeList(Predicate\u003cRecipe\u003e predicate) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        public void setPlannedBook(ReadOnlyPlannedBook plannedBook) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        public void addOnePlan(Recipe recipe, PlannedDate plannedDate) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        public void addAllRecipesToPlan(List\u003cRecipe\u003e recipes, PlannedDate plannedDate) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        public void deleteOnePlan(Recipe recipe, PlannedDate plannedDate) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        public void deleteAllRecipePlans(Recipe recipe) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        public void addRecord(Record record) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        public ObservableList\u003cRecord\u003e getFilteredRecordList() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        public ObservableList\u003cInteger\u003e getFilteredGoalsTally() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        public ObservableList\u003cPlannedDate\u003e getFilteredPlannedList() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        public ReadOnlyCookedRecordBook getRecordBook() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        public boolean hasRecord(Record record) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        public void updateFilteredPlannedList(Predicate\u003cPlannedDate\u003e predicate) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        public void setRecipeInPlans(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * A Model stub that contains a single recipe."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private class ModelStubWithRecipe extends ModelStub {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        private final Recipe recipe;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        ModelStubWithRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            requireNonNull(recipe);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            this.recipe \u003d recipe;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        public boolean hasRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            requireNonNull(recipe);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            return this.recipe.isSameRecipe(recipe);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * A Model stub that always accept the recipe being added."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private class ModelStubAcceptingRecipeAdded extends ModelStub {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        final ArrayList\u003cRecipe\u003e recipesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        public boolean hasRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            requireNonNull(recipe);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            return recipesAdded.stream().anyMatch(recipe::isSameRecipe);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        public void addRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            requireNonNull(recipe);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            recipesAdded.add(recipe);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        public ReadOnlyRecipeBook getRecipeBook() {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return new RecipeBook();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 42,
      "tharshita": 75,
      "-": 139,
      "beatricetay": 48
    }
  },
  {
    "path": "src/test/java/seedu/recipe/logic/commands/AddIngredientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "package seedu.recipe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.showRecipeAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.testutil.TypicalIndexes.INDEX_SECOND_RECIPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.testutil.TypicalIndexes.INDEX_THIRD_RECIPE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.testutil.TypicalRecords.getTypicalRecordBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.logic.commands.EditCommand.EditRecipeDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.model.plan.PlannedBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Other;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Protein;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * {@code AddIngredientCommand}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class AddIngredientCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalRecipeBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            getTypicalRecordBook(), new PlannedBook());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final Other otherIngredientToAdd \u003d RecipeBuilder.DEFAULT_OTHER;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final Protein proteinIngredientToAdd \u003d RecipeBuilder.DEFAULT_PROTEIN;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Recipe recipeToAddIngredients \u003d model.getFilteredRecipeList().get(INDEX_SECOND_RECIPE.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        EditRecipeDescriptor editRecipeDescriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Set\u003cOther\u003e newOtherIngredients \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        newOtherIngredients.add(otherIngredientToAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        editRecipeDescriptor.setOthers(newOtherIngredients);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        AddIngredientCommand addIngredientCommand \u003d new AddIngredientCommand(INDEX_SECOND_RECIPE, editRecipeDescriptor);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String expectedMessageTemplate \u003d \"Successfully added ingredient(s) to %1$s!\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String expectedMessage \u003d String.format(expectedMessageTemplate, recipeToAddIngredients.getName().toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getRecipeBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                model.getRecordBook(), new PlannedBook());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Recipe expectedRecipe \u003d new RecipeBuilder().withName(\"Grilled Sandwich\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withTime(\"10\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withGrains(\"50g, Bread\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withOthers(\"50g, Cheese\", \"100g, Oil\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withSteps(\"Spread butter on bread\", \"Heat pan to medium heat\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withGoals(\"Wholesome Wholemeal\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        expectedModel.setRecipe(recipeToAddIngredients, expectedRecipe);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertCommandSuccess(addIngredientCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredRecipeList().size() + 1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        AddIngredientCommand addIngredientCommand \u003d new AddIngredientCommand("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                outOfBoundIndex, new EditRecipeDescriptor());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertCommandFailure(addIngredientCommand, model, Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        showRecipeAtIndex(model, INDEX_SECOND_RECIPE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Recipe recipeToAddIngredients \u003d model.getFilteredRecipeList().get(INDEX_FIRST_RECIPE.getZeroBased());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        EditRecipeDescriptor editRecipeDescriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Set\u003cOther\u003e newOtherIngredients \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        newOtherIngredients.add(otherIngredientToAdd);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        editRecipeDescriptor.setOthers(newOtherIngredients);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        AddIngredientCommand addIngredientCommand \u003d new AddIngredientCommand(INDEX_FIRST_RECIPE, editRecipeDescriptor);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String expectedMessageTemplate \u003d \"Successfully added ingredient(s) to %1$s!\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String expectedMessage \u003d String.format(expectedMessageTemplate, recipeToAddIngredients.getName().toString());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getRecipeBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                model.getRecordBook(), new PlannedBook());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Recipe expectedRecipe \u003d new RecipeBuilder().withName(\"Grilled Sandwich\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withTime(\"10\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withGrains(\"50g, Bread\")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withOthers(\"50g, Cheese\", \"100g, Oil\")"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withSteps(\"Spread butter on bread\", \"Heat pan to medium heat\")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withGoals(\"Wholesome Wholemeal\").build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        expectedModel.setRecipe(recipeToAddIngredients, expectedRecipe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertCommandSuccess(addIngredientCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        showRecipeAtIndex(model, INDEX_SECOND_RECIPE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_THIRD_RECIPE;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of recipe book list"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getRecipeBook().getRecipeList().size());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        AddIngredientCommand addIngredientCommand \u003d new AddIngredientCommand("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                outOfBoundIndex, new EditRecipeDescriptor());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertCommandFailure(addIngredientCommand, model, Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        EditRecipeDescriptor firstEditRecipeDescriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Set\u003cOther\u003e newOtherIngredients \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        newOtherIngredients.add(otherIngredientToAdd);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        firstEditRecipeDescriptor.setOthers(newOtherIngredients);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        EditRecipeDescriptor secondEditRecipeDescriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Set\u003cProtein\u003e newProteinIngredients \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        newProteinIngredients.add(proteinIngredientToAdd);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        secondEditRecipeDescriptor.setProteins(newProteinIngredients);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // Base command for comparison"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        AddIngredientCommand addIngredientFirstCommand \u003d new AddIngredientCommand("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                INDEX_SECOND_RECIPE, firstEditRecipeDescriptor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // Different recipe, same EditRecipeDescriptor"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        AddIngredientCommand addIngredientSecondCommand \u003d new AddIngredientCommand("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                INDEX_THIRD_RECIPE, firstEditRecipeDescriptor);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // Same recipe, different EditRecipeDescriptor"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        AddIngredientCommand addIngredientThirdCommand \u003d new AddIngredientCommand("
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                INDEX_SECOND_RECIPE, secondEditRecipeDescriptor);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertTrue(addIngredientFirstCommand.equals(addIngredientFirstCommand));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        AddIngredientCommand addIngredientFirstCommandCopy \u003d new AddIngredientCommand("
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                INDEX_SECOND_RECIPE, firstEditRecipeDescriptor);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertTrue(addIngredientFirstCommand.equals(addIngredientFirstCommandCopy));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertFalse(addIngredientFirstCommand.equals(1));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertFalse(addIngredientFirstCommand.equals(null));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // different recipe, same EditRecipeDescriptor -\u003e returns false"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertFalse(addIngredientFirstCommand.equals(addIngredientSecondCommand));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // same recipe, different EditRecipeDescriptor -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertFalse(addIngredientFirstCommand.equals(addIngredientThirdCommand));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 163
    }
  },
  {
    "path": "src/test/java/seedu/recipe/logic/commands/AddStepCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "package seedu.recipe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.showRecipeAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.testutil.TypicalIndexes.INDEX_SECOND_RECIPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.testutil.TypicalRecords.getTypicalRecordBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.model.plan.PlannedBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.model.recipe.Step;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * {@code AddStepCommand}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class AddStepCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalRecipeBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            getTypicalRecordBook(), new PlannedBook());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final Step firstNewStep \u003d new Step(\"New step 1\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final Step secondNewStep \u003d new Step(\"New step 2\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Recipe recipeToAddSteps \u003d model.getFilteredRecipeList().get(INDEX_SECOND_RECIPE.getZeroBased());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        List\u003cStep\u003e stepsToAdd \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        stepsToAdd.add(firstNewStep);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        stepsToAdd.add(secondNewStep);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        AddStepCommand addStepCommand \u003d new AddStepCommand(INDEX_SECOND_RECIPE, stepsToAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String expectedMessageTemplate \u003d \"Successfully added step(s) to %1$s!\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String expectedMessage \u003d String.format(expectedMessageTemplate, recipeToAddSteps.getName().toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getRecipeBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                model.getRecordBook(), new PlannedBook());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Recipe expectedRecipe \u003d new RecipeBuilder().withName(\"Grilled Sandwich\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withTime(\"10\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withGrains(\"50g, Bread\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withOthers(\"50g, Cheese\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withSteps(\"Spread butter on bread\", \"Heat pan to medium heat\", \"New step 1\", \"New step 2\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withGoals(\"Wholesome Wholemeal\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        expectedModel.setRecipe(recipeToAddSteps, expectedRecipe);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertCommandSuccess(addStepCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredRecipeList().size() + 1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        List\u003cStep\u003e stepsToAdd \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        stepsToAdd.add(firstNewStep);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        stepsToAdd.add(secondNewStep);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        AddStepCommand addStepCommand \u003d new AddStepCommand(outOfBoundIndex, stepsToAdd);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertCommandFailure(addStepCommand, model, Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        showRecipeAtIndex(model, INDEX_SECOND_RECIPE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Recipe recipeToAddSteps \u003d model.getFilteredRecipeList().get(INDEX_FIRST_RECIPE.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        List\u003cStep\u003e stepsToAdd \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        stepsToAdd.add(firstNewStep);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        stepsToAdd.add(secondNewStep);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        AddStepCommand addStepCommand \u003d new AddStepCommand(INDEX_FIRST_RECIPE, stepsToAdd);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String expectedMessageTemplate \u003d \"Successfully added step(s) to %1$s!\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String expectedMessage \u003d String.format(expectedMessageTemplate, recipeToAddSteps.getName().toString());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getRecipeBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                model.getRecordBook(), new PlannedBook());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Recipe expectedRecipe \u003d new RecipeBuilder().withName(\"Grilled Sandwich\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withTime(\"10\")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withGrains(\"50g, Bread\")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withOthers(\"50g, Cheese\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withSteps(\"Spread butter on bread\", \"Heat pan to medium heat\", \"New step 1\", \"New step 2\")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withGoals(\"Wholesome Wholemeal\").build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        expectedModel.setRecipe(recipeToAddSteps, expectedRecipe);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertCommandSuccess(addStepCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        showRecipeAtIndex(model, INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_RECIPE;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // Ensures that outOfBoundIndex is still in bounds of recipe book list"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getRecipeBook().getRecipeList().size());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        List\u003cStep\u003e stepsToAdd \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        stepsToAdd.add(firstNewStep);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        stepsToAdd.add(secondNewStep);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        AddStepCommand addStepCommand \u003d new AddStepCommand(outOfBoundIndex, stepsToAdd);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertCommandFailure(addStepCommand, model, Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        List\u003cStep\u003e stepsToAdd \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        stepsToAdd.add(firstNewStep);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        stepsToAdd.add(secondNewStep);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        List\u003cStep\u003e differentStepsToAdd \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        differentStepsToAdd.add(firstNewStep);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // Base command for comparison"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        AddStepCommand addStepFirstCommand \u003d new AddStepCommand(INDEX_FIRST_RECIPE, stepsToAdd);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // Different recipe, same list of steps"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        AddStepCommand addStepSecondCommand \u003d new AddStepCommand(INDEX_SECOND_RECIPE, stepsToAdd);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // Same recipe, different list of steps"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        AddStepCommand addStepThirdCommand \u003d new AddStepCommand(INDEX_FIRST_RECIPE, differentStepsToAdd);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertTrue(addStepFirstCommand.equals(addStepFirstCommand));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        AddStepCommand addStepFirstCommandCopy \u003d new AddStepCommand(INDEX_FIRST_RECIPE, stepsToAdd);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertTrue(addStepFirstCommand.equals(addStepFirstCommandCopy));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertFalse(addStepFirstCommand.equals(1));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertFalse(addStepFirstCommand.equals(null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // different recipe, same list of steps -\u003e returns false"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertFalse(addStepFirstCommand.equals(addStepSecondCommand));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // same recipe, different list of steps -\u003e returns false"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertFalse(addStepFirstCommand.equals(addStepThirdCommand));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 153
    }
  },
  {
    "path": "src/test/java/seedu/recipe/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.recipe.testutil.TypicalRecords.getTypicalRecordBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.RecipeBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.plan.PlannedBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void execute_emptyRecipeBook_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void execute_nonEmptyRecipeBook_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalRecipeBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                getTypicalRecordBook(), new PlannedBook());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalRecipeBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                getTypicalRecordBook(), new PlannedBook());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        expectedModel.setRecipeBook(new RecipeBook());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 3,
      "tharshita": 6,
      "-": 20,
      "beatricetay": 8
    }
  },
  {
    "path": "src/test/java/seedu/recipe/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, null, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, null, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, null, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, null, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, null, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 5,
      "-": 48,
      "beatricetay": 1
    }
  },
  {
    "path": "src/test/java/seedu/recipe/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_GOAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_FRUIT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_GRAIN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_OTHER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_PROTEIN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_VEGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_STEP;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.RecipeBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.testutil.EditRecipeDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String VALID_FRUIT_TURKEY_SANDWICH \u003d \"300g, Tomato\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String VALID_FRUIT_FISH \u003d \"200g, Peach\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String VALID_GRAIN_TURKEY_SANDWICH \u003d \"300g, Wholemeal bread\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String VALID_GRAIN_FISH \u003d \"200g, Rice\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String VALID_PROTEIN_TURKEY_SANDWICH \u003d \"150g, Shredded Turkey\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String VALID_PROTEIN_FISH \u003d \"300g, Cod fish\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String VALID_VEGE_TURKEY_SANDWICH \u003d \"150g, Lettuce\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String VALID_VEGE_FISH \u003d \"300g, Tomato\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String VALID_OTHER_TURKEY_SANDWICH \u003d \"150g, Mayonnaise\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String VALID_OTHER_FISH \u003d \"300g, Sesame oil\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String VALID_NAME_TURKEY_SANDWICH \u003d \"Turkey Sandwich\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String VALID_NAME_FISH \u003d \"Steamed Fish\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String VALID_TIME_TURKEY_SANDWICH \u003d \"15\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String VALID_TIME_FISH \u003d \"40\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String VALID_STEP_TURKEY_SANDWICH \u003d \"Slice the turkey\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String VALID_STEP_FISH \u003d \"Remove fish stomach\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String VALID_GOAL_PROTEIN \u003d \"Bulk like the Hulk\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String VALID_GOAL_GRAIN \u003d \"Wholesome Wholemeal\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String FRUIT_DESC_TURKEY_SANDWICH \u003d \" \" + PREFIX_INGREDIENT_FRUIT + VALID_FRUIT_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String FRUIT_DESC_FISH \u003d \" \" + PREFIX_INGREDIENT_FRUIT + VALID_FRUIT_FISH;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String GRAIN_DESC_TURKEY_SANDWICH \u003d \" \" + PREFIX_INGREDIENT_GRAIN + VALID_GRAIN_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String GRAIN_DESC_FISH \u003d \" \" + PREFIX_INGREDIENT_GRAIN + VALID_GRAIN_FISH;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String NAME_DESC_TURKEY_SANDWICH \u003d \" \" + PREFIX_NAME + VALID_NAME_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String NAME_DESC_FISH \u003d \" \" + PREFIX_NAME + VALID_NAME_FISH;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String OTHER_DESC_TURKEY_SANDWICH \u003d \" \" + PREFIX_INGREDIENT_OTHER + VALID_OTHER_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String OTHER_DESC_FISH \u003d \" \" + PREFIX_INGREDIENT_OTHER + VALID_OTHER_FISH;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String PROTEIN_DESC_TURKEY_SANDWICH \u003d \" \" + PREFIX_INGREDIENT_PROTEIN"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + VALID_PROTEIN_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String PROTEIN_DESC_FISH \u003d \" \" + PREFIX_INGREDIENT_PROTEIN + VALID_PROTEIN_FISH;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String TIME_DESC_TURKEY_SANDWICH \u003d \" \" + PREFIX_TIME + VALID_TIME_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String TIME_DESC_FISH \u003d \" \" + PREFIX_TIME + VALID_TIME_FISH;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String VEGETABLE_DESC_TURKEY_SANDWICH \u003d \" \" + PREFIX_INGREDIENT_VEGE"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + VALID_VEGE_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String VEGETABLE_DESC_FISH \u003d \" \" + PREFIX_INGREDIENT_VEGE + VALID_VEGE_FISH;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String STEP_DESC_TURKEY_SANDWICH \u003d \" \" + PREFIX_STEP + VALID_STEP_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String STEP_DESC_FISH \u003d \" \" + PREFIX_STEP + VALID_STEP_FISH;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String GOAL_DESC_GRAIN \u003d \" \" + PREFIX_GOAL + VALID_GOAL_GRAIN;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String GOAL_DESC_PROTEIN \u003d \" \" + PREFIX_GOAL + VALID_GOAL_PROTEIN;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James!\"; // \u0027!\u0027 not allowed in names"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final String INVALID_TIME_DESC \u003d \" \" + PREFIX_TIME + \"911a\"; // \u0027a\u0027 not allowed in times"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final String INVALID_STEP_DESC \u003d \" \" + PREFIX_STEP + \"\"; // empty space"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String INVALID_GOAL_DESC \u003d \" \" + PREFIX_GOAL + \"bulking*\"; // \u0027*\u0027 not allowed in goals"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final EditCommand.EditRecipeDescriptor DESC_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final EditCommand.EditRecipeDescriptor DESC_FISH;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        DESC_TURKEY_SANDWICH \u003d new EditRecipeDescriptorBuilder().withName(VALID_NAME_TURKEY_SANDWICH)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .withTime(VALID_TIME_TURKEY_SANDWICH).withGrains(VALID_GRAIN_TURKEY_SANDWICH)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .withVegetables(VALID_VEGE_TURKEY_SANDWICH).withProteins(VALID_PROTEIN_TURKEY_SANDWICH)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .withFruits(VALID_FRUIT_TURKEY_SANDWICH).withOthers(VALID_OTHER_TURKEY_SANDWICH)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .withSteps(VALID_STEP_TURKEY_SANDWICH)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .withGoals(VALID_GOAL_GRAIN).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        DESC_FISH \u003d new EditRecipeDescriptorBuilder().withName(VALID_NAME_FISH)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .withTime(VALID_TIME_FISH).withGrains(VALID_GRAIN_FISH)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .withVegetables(VALID_VEGE_FISH).withProteins(VALID_PROTEIN_FISH)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .withFruits(VALID_FRUIT_FISH).withOthers(VALID_OTHER_FISH)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .withSteps(VALID_STEP_FISH)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .withGoals(VALID_GOAL_PROTEIN).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * - the address book, filtered recipe list and selected recipe in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        RecipeBook expectedAddressBook \u003d new RecipeBook(actualModel.getRecipeBook());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        List\u003cRecipe\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredRecipeList());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getRecipeBook());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredRecipeList());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the recipe at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static void showRecipeAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredRecipeList().size());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Recipe recipe \u003d model.getFilteredRecipeList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        final String[] splitName \u003d recipe.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        model.updateFilteredRecipeList(new NameContainsKeywordsPredicate(true, splitName[0]));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertEquals(1, model.getFilteredRecipeList().size());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 5,
      "tharshita": 11,
      "-": 67,
      "beatricetay": 74
    }
  },
  {
    "path": "src/test/java/seedu/recipe/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.showRecipeAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.TypicalIndexes.INDEX_SECOND_RECIPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.recipe.testutil.TypicalRecords.getTypicalRecordBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.plan.PlannedBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalRecipeBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            getTypicalRecordBook(), new PlannedBook());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Recipe recipeToDelete \u003d model.getFilteredRecipeList().get(INDEX_FIRST_RECIPE.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(new Index[] {INDEX_FIRST_RECIPE});"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String expectedMessageTemplate \u003d \"Deleted %1$s from recipe book!\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String expectedMessage \u003d String.format(expectedMessageTemplate, recipeToDelete.getName().toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getRecipeBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                model.getRecordBook(), new PlannedBook());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        expectedModel.deleteRecipe(recipeToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredRecipeList().size() + 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(new Index[] {outOfBoundIndex});"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        showRecipeAtIndex(model, INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Recipe recipeToDelete \u003d model.getFilteredRecipeList().get(INDEX_FIRST_RECIPE.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(new Index[] {INDEX_FIRST_RECIPE});"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String expectedMessageTemplate \u003d \"Deleted %1$s from recipe book!\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String expectedMessage \u003d String.format(expectedMessageTemplate, recipeToDelete.getName().toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getRecipeBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                model.getRecordBook(), new PlannedBook());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        expectedModel.deleteRecipe(recipeToDelete);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        showNoRecipe(expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        showRecipeAtIndex(model, INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_RECIPE;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of recipe book list"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getRecipeBook().getRecipeList().size());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(new Index[] {outOfBoundIndex});"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(new Index[] {INDEX_FIRST_RECIPE});"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(new Index[] {INDEX_SECOND_RECIPE});"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(new Index[] {INDEX_FIRST_RECIPE});"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // different recipe -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private void showNoRecipe(Model model) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        model.updateFilteredRecipeList(p -\u003e false);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertTrue(model.getFilteredRecipeList().isEmpty());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 13,
      "tharshita": 24,
      "-": 67,
      "beatricetay": 14
    }
  },
  {
    "path": "src/test/java/seedu/recipe/logic/commands/DeleteIngredientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "package seedu.recipe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.showRecipeAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.testutil.TypicalIndexes.INDEX_SECOND_RECIPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.testutil.TypicalIndexes.INDEX_THIRD_RECIPE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.testutil.TypicalRecords.getTypicalRecordBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.logic.commands.EditCommand.EditRecipeDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.model.plan.PlannedBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * {@code DeleteIngredientCommand}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class DeleteIngredientCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalRecipeBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            getTypicalRecordBook(), new PlannedBook());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Recipe recipeToDeleteIngredients \u003d model.getFilteredRecipeList().get(INDEX_SECOND_RECIPE.getZeroBased());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        EditRecipeDescriptor editRecipeDescriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        editRecipeDescriptor.setOthers(new TreeSet\u003c\u003e());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        DeleteIngredientCommand deleteIngredientCommand \u003d new DeleteIngredientCommand("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                INDEX_SECOND_RECIPE, editRecipeDescriptor);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String expectedMessageTemplate \u003d DeleteIngredientCommand.MESSAGE_DELETE_INGREDIENTS_SUCCESS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String expectedMessage \u003d String.format(expectedMessageTemplate, recipeToDeleteIngredients.getName().toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getRecipeBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                model.getRecordBook(), new PlannedBook());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Recipe expectedRecipe \u003d new RecipeBuilder().withName(\"Grilled Sandwich\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withTime(\"10\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withGrains(\"50g, Bread\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withSteps(\"Spread butter on bread\", \"Heat pan to medium heat\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withGoals(\"Wholesome Wholemeal\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        expectedModel.setRecipe(recipeToDeleteIngredients, expectedRecipe);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertCommandSuccess(deleteIngredientCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredRecipeList().size() + 1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        DeleteIngredientCommand deleteIngredientCommand \u003d new DeleteIngredientCommand("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                outOfBoundIndex, new EditRecipeDescriptor());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertCommandFailure(deleteIngredientCommand, model, Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        showRecipeAtIndex(model, INDEX_SECOND_RECIPE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Recipe recipeToDeleteIngredients \u003d model.getFilteredRecipeList().get(INDEX_FIRST_RECIPE.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        EditRecipeDescriptor editRecipeDescriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        editRecipeDescriptor.setOthers(new TreeSet\u003c\u003e());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        DeleteIngredientCommand deleteIngredientCommand \u003d new DeleteIngredientCommand("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                INDEX_FIRST_RECIPE, editRecipeDescriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String expectedMessageTemplate \u003d DeleteIngredientCommand.MESSAGE_DELETE_INGREDIENTS_SUCCESS;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String expectedMessage \u003d String.format(expectedMessageTemplate, recipeToDeleteIngredients.getName().toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getRecipeBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                model.getRecordBook(), new PlannedBook());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Recipe expectedRecipe \u003d new RecipeBuilder().withName(\"Grilled Sandwich\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withTime(\"10\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withGrains(\"50g, Bread\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withSteps(\"Spread butter on bread\", \"Heat pan to medium heat\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withGoals(\"Wholesome Wholemeal\").build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        expectedModel.setRecipe(recipeToDeleteIngredients, expectedRecipe);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertCommandSuccess(deleteIngredientCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        showRecipeAtIndex(model, INDEX_SECOND_RECIPE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_THIRD_RECIPE;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of recipe book list"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getRecipeBook().getRecipeList().size());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        DeleteIngredientCommand deleteIngredientCommand \u003d new DeleteIngredientCommand("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                outOfBoundIndex, new EditRecipeDescriptor());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertCommandFailure(deleteIngredientCommand, model, Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        EditRecipeDescriptor firstEditRecipeDescriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        EditRecipeDescriptor secondEditRecipeDescriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        secondEditRecipeDescriptor.setGrains(new TreeSet\u003c\u003e());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // Base command for comparison"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        DeleteIngredientCommand deleteIngredientFirstCommand \u003d new DeleteIngredientCommand("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                INDEX_SECOND_RECIPE, firstEditRecipeDescriptor);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // Different recipe, same EditRecipeDescriptor"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        DeleteIngredientCommand deleteIngredientSecondCommand \u003d new DeleteIngredientCommand("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                INDEX_THIRD_RECIPE, firstEditRecipeDescriptor);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // Same recipe, different EditRecipeDescriptor"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        DeleteIngredientCommand deleteIngredientThirdCommand \u003d new DeleteIngredientCommand("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                INDEX_SECOND_RECIPE, secondEditRecipeDescriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertTrue(deleteIngredientFirstCommand.equals(deleteIngredientFirstCommand));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        DeleteIngredientCommand deleteIngredientFirstCommandCopy \u003d new DeleteIngredientCommand("
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                INDEX_SECOND_RECIPE, firstEditRecipeDescriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertTrue(deleteIngredientFirstCommand.equals(deleteIngredientFirstCommandCopy));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertFalse(deleteIngredientFirstCommand.equals(1));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertFalse(deleteIngredientFirstCommand.equals(null));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // different recipe, same EditRecipeDescriptor -\u003e returns false"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertFalse(deleteIngredientFirstCommand.equals(deleteIngredientSecondCommand));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // same recipe, different EditRecipeDescriptor -\u003e returns false"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertFalse(deleteIngredientFirstCommand.equals(deleteIngredientThirdCommand));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 144
    }
  },
  {
    "path": "src/test/java/seedu/recipe/logic/commands/DeleteStepCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "package seedu.recipe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.showRecipeAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.testutil.TypicalIndexes.INDEX_SECOND_RECIPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.testutil.TypicalRecords.getTypicalRecordBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.model.plan.PlannedBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * {@code DeleteStepCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class DeleteStepCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalRecipeBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            getTypicalRecordBook(), new PlannedBook());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final Integer[] indexSecondStep \u003d new Integer[] {1}; // Steps are zero-indexed by design"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final Integer[] indexFirstStep \u003d new Integer[] {0};"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final Integer[] indexOutOfBoundsStep \u003d new Integer[] {Integer.MAX_VALUE};"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void execute_validRecipeAndStepIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Recipe recipeToDeleteSteps \u003d model.getFilteredRecipeList().get(INDEX_SECOND_RECIPE.getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        DeleteStepCommand deleteStepCommand \u003d new DeleteStepCommand(INDEX_SECOND_RECIPE, indexSecondStep);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String expectedMessageTemplate \u003d DeleteStepCommand.MESSAGE_DELETE_STEPS_SUCCESS;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String expectedMessage \u003d String.format(expectedMessageTemplate, recipeToDeleteSteps.getName().toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getRecipeBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                model.getRecordBook(), new PlannedBook());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Recipe expectedRecipe \u003d new RecipeBuilder().withName(\"Grilled Sandwich\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withTime(\"10\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withGrains(\"50g, Bread\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withOthers(\"50g, Cheese\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withSteps(\"Spread butter on bread\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withGoals(\"Wholesome Wholemeal\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        expectedModel.setRecipe(recipeToDeleteSteps, expectedRecipe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertCommandSuccess(deleteStepCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredRecipeList().size() + 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        DeleteStepCommand deleteStepCommand \u003d new DeleteStepCommand(outOfBoundIndex, indexSecondStep);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertCommandFailure(deleteStepCommand, model, Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void execute_invalidStepIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        DeleteStepCommand deleteStepCommand \u003d new DeleteStepCommand(INDEX_FIRST_RECIPE, indexOutOfBoundsStep);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertCommandFailure(deleteStepCommand, model, DeleteStepCommand.MESSAGE_INVALID_STEP_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void execute_invalidIndexAndStepIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredRecipeList().size() + 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        DeleteStepCommand deleteStepCommand \u003d new DeleteStepCommand(outOfBoundIndex, indexOutOfBoundsStep);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // The error for RECIPE index out of bounds should be thrown first even though STEP index is also out of bounds"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertCommandFailure(deleteStepCommand, model, Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void execute_validRecipeAndStepIndexFilteredList_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        showRecipeAtIndex(model, INDEX_SECOND_RECIPE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Recipe recipeToDeleteSteps \u003d model.getFilteredRecipeList().get(INDEX_FIRST_RECIPE.getZeroBased());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        DeleteStepCommand deleteStepCommand \u003d new DeleteStepCommand(INDEX_FIRST_RECIPE, indexSecondStep);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String expectedMessageTemplate \u003d DeleteStepCommand.MESSAGE_DELETE_STEPS_SUCCESS;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String expectedMessage \u003d String.format(expectedMessageTemplate, recipeToDeleteSteps.getName().toString());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getRecipeBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                model.getRecordBook(), new PlannedBook());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Recipe expectedRecipe \u003d new RecipeBuilder().withName(\"Grilled Sandwich\")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withTime(\"10\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withGrains(\"50g, Bread\")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withOthers(\"50g, Cheese\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withSteps(\"Spread butter on bread\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withGoals(\"Wholesome Wholemeal\").build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        expectedModel.setRecipe(recipeToDeleteSteps, expectedRecipe);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertCommandSuccess(deleteStepCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        showRecipeAtIndex(model, INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_RECIPE;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // Ensures that outOfBoundIndex is still in bounds of recipe book list"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getRecipeBook().getRecipeList().size());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        DeleteStepCommand deleteStepCommand \u003d new DeleteStepCommand(outOfBoundIndex, indexSecondStep);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertCommandFailure(deleteStepCommand, model, Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void execute_invalidStepIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        showRecipeAtIndex(model, INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        DeleteStepCommand deleteStepCommand \u003d new DeleteStepCommand(INDEX_FIRST_RECIPE, indexOutOfBoundsStep);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertCommandFailure(deleteStepCommand, model, DeleteStepCommand.MESSAGE_INVALID_STEP_INDEX);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void execute_invalidIndexAndStepIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        showRecipeAtIndex(model, INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_RECIPE;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // Ensures that outOfBoundIndex is still in bounds of recipe book list"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getRecipeBook().getRecipeList().size());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        DeleteStepCommand deleteStepCommand \u003d new DeleteStepCommand(outOfBoundIndex, indexOutOfBoundsStep);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // The error for RECIPE index out of bounds should be thrown first even though STEP index is also out of bounds"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertCommandFailure(deleteStepCommand, model, Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // Base command for comparison"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        DeleteStepCommand deleteStepFirstCommand \u003d new DeleteStepCommand(INDEX_FIRST_RECIPE, indexSecondStep);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // Different recipe, same step index"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        DeleteStepCommand deleteStepSecondCommand \u003d new DeleteStepCommand(INDEX_SECOND_RECIPE, indexSecondStep);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // Same recipe, different step index"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        DeleteStepCommand deleteStepThirdCommand \u003d new DeleteStepCommand(INDEX_FIRST_RECIPE, indexFirstStep);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertTrue(deleteStepFirstCommand.equals(deleteStepFirstCommand));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        DeleteStepCommand deleteStepFirstCommandCopy \u003d new DeleteStepCommand(INDEX_FIRST_RECIPE, indexSecondStep);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertTrue(deleteStepFirstCommand.equals(deleteStepFirstCommandCopy));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertFalse(deleteStepFirstCommand.equals(1));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertFalse(deleteStepFirstCommand.equals(null));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // different recipe, same step index -\u003e returns false"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertFalse(deleteStepFirstCommand.equals(deleteStepSecondCommand));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // same recipe, different step index -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertFalse(deleteStepFirstCommand.equals(deleteStepThirdCommand));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 168
    }
  },
  {
    "path": "src/test/java/seedu/recipe/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.DESC_FISH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.DESC_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.VALID_GOAL_PROTEIN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.VALID_NAME_FISH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.VALID_TIME_FISH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.showRecipeAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.TypicalIndexes.INDEX_SECOND_RECIPE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.recipe.testutil.TypicalRecords.getTypicalRecordBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.EditCommand.EditRecipeDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.RecipeBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.cooked.CookedRecordBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.plan.PlannedBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.testutil.EditRecipeDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalRecipeBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            getTypicalRecordBook(), new PlannedBook());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    // todo: bug: test might fail sometimes if recipe at TypicalRecipes index 0 has ingredients"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Recipe editedRecipe \u003d new RecipeBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        EditRecipeDescriptor descriptor \u003d new EditRecipeDescriptorBuilder(editedRecipe).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_RECIPE, descriptor);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_RECIPE_SUCCESS, editedRecipe);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new RecipeBook(model.getRecipeBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                new CookedRecordBook(model.getRecordBook()), new PlannedBook());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        expectedModel.setRecipe(model.getFilteredRecipeList().get(0), editedRecipe);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Index indexLastRecipe \u003d Index.fromOneBased(model.getFilteredRecipeList().size());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Recipe lastRecipe \u003d model.getFilteredRecipeList().get(indexLastRecipe.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        RecipeBuilder recipeInList \u003d new RecipeBuilder(lastRecipe);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Recipe editedRecipe \u003d recipeInList.withName(VALID_NAME_FISH).withTime(VALID_TIME_FISH)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .withGoals(VALID_GOAL_PROTEIN).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        EditRecipeDescriptor descriptor \u003d new EditRecipeDescriptorBuilder().withName(VALID_NAME_FISH)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .withTime(VALID_TIME_FISH).withGoals(VALID_GOAL_PROTEIN).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastRecipe, descriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_RECIPE_SUCCESS, editedRecipe);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new RecipeBook(model.getRecipeBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                 new CookedRecordBook(model.getRecordBook()), new PlannedBook());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        expectedModel.setRecipe(lastRecipe, editedRecipe);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_RECIPE, new EditRecipeDescriptor());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Recipe editedRecipe \u003d model.getFilteredRecipeList().get(INDEX_FIRST_RECIPE.getZeroBased());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_RECIPE_SUCCESS, editedRecipe);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new RecipeBook(model.getRecipeBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                new CookedRecordBook(model.getRecordBook()), new PlannedBook());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        showRecipeAtIndex(model, INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Recipe recipeInFilteredList \u003d model.getFilteredRecipeList().get(INDEX_FIRST_RECIPE.getZeroBased());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Recipe editedRecipe \u003d new RecipeBuilder(recipeInFilteredList).withName(VALID_NAME_FISH).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_RECIPE,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                new EditRecipeDescriptorBuilder().withName(VALID_NAME_FISH).build());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_RECIPE_SUCCESS, editedRecipe);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new RecipeBook(model.getRecipeBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                new CookedRecordBook(model.getRecordBook()), new PlannedBook());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        expectedModel.setRecipe(model.getFilteredRecipeList().get(0), editedRecipe);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void execute_duplicateRecipeUnfilteredList_failure() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Recipe firstRecipe \u003d model.getFilteredRecipeList().get(INDEX_FIRST_RECIPE.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        EditRecipeDescriptor descriptor \u003d new EditRecipeDescriptorBuilder(firstRecipe).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_RECIPE, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_RECIPE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void execute_duplicateRecipeFilteredList_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        showRecipeAtIndex(model, INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // edit recipe in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Recipe recipeInList \u003d model.getRecipeBook().getRecipeList().get(INDEX_SECOND_RECIPE.getZeroBased());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_RECIPE,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                new EditRecipeDescriptorBuilder(recipeInList).build());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_RECIPE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void execute_invalidRecipeIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredRecipeList().size() + 1);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        EditRecipeDescriptor descriptor \u003d new EditRecipeDescriptorBuilder().withName(VALID_NAME_FISH).build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void execute_invalidRecipeIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        showRecipeAtIndex(model, INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_RECIPE;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getRecipeBook().getRecipeList().size());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                new EditRecipeDescriptorBuilder().withName(VALID_NAME_FISH).build());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_RECIPE, DESC_TURKEY_SANDWICH);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        EditRecipeDescriptor copyDescriptor \u003d new EditRecipeDescriptor(DESC_TURKEY_SANDWICH);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_RECIPE, copyDescriptor);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_RECIPE, DESC_TURKEY_SANDWICH)));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_RECIPE, DESC_FISH)));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 2,
      "tharshita": 53,
      "-": 90,
      "beatricetay": 40
    }
  },
  {
    "path": "src/test/java/seedu/recipe/logic/commands/EditIngredientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "package seedu.recipe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.showRecipeAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.testutil.TypicalIndexes.INDEX_SECOND_RECIPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.testutil.TypicalIndexes.INDEX_THIRD_RECIPE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.testutil.TypicalRecords.getTypicalRecordBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.logic.commands.EditCommand.EditRecipeDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.model.plan.PlannedBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Grain;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Ingredient;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Other;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * {@code EditIngredientCommand}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class EditIngredientCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalRecipeBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            getTypicalRecordBook(), new PlannedBook());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final Other otherWithNewQuantity \u003d new Other(\"Cheese\", RecipeBuilder.DEFAULT_QUANTITY);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final Grain grainWithNewQuantity \u003d new Grain(\"Bread\", RecipeBuilder.DEFAULT_QUANTITY);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void execute_validIndexAndIngredientFieldUnfilteredList_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Recipe recipeToEditIngredients \u003d model.getFilteredRecipeList().get(INDEX_SECOND_RECIPE.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        EditRecipeDescriptor editRecipeDescriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Set\u003cOther\u003e editedOther \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        editedOther.add(otherWithNewQuantity);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        editRecipeDescriptor.setOthers(editedOther);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        EditIngredientCommand editIngredientCommand \u003d new EditIngredientCommand("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                INDEX_SECOND_RECIPE, editRecipeDescriptor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String expectedMessageTemplate \u003d EditIngredientCommand.MESSAGE_EDIT_INGREDIENTS_SUCCESS;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String expectedMessage \u003d String.format(expectedMessageTemplate, recipeToEditIngredients.getName().toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getRecipeBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                model.getRecordBook(), new PlannedBook());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Recipe expectedRecipe \u003d new RecipeBuilder().withName(\"Grilled Sandwich\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withTime(\"10\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withGrains(\"50g, Bread\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withOthers(\"100g, Cheese\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withSteps(\"Spread butter on bread\", \"Heat pan to medium heat\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withGoals(\"Wholesome Wholemeal\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        expectedModel.setRecipe(recipeToEditIngredients, expectedRecipe);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertCommandSuccess(editIngredientCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredRecipeList().size() + 1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        EditRecipeDescriptor editRecipeDescriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Set\u003cOther\u003e editedOther \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        editedOther.add(otherWithNewQuantity);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        editRecipeDescriptor.setOthers(editedOther);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        EditIngredientCommand editIngredientCommand \u003d new EditIngredientCommand(outOfBoundIndex, editRecipeDescriptor);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertCommandFailure(editIngredientCommand, model, Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void execute_invalidIngredientFieldUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        EditRecipeDescriptor editRecipeDescriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        editRecipeDescriptor.setOthers(new TreeSet\u003c\u003e());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        EditIngredientCommand editIngredientCommand \u003d new EditIngredientCommand("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                INDEX_SECOND_RECIPE, editRecipeDescriptor);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String expectedMessage \u003d Ingredient.MESSAGE_MISSING_FIELD;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertCommandFailure(editIngredientCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void execute_validIndexAndIngredientFieldFilteredList_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        showRecipeAtIndex(model, INDEX_SECOND_RECIPE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Recipe recipeToEditIngredients \u003d model.getFilteredRecipeList().get(INDEX_FIRST_RECIPE.getZeroBased());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        EditRecipeDescriptor editRecipeDescriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Set\u003cOther\u003e editedOther \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        editedOther.add(otherWithNewQuantity);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        editRecipeDescriptor.setOthers(editedOther);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        EditIngredientCommand editIngredientCommand \u003d new EditIngredientCommand("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                INDEX_FIRST_RECIPE, editRecipeDescriptor);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String expectedMessageTemplate \u003d EditIngredientCommand.MESSAGE_EDIT_INGREDIENTS_SUCCESS;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String expectedMessage \u003d String.format(expectedMessageTemplate, recipeToEditIngredients.getName().toString());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getRecipeBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                model.getRecordBook(), new PlannedBook());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Recipe expectedRecipe \u003d new RecipeBuilder().withName(\"Grilled Sandwich\")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withTime(\"10\")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withGrains(\"50g, Bread\")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withOthers(\"100g, Cheese\")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withSteps(\"Spread butter on bread\", \"Heat pan to medium heat\")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withGoals(\"Wholesome Wholemeal\").build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        expectedModel.setRecipe(recipeToEditIngredients, expectedRecipe);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertCommandSuccess(editIngredientCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        showRecipeAtIndex(model, INDEX_SECOND_RECIPE);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_THIRD_RECIPE;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of recipe book list"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getRecipeBook().getRecipeList().size());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        EditRecipeDescriptor editRecipeDescriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Set\u003cOther\u003e editedOther \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        editedOther.add(otherWithNewQuantity);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        editRecipeDescriptor.setOthers(editedOther);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        EditIngredientCommand editIngredientCommand \u003d new EditIngredientCommand(outOfBoundIndex, editRecipeDescriptor);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertCommandFailure(editIngredientCommand, model, Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void execute_invalidIngredientFieldFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        showRecipeAtIndex(model, INDEX_SECOND_RECIPE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        EditRecipeDescriptor editRecipeDescriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        editRecipeDescriptor.setOthers(new TreeSet\u003c\u003e());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        EditIngredientCommand editIngredientCommand \u003d new EditIngredientCommand("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                INDEX_FIRST_RECIPE, editRecipeDescriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String expectedMessage \u003d Ingredient.MESSAGE_MISSING_FIELD;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertCommandFailure(editIngredientCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // Create first EditRecipeDescriptor"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Set\u003cOther\u003e editedOther \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        editedOther.add(otherWithNewQuantity);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        EditRecipeDescriptor firstEditRecipeDescriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        firstEditRecipeDescriptor.setOthers(editedOther);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // Create different EditRecipeDescriptor"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Set\u003cGrain\u003e editedGrain \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        editedGrain.add(grainWithNewQuantity);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        EditRecipeDescriptor secondEditRecipeDescriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        secondEditRecipeDescriptor.setGrains(editedGrain);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // Base command for comparison"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        EditIngredientCommand editIngredientFirstCommand \u003d new EditIngredientCommand("
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                INDEX_SECOND_RECIPE, firstEditRecipeDescriptor);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // Different recipe, same EditRecipeDescriptor"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        EditIngredientCommand editIngredientSecondCommand \u003d new EditIngredientCommand("
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                INDEX_THIRD_RECIPE, firstEditRecipeDescriptor);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // Same recipe, different EditRecipeDescriptor"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        EditIngredientCommand editIngredientThirdCommand \u003d new EditIngredientCommand("
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                INDEX_SECOND_RECIPE, secondEditRecipeDescriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertTrue(editIngredientFirstCommand.equals(editIngredientFirstCommand));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        EditIngredientCommand editIngredientFirstCommandCopy \u003d new EditIngredientCommand("
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                INDEX_SECOND_RECIPE, firstEditRecipeDescriptor);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertTrue(editIngredientFirstCommand.equals(editIngredientFirstCommandCopy));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertFalse(editIngredientFirstCommand.equals(1));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertFalse(editIngredientFirstCommand.equals(null));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // different recipe, same EditRecipeDescriptor -\u003e returns false"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertFalse(editIngredientFirstCommand.equals(editIngredientSecondCommand));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // same recipe, different EditRecipeDescriptor -\u003e returns false"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertFalse(editIngredientFirstCommand.equals(editIngredientThirdCommand));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 205
    }
  },
  {
    "path": "src/test/java/seedu/recipe/logic/commands/EditRecipeDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.DESC_FISH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.DESC_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.VALID_GOAL_PROTEIN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.VALID_NAME_FISH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.VALID_STEP_FISH;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.VALID_TIME_FISH;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.EditCommand.EditRecipeDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.testutil.EditRecipeDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class EditRecipeDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        EditRecipeDescriptor descriptorWithSameValues \u003d new EditRecipeDescriptor(DESC_TURKEY_SANDWICH);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertTrue(DESC_TURKEY_SANDWICH.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertTrue(DESC_TURKEY_SANDWICH.equals(DESC_TURKEY_SANDWICH));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(DESC_TURKEY_SANDWICH.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(DESC_TURKEY_SANDWICH.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(DESC_TURKEY_SANDWICH.equals(DESC_FISH));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        EditRecipeDescriptor editedAmy \u003d new EditRecipeDescriptorBuilder(DESC_TURKEY_SANDWICH)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .withName(VALID_NAME_FISH).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(DESC_TURKEY_SANDWICH.equals(editedAmy));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // different time -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        editedAmy \u003d new EditRecipeDescriptorBuilder(DESC_TURKEY_SANDWICH).withTime(VALID_TIME_FISH).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(DESC_TURKEY_SANDWICH.equals(editedAmy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // different step -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        editedAmy \u003d new EditRecipeDescriptorBuilder(DESC_TURKEY_SANDWICH).withSteps(VALID_STEP_FISH).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(DESC_TURKEY_SANDWICH.equals(editedAmy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // different goals -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        editedAmy \u003d new EditRecipeDescriptorBuilder(DESC_TURKEY_SANDWICH).withGoals(VALID_GOAL_PROTEIN).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(DESC_TURKEY_SANDWICH.equals(editedAmy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 1,
      "tharshita": 4,
      "-": 26,
      "beatricetay": 24
    }
  },
  {
    "path": "src/test/java/seedu/recipe/logic/commands/EditStepCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "package seedu.recipe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.showRecipeAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.testutil.TypicalIndexes.INDEX_SECOND_RECIPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.testutil.TypicalRecords.getTypicalRecordBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.model.plan.PlannedBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.model.recipe.Step;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * {@code EditStepCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class EditStepCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalRecipeBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            getTypicalRecordBook(), new PlannedBook());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final int indexFirstStep \u003d 0; // Steps are zero-indexed by design"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final int indexSecondStep \u003d 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final int indexOutOfBoundsStep \u003d Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final Step editedStep \u003d new Step(\"Edited step\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final Step differentStep \u003d new Step(\"Different step\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void execute_validRecipeAndStepIndexAndStepFieldUnfilteredList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Recipe recipeToEditSteps \u003d model.getFilteredRecipeList().get(INDEX_SECOND_RECIPE.getZeroBased());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        EditStepCommand editStepCommand \u003d new EditStepCommand(INDEX_SECOND_RECIPE, indexFirstStep, editedStep);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String expectedMessageTemplate \u003d EditStepCommand.MESSAGE_EDIT_STEPS_SUCCESS;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String expectedMessage \u003d String.format(expectedMessageTemplate,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                indexFirstStep + 1, recipeToEditSteps.getName().toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getRecipeBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                model.getRecordBook(), new PlannedBook());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Recipe expectedRecipe \u003d new RecipeBuilder().withName(\"Grilled Sandwich\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withTime(\"10\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withGrains(\"50g, Bread\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withOthers(\"50g, Cheese\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withSteps(\"Edited step\", \"Heat pan to medium heat\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withGoals(\"Wholesome Wholemeal\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        expectedModel.setRecipe(recipeToEditSteps, expectedRecipe);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertCommandSuccess(editStepCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredRecipeList().size() + 1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        EditStepCommand editStepCommand \u003d new EditStepCommand(outOfBoundIndex, indexFirstStep, editedStep);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertCommandFailure(editStepCommand, model, Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void execute_invalidStepIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        EditStepCommand editStepCommand \u003d new EditStepCommand(INDEX_FIRST_RECIPE, indexOutOfBoundsStep, editedStep);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertCommandFailure(editStepCommand, model, EditStepCommand.MESSAGE_INVALID_STEP_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void execute_invalidIndexAndStepIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredRecipeList().size() + 1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        EditStepCommand editStepCommand \u003d new EditStepCommand(outOfBoundIndex, indexOutOfBoundsStep, editedStep);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // The error for RECIPE index out of bounds should be thrown first even though STEP index is also out of bounds"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertCommandFailure(editStepCommand, model, Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void execute_validRecipeAndStepIndexAndStepFieldFilteredList_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        showRecipeAtIndex(model, INDEX_SECOND_RECIPE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Recipe recipeToEditSteps \u003d model.getFilteredRecipeList().get(INDEX_FIRST_RECIPE.getZeroBased());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        EditStepCommand editStepCommand \u003d new EditStepCommand(INDEX_FIRST_RECIPE, indexFirstStep, editedStep);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String expectedMessageTemplate \u003d EditStepCommand.MESSAGE_EDIT_STEPS_SUCCESS;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String expectedMessage \u003d String.format(expectedMessageTemplate,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                indexFirstStep + 1, recipeToEditSteps.getName().toString());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getRecipeBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                model.getRecordBook(), new PlannedBook());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Recipe expectedRecipe \u003d new RecipeBuilder().withName(\"Grilled Sandwich\")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withTime(\"10\")"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withGrains(\"50g, Bread\")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withOthers(\"50g, Cheese\")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withSteps(\"Edited step\", \"Heat pan to medium heat\")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withGoals(\"Wholesome Wholemeal\").build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        expectedModel.setRecipe(recipeToEditSteps, expectedRecipe);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertCommandSuccess(editStepCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        showRecipeAtIndex(model, INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_RECIPE;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // Ensures that outOfBoundIndex is still in bounds of recipe book list"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getRecipeBook().getRecipeList().size());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        EditStepCommand editStepCommand \u003d new EditStepCommand(outOfBoundIndex, indexFirstStep, editedStep);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertCommandFailure(editStepCommand, model, Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void execute_invalidStepIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        showRecipeAtIndex(model, INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        EditStepCommand editStepCommand \u003d new EditStepCommand(INDEX_FIRST_RECIPE, indexOutOfBoundsStep, editedStep);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertCommandFailure(editStepCommand, model, EditStepCommand.MESSAGE_INVALID_STEP_INDEX);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void execute_invalidIndexAndStepIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        showRecipeAtIndex(model, INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_RECIPE;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // Ensures that outOfBoundIndex is still in bounds of recipe book list"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getRecipeBook().getRecipeList().size());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        EditStepCommand editStepCommand \u003d new EditStepCommand(outOfBoundIndex, indexOutOfBoundsStep, editedStep);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // The error for RECIPE index out of bounds should be thrown first even though STEP index is also out of bounds"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertCommandFailure(editStepCommand, model, Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // Base command for comparison"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        EditStepCommand editStepFirstCommand \u003d new EditStepCommand(INDEX_FIRST_RECIPE, indexFirstStep, editedStep);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // Different recipe, same step index, same step"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        EditStepCommand editStepSecondCommand \u003d new EditStepCommand(INDEX_SECOND_RECIPE, indexFirstStep, editedStep);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // Same recipe, same step index, different step"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        EditStepCommand editStepThirdCommand \u003d new EditStepCommand(INDEX_FIRST_RECIPE, indexFirstStep, differentStep);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // Same recipe, different step index, same step"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        EditStepCommand editStepFourthCommand \u003d new EditStepCommand(INDEX_FIRST_RECIPE, indexSecondStep, editedStep);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertTrue(editStepFirstCommand.equals(editStepFirstCommand));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        EditStepCommand editStepFirstCommandCopy \u003d new EditStepCommand("
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                INDEX_FIRST_RECIPE, indexFirstStep, editedStep);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertTrue(editStepFirstCommand.equals(editStepFirstCommandCopy));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertFalse(editStepFirstCommand.equals(1));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertFalse(editStepFirstCommand.equals(null));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // different recipe, same step index, same step -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertFalse(editStepFirstCommand.equals(editStepSecondCommand));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // same recipe, same step index, different step -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertFalse(editStepFirstCommand.equals(editStepThirdCommand));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // same recipe, different step index, same step -\u003e returns false"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertFalse(editStepFirstCommand.equals(editStepFourthCommand));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 179
    }
  },
  {
    "path": "src/test/java/seedu/recipe/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, null, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 1,
      "-": 14,
      "beatricetay": 5
    }
  },
  {
    "path": "src/test/java/seedu/recipe/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.commons.core.Messages.MESSAGE_RECIPES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.testutil.TypicalRecipes.BOILED_CHICKEN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.testutil.TypicalRecipes.OMELET;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.testutil.TypicalRecipes.STEAMED_EGG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.testutil.TypicalRecipes.TUNA_BREAD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.recipe.testutil.TypicalRecords.getTypicalRecordBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.plan.PlannedBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalRecipeBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            getTypicalRecordBook(), new PlannedBook());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalRecipeBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            getTypicalRecordBook(), new PlannedBook());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // Base predicate for comparison"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                new NameContainsKeywordsPredicate(true, \"first\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // Same isStrict, different keywords"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                new NameContainsKeywordsPredicate(true, \"second\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // Different isStrict, same keywords"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        NameContainsKeywordsPredicate thirdPredicate \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                new NameContainsKeywordsPredicate(false, \"first\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        FindCommand findThirdCommand \u003d new FindCommand(thirdPredicate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // same isStrict, different keywords -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // different isStrict, same keywords -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertFalse(findFirstCommand.equals(findThirdCommand));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void execute_zeroKeywords_throwsParseException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e preparePredicate(\" \"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void execute_multipleKeywordsStrict_multipleRecipesFound() throws ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_RECIPES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"/strict Boiled Omelet Egg\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        expectedModel.updateFilteredRecipeList(predicate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertEquals(Arrays.asList(BOILED_CHICKEN, OMELET, STEAMED_EGG), model.getFilteredRecipeList());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void execute_multipleKeywordsNonStrict_multipleRecipesFound() throws ParseException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_RECIPES_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"ea\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        expectedModel.updateFilteredRecipeList(predicate);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertEquals(Arrays.asList(STEAMED_EGG, TUNA_BREAD), model.getFilteredRecipeList());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String trimmedArgs \u003d userInput.trim();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (nameKeywords[0].toLowerCase().equals(\"/strict\")) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (nameKeywords.length \u003c 2) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return new NameContainsKeywordsPredicate(true,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    nameKeywords[1].replaceAll(\"\\\\s{2,}\", \" \"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return new NameContainsKeywordsPredicate(false,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    trimmedArgs.replaceAll(\"\\\\s{2,}\", \" \"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 52,
      "tharshita": 7,
      "-": 53,
      "beatricetay": 9
    }
  },
  {
    "path": "src/test/java/seedu/recipe/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, null, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 1,
      "-": 14,
      "beatricetay": 5
    }
  },
  {
    "path": "src/test/java/seedu/recipe/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.showRecipeAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.recipe.testutil.TypicalRecords.getTypicalRecordBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.plan.PlannedBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        model \u003d new ModelManager(getTypicalRecipeBook(), new UserPrefs(), getTypicalRecordBook(), new PlannedBook());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getRecipeBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                model.getRecordBook(), new PlannedBook());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        showRecipeAtIndex(model, INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 7,
      "-": 28,
      "beatricetay": 9
    }
  },
  {
    "path": "src/test/java/seedu/recipe/logic/commands/ListGoalsCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.ListGoalsCommand.LIST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class ListGoalsCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void execute_listGoals_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(LIST, false, null, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertCommandSuccess(new ListGoalsCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 15,
      "beatricetay": 5
    }
  },
  {
    "path": "src/test/java/seedu/recipe/logic/commands/SwitchCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.SwitchCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.ui.tab.Tab;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "class SwitchCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void execute_viewPlanning_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                new CommandResult(MESSAGE_SUCCESS, false, Tab.PLANNING, false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertCommandSuccess(new SwitchCommand(Tab.PLANNING), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void execute_viewRecipes_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                new CommandResult(MESSAGE_SUCCESS, false, Tab.RECIPES, false);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertCommandSuccess(new SwitchCommand(Tab.RECIPES), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 25,
      "beatricetay": 6
    }
  },
  {
    "path": "src/test/java/seedu/recipe/logic/commands/plan/PlanCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.commands.plan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.TypicalDates.DATE_IN_FUTURE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.TypicalRecords.getTypicalRecordBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.plan.PlannedBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "class PlanCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalRecipeBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            getTypicalRecordBook(), new PlannedBook());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        // null index, null date"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new PlanCommand(null, null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        // null index, valid date"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new PlanCommand(null, DATE_IN_FUTURE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        // valid index, null date"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new PlanCommand(INDEX_FIRST_RECIPE, null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "beatricetay": 33
    }
  },
  {
    "path": "src/test/java/seedu/recipe/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.FRUIT_DESC_FISH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.FRUIT_DESC_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.GOAL_DESC_GRAIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.GOAL_DESC_PROTEIN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.GRAIN_DESC_FISH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.GRAIN_DESC_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.INVALID_GOAL_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.INVALID_STEP_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.INVALID_TIME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.NAME_DESC_FISH;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.NAME_DESC_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.OTHER_DESC_FISH;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.OTHER_DESC_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.PROTEIN_DESC_FISH;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.PROTEIN_DESC_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.STEP_DESC_FISH;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.STEP_DESC_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.TIME_DESC_FISH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.TIME_DESC_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.VALID_GOAL_GRAIN;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.VALID_GOAL_PROTEIN;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.VALID_NAME_FISH;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.VALID_STEP_FISH;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.VALID_TIME_FISH;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.VEGETABLE_DESC_FISH;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.VEGETABLE_DESC_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.TypicalRecipes.FISH;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.TypicalRecipes.TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.goal.Goal;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Step;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Time;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Recipe expectedRecipe \u003d new RecipeBuilder(FISH).withGoals(VALID_GOAL_GRAIN).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_FISH + TIME_DESC_FISH + STEP_DESC_FISH"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                + GRAIN_DESC_FISH + VEGETABLE_DESC_FISH + PROTEIN_DESC_FISH + FRUIT_DESC_FISH + OTHER_DESC_FISH"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                + GOAL_DESC_GRAIN, new AddCommand(expectedRecipe));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_TURKEY_SANDWICH + NAME_DESC_FISH + TIME_DESC_FISH + STEP_DESC_FISH"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                + GRAIN_DESC_FISH + VEGETABLE_DESC_FISH + PROTEIN_DESC_FISH + FRUIT_DESC_FISH + OTHER_DESC_FISH"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                + GOAL_DESC_GRAIN, new AddCommand(expectedRecipe));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // multiple times - last time accepted"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_FISH + TIME_DESC_TURKEY_SANDWICH + TIME_DESC_FISH + STEP_DESC_FISH"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                + GRAIN_DESC_FISH + VEGETABLE_DESC_FISH + PROTEIN_DESC_FISH + FRUIT_DESC_FISH + OTHER_DESC_FISH"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                + GOAL_DESC_GRAIN, new AddCommand(expectedRecipe));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // multiple goals - all accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Recipe expectedRecipeMultipleGoals \u003d new RecipeBuilder(FISH).withGoals(VALID_GOAL_GRAIN, VALID_GOAL_PROTEIN)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_FISH + TIME_DESC_FISH + STEP_DESC_FISH"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                + GRAIN_DESC_FISH + VEGETABLE_DESC_FISH + PROTEIN_DESC_FISH + FRUIT_DESC_FISH + OTHER_DESC_FISH"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                + GOAL_DESC_PROTEIN + GOAL_DESC_GRAIN, new AddCommand(expectedRecipeMultipleGoals));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // zero goals"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Recipe expectedRecipe \u003d new RecipeBuilder(TURKEY_SANDWICH).withGoals().build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_TURKEY_SANDWICH + TIME_DESC_TURKEY_SANDWICH"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                + STEP_DESC_TURKEY_SANDWICH + GRAIN_DESC_TURKEY_SANDWICH + VEGETABLE_DESC_TURKEY_SANDWICH"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                + PROTEIN_DESC_TURKEY_SANDWICH + FRUIT_DESC_TURKEY_SANDWICH + OTHER_DESC_TURKEY_SANDWICH,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                new AddCommand(expectedRecipe));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_FISH + TIME_DESC_FISH + STEP_DESC_FISH, expectedMessage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // missing time prefix"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_FISH + VALID_TIME_FISH + STEP_DESC_FISH, expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        // missing ingredient prefix"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_FISH + TIME_DESC_FISH + VALID_STEP_FISH, expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_FISH + VALID_TIME_FISH + VALID_STEP_FISH, expectedMessage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + TIME_DESC_FISH + STEP_DESC_FISH"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                + GRAIN_DESC_FISH + VEGETABLE_DESC_FISH + PROTEIN_DESC_FISH + FRUIT_DESC_FISH + OTHER_DESC_FISH"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                + GOAL_DESC_PROTEIN + GOAL_DESC_GRAIN, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // invalid time"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_FISH + INVALID_TIME_DESC + STEP_DESC_FISH"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                + GRAIN_DESC_FISH + VEGETABLE_DESC_FISH + PROTEIN_DESC_FISH + FRUIT_DESC_FISH + OTHER_DESC_FISH"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                + GOAL_DESC_PROTEIN + GOAL_DESC_GRAIN, Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // invalid step"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_FISH + TIME_DESC_FISH + INVALID_STEP_DESC"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                + GRAIN_DESC_FISH + VEGETABLE_DESC_FISH + PROTEIN_DESC_FISH + FRUIT_DESC_FISH + OTHER_DESC_FISH"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                + GOAL_DESC_PROTEIN + GOAL_DESC_GRAIN, Step.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // invalid goal"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_FISH + TIME_DESC_FISH + STEP_DESC_FISH"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                + GRAIN_DESC_FISH + VEGETABLE_DESC_FISH + PROTEIN_DESC_FISH + FRUIT_DESC_FISH + OTHER_DESC_FISH"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                + INVALID_GOAL_DESC + VALID_GOAL_GRAIN, Goal.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + TIME_DESC_FISH + STEP_DESC_FISH"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                + GRAIN_DESC_FISH + VEGETABLE_DESC_FISH + PROTEIN_DESC_FISH + FRUIT_DESC_FISH + OTHER_DESC_FISH,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_FISH + TIME_DESC_FISH + STEP_DESC_FISH"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                + GRAIN_DESC_FISH + VEGETABLE_DESC_FISH + PROTEIN_DESC_FISH + FRUIT_DESC_FISH + OTHER_DESC_FISH"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                + GOAL_DESC_PROTEIN + GOAL_DESC_GRAIN,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 8,
      "-": 40,
      "beatricetay": 90
    }
  },
  {
    "path": "src/test/java/seedu/recipe/logic/parser/AddIngredientCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "package seedu.recipe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.testutil.TypicalIndexes.INDEX_SECOND_RECIPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.logic.commands.AddIngredientCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.logic.commands.EditCommand.EditRecipeDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * outside of the AddIngredientCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * same path through the AddIngredientCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class AddIngredientCommandParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private AddIngredientCommandParser parser \u003d new AddIngredientCommandParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void parse_validArgs_returnsAddIngredientCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        EditRecipeDescriptor editRecipeDescriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        editRecipeDescriptor.setOthers(new TreeSet\u003c\u003e());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertParseSuccess(parser, \"2 io/\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                new AddIngredientCommand(INDEX_SECOND_RECIPE, editRecipeDescriptor));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertParseFailure(parser, \"a io/\", ParserUtil.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void parse_insufficientArgs_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertParseFailure(parser, \"2\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 43
    }
  },
  {
    "path": "src/test/java/seedu/recipe/logic/parser/AddStepCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "package seedu.recipe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.testutil.TypicalIndexes.INDEX_SECOND_RECIPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.logic.commands.AddStepCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.model.recipe.Step;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * outside of the AddStepCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * same path through the AddStepCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class AddStepCommandParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private AddStepCommandParser parser \u003d new AddStepCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final Step newStep \u003d new Step(\"New step\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void parse_validArgs_returnsDeleteStepCommand() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        List\u003cStep\u003e newStepList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        newStepList.add(newStep);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertParseSuccess(parser, \"2 s/New step\", new AddStepCommand(INDEX_SECOND_RECIPE, newStepList));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void parse_invalidIndex_throwsParseException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertParseFailure(parser, \"a s/New step\", ParserUtil.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void parse_invalidStep_throwsParseException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertParseFailure(parser, \"2 s/\", Step.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void parse_insufficientArgs_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertParseFailure(parser, \"2\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddStepCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 50
    }
  },
  {
    "path": "src/test/java/seedu/recipe/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        String argsString \u003d \"  some random string /g goal with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 1,
      "-": 148,
      "beatricetay": 1
    }
  },
  {
    "path": "src/test/java/seedu/recipe/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "beatricetay": 3
    }
  },
  {
    "path": "src/test/java/seedu/recipe/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(new Index[] {INDEX_FIRST_RECIPE}));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 3,
      "-": 24,
      "beatricetay": 7
    }
  },
  {
    "path": "src/test/java/seedu/recipe/logic/parser/DeleteIngredientCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "package seedu.recipe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.testutil.TypicalIndexes.INDEX_SECOND_RECIPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.logic.commands.DeleteIngredientCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.logic.commands.EditCommand.EditRecipeDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * outside of the DeleteIngredientCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * same path through the DeleteIngredientCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class DeleteIngredientCommandParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private DeleteIngredientCommandParser parser \u003d new DeleteIngredientCommandParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void parse_validArgs_returnsDeleteIngredientCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        EditRecipeDescriptor editRecipeDescriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        editRecipeDescriptor.setOthers(new TreeSet\u003c\u003e());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertParseSuccess(parser, \"2 io/\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                new DeleteIngredientCommand(INDEX_SECOND_RECIPE, editRecipeDescriptor));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertParseFailure(parser, \"a io/\", ParserUtil.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void parse_insufficientArgs_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertParseFailure(parser, \"2\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 43
    }
  },
  {
    "path": "src/test/java/seedu/recipe/logic/parser/DeleteStepCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "package seedu.recipe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.testutil.TypicalIndexes.INDEX_SECOND_RECIPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.logic.commands.DeleteStepCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * outside of the DeleteStepCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * same path through the DeleteStepCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class DeleteStepCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private DeleteStepCommandParser parser \u003d new DeleteStepCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final Integer[] validStepIndex \u003d new Integer[] {1};"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void parse_validArgs_returnsDeleteStepCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertParseSuccess(parser, \"2 2\", new DeleteStepCommand(INDEX_SECOND_RECIPE, validStepIndex));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertParseFailure(parser, \"a 1\", ParserUtil.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void parse_insufficientArgs_throwsParseException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertParseFailure(parser, \"2\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteStepCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 39
    }
  },
  {
    "path": "src/test/java/seedu/recipe/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.GOAL_DESC_GRAIN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.GOAL_DESC_PROTEIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.INVALID_GOAL_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.INVALID_STEP_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.INVALID_TIME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.NAME_DESC_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.STEP_DESC_FISH;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.STEP_DESC_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.TIME_DESC_FISH;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.TIME_DESC_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.VALID_GOAL_GRAIN;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.VALID_GOAL_PROTEIN;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.VALID_NAME_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.VALID_STEP_FISH;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.VALID_STEP_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.VALID_TIME_FISH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.VALID_TIME_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_GOAL;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.TypicalIndexes.INDEX_SECOND_RECIPE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.TypicalIndexes.INDEX_THIRD_RECIPE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.index.Index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.EditCommand.EditRecipeDescriptor;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.goal.Goal;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Step;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Time;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.testutil.EditRecipeDescriptorBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private static final String GOAL_EMPTY \u003d \" \" + PREFIX_GOAL;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_TURKEY_SANDWICH, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_TURKEY_SANDWICH, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_TURKEY_SANDWICH, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TIME_DESC, Time.MESSAGE_CONSTRAINTS); // invalid time"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_STEP_DESC, Step.MESSAGE_CONSTRAINTS); // invalid step"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_GOAL_DESC, Goal.MESSAGE_CONSTRAINTS); // invalid goal"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // invalid time followed by valid step"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TIME_DESC + STEP_DESC_TURKEY_SANDWICH, Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // valid time followed by invalid time. The test case for invalid time followed by valid time"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertParseFailure(parser, \"1\" + TIME_DESC_FISH + INVALID_TIME_DESC, Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // while parsing {@code PREFIX_GOAL} alone will reset the goals of the {@code Recipe} being edited,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // parsing it together with a valid goal results in error"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertParseFailure(parser, \"1\" + GOAL_DESC_GRAIN + GOAL_DESC_PROTEIN + GOAL_EMPTY, Goal.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertParseFailure(parser, \"1\" + GOAL_DESC_GRAIN + GOAL_EMPTY + GOAL_DESC_PROTEIN, Goal.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertParseFailure(parser, \"1\" + GOAL_EMPTY + GOAL_DESC_GRAIN + GOAL_DESC_PROTEIN, Goal.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_STEP_DESC + VALID_TIME_TURKEY_SANDWICH,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_RECIPE;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TIME_DESC_FISH + GOAL_DESC_PROTEIN"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                + STEP_DESC_TURKEY_SANDWICH + NAME_DESC_TURKEY_SANDWICH + GOAL_DESC_GRAIN;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        EditRecipeDescriptor descriptor \u003d new EditRecipeDescriptorBuilder().withName(VALID_NAME_TURKEY_SANDWICH)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withTime(VALID_TIME_FISH).withSteps(VALID_STEP_TURKEY_SANDWICH)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .withGoals(VALID_GOAL_PROTEIN, VALID_GOAL_GRAIN).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TIME_DESC_FISH + STEP_DESC_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        EditRecipeDescriptor descriptor \u003d new EditRecipeDescriptorBuilder().withTime(VALID_TIME_FISH)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withSteps(VALID_STEP_TURKEY_SANDWICH).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_RECIPE;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        EditRecipeDescriptor descriptor \u003d new EditRecipeDescriptorBuilder()"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .withName(VALID_NAME_TURKEY_SANDWICH).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // time"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TIME_DESC_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        descriptor \u003d new EditRecipeDescriptorBuilder().withTime(VALID_TIME_TURKEY_SANDWICH).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // step"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + STEP_DESC_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        descriptor \u003d new EditRecipeDescriptorBuilder().withSteps(VALID_STEP_TURKEY_SANDWICH).build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // goals"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + GOAL_DESC_GRAIN;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        descriptor \u003d new EditRecipeDescriptorBuilder().withGoals(VALID_GOAL_GRAIN).build();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TIME_DESC_TURKEY_SANDWICH + STEP_DESC_TURKEY_SANDWICH"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                + GOAL_DESC_GRAIN + TIME_DESC_TURKEY_SANDWICH + STEP_DESC_TURKEY_SANDWICH + GOAL_DESC_GRAIN"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                + TIME_DESC_FISH + STEP_DESC_FISH + GOAL_DESC_PROTEIN;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        EditRecipeDescriptor descriptor \u003d new EditRecipeDescriptorBuilder().withTime(VALID_TIME_FISH)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withGoals(VALID_GOAL_GRAIN, VALID_GOAL_PROTEIN).withSteps(VALID_STEP_TURKEY_SANDWICH, VALID_STEP_FISH)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_TIME_DESC + TIME_DESC_FISH;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        EditRecipeDescriptor descriptor \u003d new EditRecipeDescriptorBuilder().withTime(VALID_TIME_FISH).build();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + STEP_DESC_FISH + INVALID_TIME_DESC + TIME_DESC_FISH;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        descriptor \u003d new EditRecipeDescriptorBuilder().withTime(VALID_TIME_FISH).withSteps(VALID_STEP_FISH).build();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void parse_resetGoals_success() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_RECIPE;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + GOAL_EMPTY;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        EditRecipeDescriptor descriptor \u003d new EditRecipeDescriptorBuilder().withGoals().build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 5,
      "tharshita": 20,
      "-": 108,
      "beatricetay": 68
    }
  },
  {
    "path": "src/test/java/seedu/recipe/logic/parser/EditIngredientCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "package seedu.recipe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.testutil.TypicalIndexes.INDEX_SECOND_RECIPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.logic.commands.EditCommand.EditRecipeDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.logic.commands.EditIngredientCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Other;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * outside of the EditIngredientCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * same path through the EditIngredientCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class EditIngredientCommandParserTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private EditIngredientCommandParser parser \u003d new EditIngredientCommandParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final Other otherWithNewQuantity \u003d new Other(\"Cheese\", RecipeBuilder.DEFAULT_QUANTITY);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void parse_validArgs_returnsEditIngredientCommand() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        EditRecipeDescriptor editRecipeDescriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Set\u003cOther\u003e editedOther \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        editedOther.add(otherWithNewQuantity);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        editRecipeDescriptor.setOthers(editedOther);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertParseSuccess(parser, \"2 io/100g, Cheese\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                new EditIngredientCommand(INDEX_SECOND_RECIPE, editRecipeDescriptor));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void parse_invalidIndex_throwsParseException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertParseFailure(parser, \"a io/100g, Cheese\", ParserUtil.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void parse_insufficientArgs_throwsParseException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertParseFailure(parser, \"2\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 50
    }
  },
  {
    "path": "src/test/java/seedu/recipe/logic/parser/EditStepCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "package seedu.recipe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.recipe.testutil.TypicalIndexes.INDEX_SECOND_RECIPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.logic.commands.EditStepCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.recipe.model.recipe.Step;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * outside of the EditStepCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * same path through the EditStepCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class EditStepCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private EditStepCommandParser parser \u003d new EditStepCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final int indexFirstStep \u003d 0; // Steps are zero-indexed by design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final Step editedStep \u003d new Step(\"Edited step\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void parse_validArgs_returnsEditStepCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertParseSuccess(parser, \"2 1 s/Edited step\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                new EditStepCommand(INDEX_SECOND_RECIPE, indexFirstStep, editedStep));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void parse_invalidIndex_throwsParseException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertParseFailure(parser, \"a 1 s/Edited step\", ParserUtil.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void parse_insufficientArgs_throwsParseException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertParseFailure(parser, \"2\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditStepCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void parse_invalidStepField_throwsParseException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertParseFailure(parser, \"2 1 s/\", Step.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void parse_multipleStepFields_returnsEditStepCommand() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertParseSuccess(parser, \"2 1 s/Edited step s/Ignored step\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                new EditStepCommand(INDEX_SECOND_RECIPE, indexFirstStep, editedStep));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 53
    }
  },
  {
    "path": "src/test/java/seedu/recipe/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void parse_validArgs_returnsNonStrictFindCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(false, \"Alice Bob\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void parse_validArgs_returnsStrictFindCommand() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(true, \"Alice Bob\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertParseSuccess(parser, \"/strict Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertParseSuccess(parser, \" /strict \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 13,
      "-": 24,
      "beatricetay": 6
    }
  },
  {
    "path": "src/test/java/seedu/recipe/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.goal.Goal;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Step;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Time;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private static final String INVALID_TIME \u003d \"+651234\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private static final String INVALID_STEP \u003d \"   \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private static final String INVALID_GOAL \u003d \"#friend\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private static final String VALID_TIME \u003d \"123456\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private static final String VALID_STEP \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private static final String VALID_GOAL_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private static final String VALID_GOAL_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertEquals(INDEX_FIRST_RECIPE, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertEquals(INDEX_FIRST_RECIPE, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void parseTime_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTime((String) null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void parseTime_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTime(INVALID_TIME));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void parseTime_validValueWithoutWhitespace_returnsTime() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Time expectedTime \u003d new Time(VALID_TIME);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertEquals(expectedTime, ParserUtil.parseTime(VALID_TIME));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void parseTime_validValueWithWhitespace_returnsTrimmedTime() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        String timeWithWhitespace \u003d WHITESPACE + VALID_TIME + WHITESPACE;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Time expectedTime \u003d new Time(VALID_TIME);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertEquals(expectedTime, ParserUtil.parseTime(timeWithWhitespace));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void parseStep_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseStep((String) null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void parseStep_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseStep(INVALID_STEP));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void parseStep_validValueWithoutWhitespace_returnsStep() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Step expectedStep \u003d new Step(VALID_STEP);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertEquals(expectedStep, ParserUtil.parseStep(VALID_STEP));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void parseStep_validValueWithWhitespace_returnsTrimmedStep() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        String stepWithWhitespace \u003d WHITESPACE + VALID_STEP + WHITESPACE;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Step expectedStep \u003d new Step(VALID_STEP);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertEquals(expectedStep, ParserUtil.parseStep(stepWithWhitespace));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void parseGoal_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseGoal(null));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void parseGoal_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseGoal(INVALID_GOAL));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void parseGoal_validValueWithoutWhitespace_returnsGoal() throws Exception {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Goal expectedGoal \u003d new Goal(VALID_GOAL_1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertEquals(expectedGoal, ParserUtil.parseGoal(VALID_GOAL_1));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void parseGoal_validValueWithWhitespace_returnsTrimmedGoal() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        String goalWithWhitespace \u003d WHITESPACE + VALID_GOAL_1 + WHITESPACE;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Goal expectedGoal \u003d new Goal(VALID_GOAL_1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertEquals(expectedGoal, ParserUtil.parseGoal(goalWithWhitespace));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void parseGoals_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseGoals(null));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void parseGoals_collectionWithInvalidGoals_throwsParseException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseGoals(Arrays.asList(VALID_GOAL_1, INVALID_GOAL)));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void parseGoals_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertTrue(ParserUtil.parseGoals(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void parseGoals_collectionWithValidGoals_returnsGoalSet() throws Exception {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Set\u003cGoal\u003e actualGoalSet \u003d ParserUtil.parseGoals(Arrays.asList(VALID_GOAL_1, VALID_GOAL_2));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Set\u003cGoal\u003e expectedGoalSet \u003d new HashSet\u003cGoal\u003e(Arrays.asList(new Goal(VALID_GOAL_1), new Goal(VALID_GOAL_2)));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertEquals(expectedGoalSet, actualGoalSet);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 52,
      "-": 109,
      "beatricetay": 9
    }
  },
  {
    "path": "src/test/java/seedu/recipe/logic/parser/RecipeBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.EditCommand.EditRecipeDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.testutil.EditRecipeDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.testutil.RecipeUtil;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class RecipeBookParserTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final RecipeBookParser parser \u003d new RecipeBookParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Recipe recipe \u003d new RecipeBuilder().build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(RecipeUtil.getAddCommand(recipe));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertEquals(new AddCommand(recipe), command);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RECIPE.getOneBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertEquals(new DeleteCommand(new Index[] {INDEX_FIRST_RECIPE}), command);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Recipe recipe \u003d new RecipeBuilder().build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        EditRecipeDescriptor descriptor \u003d new EditRecipeDescriptorBuilder(recipe).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                + INDEX_FIRST_RECIPE.getOneBased() + \" \" + RecipeUtil.getEditRecipeDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_RECIPE, descriptor), command);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String keywords \u003d \"foo bar baz\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                FindCommand.COMMAND_WORD + \" /strict \" + keywords);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(true, keywords)), command);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 6,
      "tharshita": 8,
      "-": 63,
      "beatricetay": 21
    }
  },
  {
    "path": "src/test/java/seedu/recipe/model/DateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "class DateTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public void constructor_invalidDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String invalidBlankDate \u003d \"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Date(invalidBlankDate));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String invalidCharacterDate \u003d \"2020!09/02\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Date(invalidCharacterDate));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String invalidFormatDate \u003d \"02/09/2020\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Date(invalidFormatDate));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String invalidMonthDate \u003d \"2020/35/01\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Date(invalidMonthDate));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String invalidDayDate \u003d \"2020/01/32\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Date(invalidDayDate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        // null date"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Date.isValidDate(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(Date.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(Date.isValidDate(\" \")); // only spaces"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(Date.isValidDate(\"!\")); // only non-numeric or - character"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(Date.isValidDate(\"20200202\")); // not in yyyy-mm-dd format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(Date.isValidDate(\"2020-13-02\")); // invalid month"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(Date.isValidDate(\"2020-01-32\")); // invalid day"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        // valid date"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertTrue(Date.isValidDate(\"1000-02-02\")); // date in the past"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertTrue(Date.isValidDate(\"2020-02-02\")); // date in current year"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertTrue(Date.isValidDate(\"5000-02-02\")); // date in the future"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public void isDateInFuture() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Date olderDate \u003d new Date(\"1000-01-01\"); // date about 1000 years in the past"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(olderDate.isDateInFuture());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Date newerDate \u003d new Date(\"5000-01-01\"); // date about 3000 years in the future"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertTrue(newerDate.isDateInFuture());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public void isWithinRange() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Date pastDate \u003d new Date(\"1000-01-01\"); // date about 1000 years in the past"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Date recentDate \u003d new Date(\"2000-01-01\"); // date in this millennium"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Date futureDate \u003d new Date(\"5000-01-01\"); // date about 3000 years in the future"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        // recent date is within start and end date"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertTrue(recentDate.isWithinRange(pastDate, futureDate));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        // start date is later than end date"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(recentDate.isWithinRange(futureDate, pastDate));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        // start and end date are the same"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(recentDate.isWithinRange(pastDate, pastDate));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(recentDate.isWithinRange(futureDate, futureDate));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "beatricetay": 73
    }
  },
  {
    "path": "src/test/java/seedu/recipe/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.model.Model.PREDICATE_SHOW_ALL_RECIPES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.TypicalRecipes.CAESAR_SALAD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.TypicalRecipes.GRILLED_SANDWICH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.recipe.testutil.TypicalRecords.BOILED_CHICKEN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.recipe.testutil.TypicalRecords.CHOCOLATE_CAKE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.cooked.CookedRecordBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.plan.PlannedBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.testutil.RecipeBookBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.testutil.RecordBookBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertEquals(new RecipeBook(), new RecipeBook(modelManager.getRecipeBook()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        userPrefs.setRecipeBookFilePath(Paths.get(\"recipe/book/file/path\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        userPrefs.setRecipeBookFilePath(Paths.get(\"new/recipe/book/file/path\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void setRecipeBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setRecipeBookFilePath(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void setRecipeBookFilePath_validPath_setsRecipeBookFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Path path \u003d Paths.get(\"recipe/book/file/path\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        modelManager.setRecipeBookFilePath(path);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertEquals(path, modelManager.getRecipeBookFilePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void hasRecipe_nullRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasRecipe(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void hasRecipe_recipeNotInRecipeBook_returnsFalse() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(modelManager.hasRecipe(CAESAR_SALAD));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void hasRecipe_recipeInRecipeBook_returnsTrue() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        modelManager.addRecipe(CAESAR_SALAD);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertTrue(modelManager.hasRecipe(CAESAR_SALAD));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void getFilteredRecipeList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredRecipeList().remove(0));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        RecipeBook recipeBook \u003d new RecipeBookBuilder().withRecipe(CAESAR_SALAD).withRecipe(GRILLED_SANDWICH).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        RecipeBook differentRecipeBook \u003d new RecipeBook();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        CookedRecordBook recordBook \u003d new RecordBookBuilder().withRecord(BOILED_CHICKEN)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                .withRecord(CHOCOLATE_CAKE).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        CookedRecordBook differentRecordBook \u003d new CookedRecordBook();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        PlannedBook plannedBook \u003d new PlannedBook();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        modelManager \u003d new ModelManager(recipeBook, userPrefs, recordBook, plannedBook);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(recipeBook, userPrefs, recordBook, plannedBook);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // different recipeBook -\u003e returns false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentRecipeBook, userPrefs,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                differentRecordBook, plannedBook)));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String keywords \u003d CAESAR_SALAD.getName().fullName;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        modelManager.updateFilteredRecipeList(new NameContainsKeywordsPredicate(true, keywords));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(recipeBook, userPrefs, recordBook, plannedBook)));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        modelManager.updateFilteredRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        differentUserPrefs.setRecipeBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(recipeBook, differentUserPrefs, recordBook, plannedBook)));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 16,
      "tharshita": 23,
      "-": 93,
      "beatricetay": 14
    }
  },
  {
    "path": "src/test/java/seedu/recipe/model/RecipeBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.VALID_GOAL_PROTEIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.TypicalRecipes.CAESAR_SALAD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.exceptions.DuplicateRecipeException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class RecipeBookTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final RecipeBook recipeBook \u003d new RecipeBook();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertEquals(Collections.emptyList(), recipeBook.getRecipeList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e recipeBook.resetData(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void resetData_withValidReadOnlyRecipeBook_replacesData() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        RecipeBook newData \u003d getTypicalRecipeBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        recipeBook.resetData(newData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertEquals(newData, recipeBook);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void resetData_withDuplicateRecipes_throwsDuplicateRecipeException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // Two recipes with the same identity fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Recipe editedAlice \u003d new RecipeBuilder(CAESAR_SALAD).withGoals(VALID_GOAL_PROTEIN)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        List\u003cRecipe\u003e newRecipes \u003d Arrays.asList(CAESAR_SALAD, editedAlice);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        RecipeBookStub newData \u003d new RecipeBookStub(newRecipes);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertThrows(DuplicateRecipeException.class, () -\u003e recipeBook.resetData(newData));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void hasRecipe_nullRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e recipeBook.hasRecipe(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void hasRecipe_recipeNotInRecipeBook_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(recipeBook.hasRecipe(CAESAR_SALAD));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void hasRecipe_recipeInRecipeBook_returnsTrue() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        recipeBook.addRecipe(CAESAR_SALAD);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertTrue(recipeBook.hasRecipe(CAESAR_SALAD));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void hasRecipe_recipeWithSameIdentityFieldsInRecipeBook_returnsTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        recipeBook.addRecipe(CAESAR_SALAD);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Recipe editedAlice \u003d new RecipeBuilder(CAESAR_SALAD).withGoals(VALID_GOAL_PROTEIN)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertTrue(recipeBook.hasRecipe(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void getRecipeList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e recipeBook.getRecipeList().remove(0));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * A stub ReadOnlyRecipeBook whose recipes list can violate interface constraints."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private static class RecipeBookStub implements ReadOnlyRecipeBook {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        private final ObservableList\u003cRecipe\u003e recipes \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        RecipeBookStub(Collection\u003cRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            this.recipes.setAll(recipes);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        public ObservableList\u003cRecipe\u003e getRecipeList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            return recipes;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 19,
      "tharshita": 8,
      "-": 59,
      "beatricetay": 15
    }
  },
  {
    "path": "src/test/java/seedu/recipe/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void setRecipeBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setRecipeBookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 2,
      "-": 17,
      "beatricetay": 2
    }
  },
  {
    "path": "src/test/java/seedu/recipe/model/goal/GoalTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.model.goal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class GoalTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Goal(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void constructor_invalidGoalName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        String invalidGoalName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Goal(invalidGoalName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void isValidGoalName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // null goal name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Goal.isValidGoalName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 24,
      "beatricetay": 2
    }
  },
  {
    "path": "src/test/java/seedu/recipe/model/recipe/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String firstPredicateKeywords \u003d \"first\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String secondPredicateKeywords \u003d \"first second\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // Base predicate for comparison"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                new NameContainsKeywordsPredicate(false, firstPredicateKeywords);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // Same isStrict, different keywords"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                new NameContainsKeywordsPredicate(false, secondPredicateKeywords);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // Different isStrict, same keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        NameContainsKeywordsPredicate thirdPredicate \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                new NameContainsKeywordsPredicate(true, firstPredicateKeywords);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                new NameContainsKeywordsPredicate(false, firstPredicateKeywords);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // same isStrict, different keywords -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // different isStrict, same keywords -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertFalse(firstPredicate.equals(thirdPredicate));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void test_nameContainsKeywordsStrict_returnsTrue() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(true, \"Alice\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertTrue(predicate.test(new RecipeBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(true, \"Alice Bob\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertTrue(predicate.test(new RecipeBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(true, \"Bob Carol\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertTrue(predicate.test(new RecipeBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(true, \"aLIce bOB\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertTrue(predicate.test(new RecipeBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void test_nameDoesNotContainKeywordsStrict_returnsFalse() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(true, \" \");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertFalse(predicate.test(new RecipeBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(true, \"Carol\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertFalse(predicate.test(new RecipeBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // Keywords match time and step, but does not match name"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(true, \"12345 alice@email.com Main Street\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertFalse(predicate.test(new RecipeBuilder().withName(\"Alice\").withTime(\"12345\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withSteps(\"Sample step\").build()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 28,
      "tharshita": 8,
      "-": 44,
      "beatricetay": 2
    }
  },
  {
    "path": "src/test/java/seedu/recipe/model/recipe/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric chars except permitted special characters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "beatricetay": 3
    }
  },
  {
    "path": "src/test/java/seedu/recipe/model/recipe/RecipeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.VALID_GOAL_PROTEIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.VALID_NAME_FISH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.VALID_STEP_FISH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.VALID_TIME_FISH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.TypicalRecipes.CAESAR_SALAD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.TypicalRecipes.FISH;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class RecipeTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Recipe recipe \u003d new RecipeBuilder().build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e recipe.getGoals().remove(0));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void isSameRecipe() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertTrue(CAESAR_SALAD.isSameRecipe(CAESAR_SALAD));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(CAESAR_SALAD.isSameRecipe(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // different time and email -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Recipe editedCaesar \u003d new RecipeBuilder(CAESAR_SALAD)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withTime(VALID_TIME_FISH).withSteps(VALID_STEP_FISH).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(CAESAR_SALAD.isSameRecipe(editedCaesar));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        editedCaesar \u003d new RecipeBuilder(CAESAR_SALAD).withName(VALID_NAME_FISH).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(CAESAR_SALAD.isSameRecipe(editedCaesar));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // same name, same time, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        editedCaesar \u003d new RecipeBuilder(CAESAR_SALAD).withSteps(VALID_STEP_FISH)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .withGoals(VALID_GOAL_PROTEIN).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertTrue(CAESAR_SALAD.isSameRecipe(editedCaesar));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        editedCaesar \u003d new RecipeBuilder(CAESAR_SALAD).withTime(VALID_TIME_FISH).withGoals(VALID_GOAL_PROTEIN).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertTrue(CAESAR_SALAD.isSameRecipe(editedCaesar));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // same name, same time, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        editedCaesar \u003d new RecipeBuilder(CAESAR_SALAD).withGoals(VALID_GOAL_PROTEIN).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertTrue(CAESAR_SALAD.isSameRecipe(editedCaesar));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Recipe aliceCopy \u003d new RecipeBuilder(CAESAR_SALAD).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertTrue(CAESAR_SALAD.equals(aliceCopy));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertTrue(CAESAR_SALAD.equals(CAESAR_SALAD));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(CAESAR_SALAD.equals(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(CAESAR_SALAD.equals(5));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // different recipe -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(CAESAR_SALAD.equals(FISH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Recipe editedCaesar \u003d new RecipeBuilder(CAESAR_SALAD).withName(VALID_NAME_FISH).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(CAESAR_SALAD.equals(editedCaesar));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        editedCaesar \u003d new RecipeBuilder(CAESAR_SALAD).withSteps(VALID_STEP_FISH).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(CAESAR_SALAD.equals(editedCaesar));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // different goals -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        editedCaesar \u003d new RecipeBuilder(CAESAR_SALAD).withGoals(VALID_GOAL_PROTEIN).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(CAESAR_SALAD.equals(editedCaesar));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 3,
      "tharshita": 9,
      "-": 43,
      "beatricetay": 34
    }
  },
  {
    "path": "src/test/java/seedu/recipe/model/recipe/StepTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class StepTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Step(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void constructor_invalidStep_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        String invalidStep \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Step(invalidStep));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void isValidStep() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // null step"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Step.isValidStep(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // blank step"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertFalse(Step.isValidStep(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertFalse(Step.isValidStep(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertFalse(Step.isValidStep(\"           \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // valid step"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertTrue(Step.isValidStep(\"contact PeterJack_1190@example.com for recipe\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertTrue(Step.isValidStep(\"a\")); // minimal"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertTrue(Step.isValidStep(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertTrue(Step.isValidStep(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertTrue(Step.isValidStep(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertTrue(Step.isValidStep(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertTrue(Step.isValidStep(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertTrue(Step.isValidStep(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 40,
      "beatricetay": 2
    }
  },
  {
    "path": "src/test/java/seedu/recipe/model/recipe/TimeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class TimeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Time(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void constructor_invalidTime_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        String invalidTime \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Time(invalidTime));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void isValidTime() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // null time number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Time.isValidTime(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // invalid time numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertFalse(Time.isValidTime(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertFalse(Time.isValidTime(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertFalse(Time.isValidTime(\"time\")); // non-numeric"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertFalse(Time.isValidTime(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertFalse(Time.isValidTime(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // valid time numbers"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertTrue(Time.isValidTime(\"0\")); // exactly 1 number"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertTrue(Time.isValidTime(\"91\")); // 2 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertTrue(Time.isValidTime(\"911\")); // 3 numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertTrue(Time.isValidTime(\"93121534\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertTrue(Time.isValidTime(\"124293842033123\")); // long time numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 39,
      "beatricetay": 2
    }
  },
  {
    "path": "src/test/java/seedu/recipe/model/recipe/UniqueRecipeListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.VALID_GOAL_PROTEIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.TypicalRecipes.CAESAR_SALAD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.TypicalRecipes.FISH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.exceptions.DuplicateRecipeException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.exceptions.RecipeNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class UniqueRecipeListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private final UniqueRecipeList uniqueRecipeList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void contains_nullRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRecipeList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void contains_recipeNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(uniqueRecipeList.contains(CAESAR_SALAD));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void contains_recipeInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        uniqueRecipeList.add(CAESAR_SALAD);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertTrue(uniqueRecipeList.contains(CAESAR_SALAD));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void contains_recipeWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        uniqueRecipeList.add(CAESAR_SALAD);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Recipe editedAlice \u003d new RecipeBuilder(CAESAR_SALAD).withGoals(VALID_GOAL_PROTEIN)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertTrue(uniqueRecipeList.contains(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void add_nullRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRecipeList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void add_duplicateRecipe_throwsDuplicateRecipeException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        uniqueRecipeList.add(CAESAR_SALAD);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertThrows(DuplicateRecipeException.class, () -\u003e uniqueRecipeList.add(CAESAR_SALAD));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void setRecipe_nullTargetRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRecipeList.setRecipe(null, CAESAR_SALAD));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void setRecipe_nullEditedRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRecipeList.setRecipe(CAESAR_SALAD, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void setRecipe_targetRecipeNotInList_throwsRecipeNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertThrows(RecipeNotFoundException.class, () -\u003e uniqueRecipeList.setRecipe(CAESAR_SALAD, CAESAR_SALAD));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void setRecipe_editedRecipeIsSameRecipe_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        uniqueRecipeList.add(CAESAR_SALAD);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        uniqueRecipeList.setRecipe(CAESAR_SALAD, CAESAR_SALAD);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        UniqueRecipeList expectedUniqueRecipeList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        expectedUniqueRecipeList.add(CAESAR_SALAD);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertEquals(expectedUniqueRecipeList, uniqueRecipeList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void setRecipe_editedRecipeHasSameIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        uniqueRecipeList.add(CAESAR_SALAD);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Recipe editedAlice \u003d new RecipeBuilder(CAESAR_SALAD).withGoals(VALID_GOAL_PROTEIN).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        uniqueRecipeList.setRecipe(CAESAR_SALAD, editedAlice);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        UniqueRecipeList expectedUniqueRecipeList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        expectedUniqueRecipeList.add(editedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertEquals(expectedUniqueRecipeList, uniqueRecipeList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void setRecipe_editedRecipeHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        uniqueRecipeList.add(CAESAR_SALAD);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        uniqueRecipeList.setRecipe(CAESAR_SALAD, FISH);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        UniqueRecipeList expectedUniqueRecipeList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        expectedUniqueRecipeList.add(FISH);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertEquals(expectedUniqueRecipeList, uniqueRecipeList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void setRecipe_editedRecipeHasNonUniqueIdentity_throwsDuplicateRecipeException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        uniqueRecipeList.add(CAESAR_SALAD);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        uniqueRecipeList.add(FISH);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertThrows(DuplicateRecipeException.class, () -\u003e uniqueRecipeList.setRecipe(CAESAR_SALAD, FISH));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void remove_nullRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRecipeList.remove(null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void remove_recipeDoesNotExist_throwsRecipeNotFoundException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertThrows(RecipeNotFoundException.class, () -\u003e uniqueRecipeList.remove(CAESAR_SALAD));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void remove_existingRecipe_removesRecipe() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        uniqueRecipeList.add(CAESAR_SALAD);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        uniqueRecipeList.remove(CAESAR_SALAD);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        UniqueRecipeList expectedUniqueRecipeList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertEquals(expectedUniqueRecipeList, uniqueRecipeList);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void setRecipes_nullUniqueRecipeList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRecipeList.setRecipes((UniqueRecipeList) null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void setRecipes_uniqueRecipeList_replacesOwnListWithProvidedUniqueRecipeList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        uniqueRecipeList.add(CAESAR_SALAD);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        UniqueRecipeList expectedUniqueRecipeList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        expectedUniqueRecipeList.add(FISH);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        uniqueRecipeList.setRecipes(expectedUniqueRecipeList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertEquals(expectedUniqueRecipeList, uniqueRecipeList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void setRecipes_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRecipeList.setRecipes((List\u003cRecipe\u003e) null));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void setRecipes_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        uniqueRecipeList.add(CAESAR_SALAD);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        List\u003cRecipe\u003e recipeList \u003d Collections.singletonList(FISH);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        uniqueRecipeList.setRecipes(recipeList);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        UniqueRecipeList expectedUniqueRecipeList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        expectedUniqueRecipeList.add(FISH);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertEquals(expectedUniqueRecipeList, uniqueRecipeList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void setRecipes_listWithDuplicateRecipes_throwsDuplicateRecipeException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        List\u003cRecipe\u003e listWithDuplicateRecipes \u003d Arrays.asList(CAESAR_SALAD, CAESAR_SALAD);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(DuplicateRecipeException.class, () -\u003e uniqueRecipeList.setRecipes(listWithDuplicateRecipes));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            -\u003e uniqueRecipeList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 129,
      "beatricetay": 39
    }
  },
  {
    "path": "src/test/java/seedu/recipe/storage/JsonAdaptedRecipeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.storage.JsonAdaptedRecipe.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.TypicalRecipes.GRILLED_SANDWICH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Step;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Time;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Ingredient;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class JsonAdaptedRecipeTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private static final String INVALID_TIME \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private static final String INVALID_STEP \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private static final String INVALID_GOAL \u003d \"#friend\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private static final String VALID_NAME \u003d GRILLED_SANDWICH.getName().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private static final String VALID_TIME \u003d GRILLED_SANDWICH.getTime().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private static final List\u003cJsonAdaptedGrain\u003e VALID_GRAINS \u003d GRILLED_SANDWICH.getGrains().stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .map(JsonAdaptedGrain::new)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private static final List\u003cJsonAdaptedVegetable\u003e VALID_VEGETABLES \u003d GRILLED_SANDWICH.getVegetables().stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .map(JsonAdaptedVegetable::new)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private static final List\u003cJsonAdaptedProtein\u003e VALID_PROTEINS \u003d GRILLED_SANDWICH.getProteins().stream()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .map(JsonAdaptedProtein::new)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private static final List\u003cJsonAdaptedFruit\u003e VALID_FRUITS \u003d GRILLED_SANDWICH.getFruits().stream()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .map(JsonAdaptedFruit::new)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private static final List\u003cJsonAdaptedOther\u003e VALID_OTHERS \u003d GRILLED_SANDWICH.getOthers().stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .map(JsonAdaptedOther::new)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private static final List\u003cJsonAdaptedStep\u003e VALID_STEP \u003d GRILLED_SANDWICH.getSteps().stream()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            .map(JsonAdaptedStep::new).collect(Collectors.toList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private static final List\u003cJsonAdaptedGoal\u003e VALID_GOALS \u003d GRILLED_SANDWICH.getGoals().stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            .map(JsonAdaptedGoal::new)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private static final List\u003cJsonAdaptedStep\u003e INVALID_STEPS \u003d new ArrayList\u003c\u003e(VALID_STEP);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private static final List\u003cJsonAdaptedGoal\u003e INVALID_GOALS \u003d new ArrayList\u003c\u003e(VALID_GOALS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private static final boolean IS_NOT_FAVOURITE \u003d false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private static final boolean IS_FAVOURITE \u003d true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void toModelType_validRecipeDetails_returnsRecipe() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d new JsonAdaptedRecipe(GRILLED_SANDWICH);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertEquals(GRILLED_SANDWICH, recipe.toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                new JsonAdaptedRecipe(INVALID_NAME, VALID_TIME, IS_NOT_FAVOURITE,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                        VALID_GRAINS, VALID_VEGETABLES, VALID_PROTEINS, VALID_FRUITS, VALID_OTHERS,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                        VALID_STEP, VALID_GOALS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d new JsonAdaptedRecipe(null, VALID_TIME, IS_NOT_FAVOURITE,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                VALID_GRAINS, VALID_VEGETABLES, VALID_PROTEINS, VALID_FRUITS, VALID_OTHERS,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                VALID_STEP, VALID_GOALS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void toModelType_invalidTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                new JsonAdaptedRecipe(VALID_NAME, INVALID_TIME, IS_NOT_FAVOURITE,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                        VALID_GRAINS, VALID_VEGETABLES, VALID_PROTEINS, VALID_FRUITS, VALID_OTHERS,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                        VALID_STEP, VALID_GOALS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        String expectedMessage \u003d Time.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void toModelType_nullTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d new JsonAdaptedRecipe(VALID_NAME, null, IS_NOT_FAVOURITE,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                VALID_GRAINS, VALID_VEGETABLES, VALID_PROTEINS, VALID_FRUITS, VALID_OTHERS,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                VALID_STEP, VALID_GOALS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Time.class.getSimpleName());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void toModelType_invalidStep_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        INVALID_STEPS.add(new JsonAdaptedStep(INVALID_STEP));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                new JsonAdaptedRecipe(VALID_NAME, VALID_TIME, IS_NOT_FAVOURITE,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                        VALID_GRAINS, VALID_VEGETABLES, VALID_PROTEINS, VALID_FRUITS, VALID_OTHERS,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                        INVALID_STEPS, VALID_GOALS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        String expectedMessage \u003d Step.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public void toModelType_nullIngredient_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d new JsonAdaptedRecipe(VALID_NAME, VALID_TIME, IS_NOT_FAVOURITE,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                null, null, null, null, null,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                VALID_STEP, VALID_GOALS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Ingredient.class.getSimpleName());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void toModelType_invalidGoals_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        INVALID_GOALS.add(new JsonAdaptedGoal(INVALID_GOAL));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                new JsonAdaptedRecipe(VALID_NAME, VALID_TIME, IS_NOT_FAVOURITE,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                        VALID_GRAINS, VALID_VEGETABLES, VALID_PROTEINS, VALID_FRUITS, VALID_OTHERS,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                        VALID_STEP, INVALID_GOALS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(IllegalValueException.class, recipe::toModelType);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 15,
      "tharshita": 24,
      "-": 40,
      "beatricetay": 48
    }
  },
  {
    "path": "src/test/java/seedu/recipe/storage/JsonRecipeBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.TypicalRecipes.CAESAR_SALAD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.TypicalRecipes.FISH_TACO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.TypicalRecipes.VEGETARIAN_PIZZA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.RecipeBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class JsonRecipeBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonRecipeBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void readRecipeBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readRecipeBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private java.util.Optional\u003cReadOnlyRecipeBook\u003e readRecipeBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return new JsonRecipeBookStorage(Paths.get(filePath)).readRecipeBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertFalse(readRecipeBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readRecipeBook(\"notJsonFormatRecipeBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void readRecipeBook_invalidRecipeRecipeBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readRecipeBook(\"invalidRecipeRecipeBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void readRecipeBook_invalidAndValidRecipeRecipeBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readRecipeBook(\"invalidAndValidRecipeBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void readAndSaveRecipeBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempRecipeBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        RecipeBook original \u003d getTypicalRecipeBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        JsonRecipeBookStorage jsonRecipeBookStorage \u003d new JsonRecipeBookStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        jsonRecipeBookStorage.saveRecipeBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        ReadOnlyRecipeBook readBack \u003d jsonRecipeBookStorage.readRecipeBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertEquals(original, new RecipeBook(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        original.addRecipe(FISH_TACO);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        original.removeRecipe(CAESAR_SALAD);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        jsonRecipeBookStorage.saveRecipeBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        readBack \u003d jsonRecipeBookStorage.readRecipeBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertEquals(original, new RecipeBook(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        original.addRecipe(VEGETARIAN_PIZZA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        jsonRecipeBookStorage.saveRecipeBook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        readBack \u003d jsonRecipeBookStorage.readRecipeBook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertEquals(original, new RecipeBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void saveRecipeBook_nullRecipeBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveRecipeBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Saves {@code recipeBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private void saveRecipeBook(ReadOnlyRecipeBook recipeBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            new JsonRecipeBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    .saveRecipeBook(recipeBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void saveRecipeBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveRecipeBook(new RecipeBook(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 98,
      "beatricetay": 12
    }
  },
  {
    "path": "src/test/java/seedu/recipe/storage/JsonSerializableRecipeBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.RecipeBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.testutil.TypicalRecipes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class JsonSerializableRecipeBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableRecipeBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private static final Path TYPICAL_RECIPES_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalRecipesRecipeBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private static final Path INVALID_RECIPE_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidRecipeRecipeBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private static final Path DUPLICATE_RECIPE_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateRecipeRecipeBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void toModelType_typicalRecipesFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        JsonSerializableRecipeBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_RECIPES_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                JsonSerializableRecipeBook.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        RecipeBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        RecipeBook typicalRecipesAddressBook \u003d TypicalRecipes.getTypicalRecipeBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertEquals(addressBookFromFile, typicalRecipesAddressBook);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void toModelType_invalidRecipeFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        JsonSerializableRecipeBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_RECIPE_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                JsonSerializableRecipeBook.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void toModelType_duplicateRecipes_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        JsonSerializableRecipeBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_RECIPE_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                JsonSerializableRecipeBook.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertThrows(IllegalValueException.class,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                seedu.recipe.storage.JsonSerializableRecipeBook.MESSAGE_DUPLICATE_RECIPE,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 14,
      "tharshita": 6,
      "-": 21,
      "beatricetay": 7
    }
  },
  {
    "path": "src/test/java/seedu/recipe/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        userPrefs.setRecipeBookFilePath(Paths.get(\"data\" , \"recipebook.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 117,
      "beatricetay": 6
    }
  },
  {
    "path": "src/test/java/seedu/recipe/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.RecipeBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.storage.plan.JsonPlannedBookStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        JsonRecipeBookStorage recipeBookStorage \u003d new JsonRecipeBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        JsonCookedRecordBookStorage recordBookStorage \u003d new JsonCookedRecordBookStorage(getTempFilePath(\"rb\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        JsonPlannedBookStorage plannedBookStorage \u003d new JsonPlannedBookStorage(getTempFilePath(\"pb\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        storageManager \u003d new StorageManager(recipeBookStorage, recordBookStorage, plannedBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void recipeBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "         * {@link JsonRecipeBookStorage} class."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonRecipeBookStorageTest} class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        RecipeBook original \u003d getTypicalRecipeBook();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        storageManager.saveRecipeBook(original);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        ReadOnlyRecipeBook retrieved \u003d storageManager.readRecipeBook().get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertEquals(original, new RecipeBook(retrieved));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void getRecipeBookFilePath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertNotNull(storageManager.getRecipeBookFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 10,
      "tharshita": 2,
      "-": 51,
      "beatricetay": 9
    }
  },
  {
    "path": "src/test/java/seedu/recipe/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "beatricetay": 1
    }
  },
  {
    "path": "src/test/java/seedu/recipe/testutil/EditRecipeDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.EditCommand.EditRecipeDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.goal.Goal;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Step;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Fruit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Grain;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Other;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Protein;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Quantity;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Unit;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Vegetable;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * A utility class to help with building EditRecipeDescriptor objects."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class EditRecipeDescriptorBuilder {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private EditRecipeDescriptor descriptor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public EditRecipeDescriptorBuilder() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        descriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public EditRecipeDescriptorBuilder(EditRecipeDescriptor descriptor) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.descriptor \u003d new EditRecipeDescriptor(descriptor);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns an {@code EditRecipeDescriptor} with fields containing {@code recipe}\u0027s details"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public EditRecipeDescriptorBuilder(Recipe recipe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        descriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        descriptor.setName(recipe.getName());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        descriptor.setTime(recipe.getTime());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        descriptor.setGrains(recipe.getGrains());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        descriptor.setVegetables(recipe.getVegetables());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        descriptor.setProteins(recipe.getProteins());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        descriptor.setFruits(recipe.getFruits());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        descriptor.setOthers(recipe.getOthers());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        descriptor.setSteps(recipe.getSteps());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        descriptor.setGoals(recipe.getGoals());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Sets the {@code Name} of the {@code EditRecipeDescriptor} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public EditRecipeDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Sets the {@code Time} of the {@code EditRecipeDescriptor} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public EditRecipeDescriptorBuilder withTime(String time) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        descriptor.setTime(new Time(time));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Sets the {@code Step} of the {@code EditRecipeDescriptor} that we are building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public EditRecipeDescriptorBuilder withSteps(String ... steps) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        List\u003cStep\u003e stepsList \u003d Stream.of(steps).map(Step::new).collect(Collectors.toList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        descriptor.setSteps(stepsList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Parses the {@code goals} into a {@code Set\u003cGoal\u003e} and set it to the {@code EditRecipeDescriptor}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public EditRecipeDescriptorBuilder withGoals(String... goals) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Set\u003cGoal\u003e goalSet \u003d Stream.of(goals).map(Goal::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        descriptor.setGoals(goalSet);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Helper function for ingredients. Parses the {@code quantity} into a {@code Quantity}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private Quantity getQuantity(String quantity) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        while (index \u003c quantity.length() \u0026\u0026 !Character.isLetter(quantity.charAt(index))) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        double magnitude \u003d Double.parseDouble(quantity.substring(0, index));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String unitString \u003d quantity.substring(index);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Unit unit \u003d null;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        switch (unitString) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        case \"ml\":"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            unit \u003d Unit.MILLILITER;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        case \"g\":"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            unit \u003d Unit.GRAM;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        case \"tbsp\":"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            unit \u003d Unit.TABLESPOON;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        case \"tsp\":"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            unit \u003d Unit.TEASPOON;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        case \"cup\":"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            unit \u003d Unit.CUP;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            System.out.println(\"Unit not supported\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return new Quantity(magnitude, unit);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Parses the {@code grains} into a {@code Set\u003cGrain\u003e} and set it to the {@code EditRecipeDescriptor}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public EditRecipeDescriptorBuilder withGrains(String... grains) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Set\u003cGrain\u003e grainSet \u003d Stream.of(grains).map(grain -\u003e {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            String[] details \u003d grain.split(\",\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return new Grain(details[1], getQuantity(details[0]));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        descriptor.setGrains(grainSet);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Parses the {@code vegetables} into a {@code Set\u003cVegetable\u003e} and set it to the {@code EditRecipeDescriptor}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public EditRecipeDescriptorBuilder withVegetables(String... vegetables) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Set\u003cVegetable\u003e vegetableSet \u003d Stream.of(vegetables).map(vegetable -\u003e {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            String[] details \u003d vegetable.split(\",\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return new Vegetable(details[1], getQuantity(details[0]));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        descriptor.setVegetables(vegetableSet);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Parses the {@code proteins} into a {@code Set\u003cProtein\u003e} and set it to the {@code EditRecipeDescriptor}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public EditRecipeDescriptorBuilder withProteins(String... proteins) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Set\u003cProtein\u003e proteinSet \u003d Stream.of(proteins).map(protein -\u003e {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            String[] details \u003d protein.split(\",\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return new Protein(details[1], getQuantity(details[0]));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        descriptor.setProteins(proteinSet);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Parses the {@code fruits} into a {@code Set\u003cFruit\u003e} and set it to the {@code EditRecipeDescriptor}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public EditRecipeDescriptorBuilder withFruits(String... fruits) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Set\u003cFruit\u003e fruitSet \u003d Stream.of(fruits).map(fruit -\u003e {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            String[] details \u003d fruit.split(\",\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return new Fruit(details[1], getQuantity(details[0]));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        descriptor.setFruits(fruitSet);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Parses the {@code others} into a {@code Set\u003cOther\u003e} and set it to the {@code EditRecipeDescriptor}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public EditRecipeDescriptorBuilder withOthers(String... others) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Set\u003cOther\u003e otherSet \u003d Stream.of(others).map(other -\u003e {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            String[] details \u003d other.split(\",\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return new Other(details[1], getQuantity(details[0]));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        descriptor.setOthers(otherSet);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public EditRecipeDescriptor build() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 5,
      "tharshita": 67,
      "beatricetay": 120
    }
  },
  {
    "path": "src/test/java/seedu/recipe/testutil/RecipeBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.RecipeBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * A utility class to help with building RecipeBook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " *     {@code RecipeBook ab \u003d new RecipeBookBuilder().withRecipe(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class RecipeBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private RecipeBook recipeBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public RecipeBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        recipeBook \u003d new RecipeBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public RecipeBookBuilder(RecipeBook recipeBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.recipeBook \u003d recipeBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Adds a new {@code Recipe} to the {@code RecipeBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public RecipeBookBuilder withRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        recipeBook.addRecipe(recipe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public RecipeBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return recipeBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 31,
      "beatricetay": 3
    }
  },
  {
    "path": "src/test/java/seedu/recipe/testutil/RecipeBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.goal.Goal;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Step;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Fruit;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Grain;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Other;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Protein;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Quantity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Unit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Vegetable;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * A utility class to help with building Recipe objects."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class RecipeBuilder {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Egg Tomato Stir Fry\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String DEFAULT_TIME \u003d \"10\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final boolean DEFAULT_FAVOURITE \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final Step DEFAULT_STEP \u003d new Step(\"Cut tomatoes into crescent shaped slices\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final Quantity DEFAULT_QUANTITY \u003d new Quantity(100, Unit.GRAM);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final Grain DEFAULT_GRAIN \u003d new Grain(\"Bread\", DEFAULT_QUANTITY);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final Vegetable DEFAULT_VEGETABLE \u003d new Vegetable(\"Celery\", DEFAULT_QUANTITY);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final Protein DEFAULT_PROTEIN \u003d new Protein(\"Minced Meat\", DEFAULT_QUANTITY);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final Other DEFAULT_OTHER \u003d new Other(\"Oil\", DEFAULT_QUANTITY);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private Time time;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private boolean isFavourite;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private Set\u003cGrain\u003e grains;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private Set\u003cVegetable\u003e vegetables;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private Set\u003cProtein\u003e proteins;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private Set\u003cFruit\u003e fruits;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private Set\u003cOther\u003e others;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private List\u003cStep\u003e steps;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private Set\u003cGoal\u003e goals;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private boolean isDefaultGrainPresent;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    // flag is added to check whether the default grain ingredient has been replaced"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public RecipeBuilder() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        time \u003d new Time(DEFAULT_TIME);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        isFavourite \u003d DEFAULT_FAVOURITE;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        grains \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        grains.add(DEFAULT_GRAIN);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        isDefaultGrainPresent \u003d true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        vegetables \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        proteins \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        fruits \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        others \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        steps \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        steps.add(DEFAULT_STEP);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        goals \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Initializes the RecipeBuilder with the data of {@code recipeToCopy}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public RecipeBuilder(Recipe recipeToCopy) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        name \u003d recipeToCopy.getName();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        time \u003d recipeToCopy.getTime();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        grains \u003d new TreeSet\u003c\u003e(recipeToCopy.getGrains());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        vegetables \u003d new TreeSet\u003c\u003e(recipeToCopy.getVegetables());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        proteins \u003d new TreeSet\u003c\u003e(recipeToCopy.getProteins());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        fruits \u003d new TreeSet\u003c\u003e(recipeToCopy.getFruits());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        others \u003d new TreeSet\u003c\u003e(recipeToCopy.getOthers());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        isFavourite \u003d recipeToCopy.isFavourite();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        steps \u003d recipeToCopy.getSteps();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        goals \u003d new HashSet\u003c\u003e(recipeToCopy.getGoals());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Sets the {@code Name} of the {@code Recipe} that we are building."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public RecipeBuilder withName(String name) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Parses the {@code goals} into a {@code Set\u003cGoal\u003e} and set it to the {@code Recipe} that we are building."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public RecipeBuilder withGoals(String ... goals) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.goals \u003d SampleDataUtil.getGoalSet(goals);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Sets the {@code Time} of the {@code Recipe} that we are building."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public RecipeBuilder withTime(String time) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.time \u003d new Time(time);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Sets the {@code Step} of the {@code Recipe} that we are building."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public RecipeBuilder withSteps(String ... steps) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.steps \u003d SampleDataUtil.getStepsList(steps);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Parses the {@code grains} into a {@code Set\u003cGrain\u003e} and set it to the {@code Recipe} that we are building."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public RecipeBuilder withGrains(String ... grains) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        isDefaultGrainPresent \u003d false; // default grain is replaced"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.grains \u003d SampleDataUtil.getGrainSet(grains);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Parses the {@code vegetables} into a {@code Set\u003cVegetable\u003e} and set it to"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * the {@code Recipe} that we are building."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public RecipeBuilder withVegetables(String ... vegetables) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (isDefaultGrainPresent) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            // replaces default grain with the given vegetable(s)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            this.grains \u003d SampleDataUtil.emptyGrainSet();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            isDefaultGrainPresent \u003d false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.vegetables \u003d SampleDataUtil.getVegetableSet(vegetables);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Parses the {@code proteins} into a {@code Set\u003cProtein\u003e} and set it to the {@code Recipe} that we are building."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public RecipeBuilder withProteins(String ... proteins) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (isDefaultGrainPresent) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            // replaces default grain with the given protein(s)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            this.grains \u003d SampleDataUtil.emptyGrainSet();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            isDefaultGrainPresent \u003d false;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.proteins \u003d SampleDataUtil.getProteinSet(proteins);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Parses the {@code fruits} into a {@code Set\u003cFruit\u003e} and set it to the {@code Recipe} that we are building."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public RecipeBuilder withFruits(String ... fruits) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (isDefaultGrainPresent) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            // replaces default grain with the given fruit(s)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            this.grains \u003d SampleDataUtil.emptyGrainSet();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            isDefaultGrainPresent \u003d false;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.fruits \u003d SampleDataUtil.getFruitSet(fruits);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Parses the {@code others} into a {@code Set\u003cOther\u003e} and set it to the {@code Recipe} that we are building."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public RecipeBuilder withOthers(String ... others) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (isDefaultGrainPresent) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            // replaces default grain with the given other(s)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            this.grains \u003d SampleDataUtil.emptyGrainSet();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            isDefaultGrainPresent \u003d false;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.others \u003d SampleDataUtil.getOtherSet(others);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public Recipe build() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return new Recipe(name, time, grains, vegetables, proteins, fruits, others, steps, goals, isFavourite);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 15,
      "tharshita": 64,
      "beatricetay": 106
    }
  },
  {
    "path": "src/test/java/seedu/recipe/testutil/RecipeUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_GOAL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_FRUIT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_GRAIN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_OTHER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_PROTEIN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT_VEGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_STEP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.logic.commands.EditCommand.EditRecipeDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.goal.Goal;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Step;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Fruit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Grain;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Other;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Protein;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.ingredient.Vegetable;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * A utility class for Recipe."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class RecipeUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns an add command string for adding the {@code recipe}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static String getAddCommand(Recipe recipe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getRecipeDetails(recipe);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns the part of command string for the given {@code recipe}\u0027s details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static String getRecipeDetails(Recipe recipe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        sb.append(PREFIX_NAME).append(recipe.getName().fullName).append(\" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        sb.append(PREFIX_TIME).append(recipe.getTime().value).append(\" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        recipe.getGrains().forEach(grain -\u003e sb.append(PREFIX_INGREDIENT_GRAIN)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .append(grain.getQuantity() + \",\" + grain.getIngredientName()).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        recipe.getVegetables().forEach(vege -\u003e sb.append(PREFIX_INGREDIENT_VEGE)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .append(vege.getQuantity() + \",\" + vege.getIngredientName()).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        recipe.getProteins().forEach(protein -\u003e sb.append(PREFIX_INGREDIENT_PROTEIN)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .append(protein.getQuantity() + \",\" + protein.getIngredientName()).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        recipe.getOthers().forEach(other -\u003e sb.append(PREFIX_INGREDIENT_OTHER)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .append(other.getQuantity() + \",\" + other.getIngredientName()).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        recipe.getSteps().forEach(step -\u003e sb.append(PREFIX_STEP).append(step.value).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        recipe.getGoals().forEach(s -\u003e sb.append(PREFIX_GOAL).append(s.goalName).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns the part of command string for the given {@code EditRecipeDescriptor}\u0027s details."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static String getEditRecipeDescriptorDetails(EditRecipeDescriptor descriptor) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        descriptor.getTime().ifPresent(time -\u003e sb.append(PREFIX_TIME).append(time.value).append(\" \"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (descriptor.getGrains().isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            Set\u003cGrain\u003e grains \u003d descriptor.getGrains().get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            if (grains.isEmpty()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                sb.append(PREFIX_INGREDIENT_GRAIN).append(\" \");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                grains.forEach(grain -\u003e sb.append(PREFIX_INGREDIENT_GRAIN).append(grain.getQuantity() + \",\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                        + grain.getIngredientName()).append(\" \"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (descriptor.getVegetables().isPresent()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            Set\u003cVegetable\u003e vegetables \u003d descriptor.getVegetables().get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            if (vegetables.isEmpty()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                sb.append(PREFIX_INGREDIENT_VEGE).append(\" \");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                vegetables.forEach(vegetable -\u003e sb.append(PREFIX_INGREDIENT_VEGE).append(vegetable.getQuantity() + \",\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                        + vegetable.getIngredientName()).append(\" \"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (descriptor.getProteins().isPresent()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            Set\u003cProtein\u003e proteins \u003d descriptor.getProteins().get();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            if (proteins.isEmpty()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                sb.append(PREFIX_INGREDIENT_PROTEIN).append(\" \");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                proteins.forEach(protein -\u003e sb.append(PREFIX_INGREDIENT_PROTEIN).append(protein.getQuantity() + \",\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                        + protein.getIngredientName()).append(\" \"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (descriptor.getFruits().isPresent()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            Set\u003cFruit\u003e fruits \u003d descriptor.getFruits().get();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            if (fruits.isEmpty()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                sb.append(PREFIX_INGREDIENT_FRUIT).append(\" \");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                fruits.forEach(fruit -\u003e sb.append(PREFIX_INGREDIENT_FRUIT).append(fruit.getQuantity() + \",\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                    + fruit.getIngredientName()).append(\" \"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (descriptor.getOthers().isPresent()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            Set\u003cOther\u003e others \u003d descriptor.getOthers().get();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            if (others.isEmpty()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                sb.append(PREFIX_INGREDIENT_OTHER).append(\" \");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                others.forEach(other -\u003e sb.append(PREFIX_INGREDIENT_OTHER).append(other.getQuantity() + \",\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                        + other.getIngredientName()).append(\" \"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (descriptor.getSteps().isPresent()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            List\u003cStep\u003e steps \u003d descriptor.getSteps().get();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (steps.isEmpty()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                sb.append(PREFIX_STEP);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                steps.forEach(step -\u003e sb.append(PREFIX_STEP).append(step.value).append(\" \"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (descriptor.getGoals().isPresent()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            Set\u003cGoal\u003e goals \u003d descriptor.getGoals().get();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            if (goals.isEmpty()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                sb.append(PREFIX_GOAL);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                goals.forEach(s -\u003e sb.append(PREFIX_GOAL).append(s.goalName).append(\" \"));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 13,
      "tharshita": 15,
      "-": 28,
      "beatricetay": 76
    }
  },
  {
    "path": "src/test/java/seedu/recipe/testutil/RecordBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "package seedu.recipe.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.cooked.CookedRecordBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.cooked.Record;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * A utility class to help with building RecordBook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": " *     {@code RecordBook ab \u003d new RecordBookBuilder().withRecord(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class RecordBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private CookedRecordBook cookedRecordBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public RecordBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        cookedRecordBook \u003d new CookedRecordBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public RecordBookBuilder(CookedRecordBook cookedRecordBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.cookedRecordBook \u003d cookedRecordBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Adds a new {@code Record} to the {@code RecordBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @return recordbookbuilder object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public RecordBookBuilder withRecord(Record record) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        cookedRecordBook.addRecord(record);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public CookedRecordBook build() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return cookedRecordBook;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 35
    }
  },
  {
    "path": "src/test/java/seedu/recipe/testutil/RecordBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "package seedu.recipe.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.cooked.Record;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.goal.Goal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.recipe.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * A utility class to help with building Record objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class RecordBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Egg Tomato Stir Fry\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"2020-04-01\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private Set\u003cGoal\u003e goals;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public RecordBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        date \u003d new Date(DEFAULT_DATE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        goals \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Initializes the RecordBuilder with the data of {@code recordToCopy}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public RecordBuilder(Record recordToCopy) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        name \u003d recordToCopy.getName();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        date \u003d recordToCopy.getDate();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        goals \u003d recordToCopy.getGoals();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Sets the {@code Name} of the {@code Record} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public RecordBuilder withName(String name) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Sets the {@code Date} of the {@code Record} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public RecordBuilder withDate(String date) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.date \u003d new Date(date);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Parses the {@code goals} into a {@code Set\u003cGoal\u003e} and set it to the {@code Record} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public RecordBuilder withGoals(String ... goals) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.goals \u003d SampleDataUtil.getGoalSet(goals);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public Record build() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return new Record(name, date, goals);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 67
    }
  },
  {
    "path": "src/test/java/seedu/recipe/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 71,
      "beatricetay": 1
    }
  },
  {
    "path": "src/test/java/seedu/recipe/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns the middle index of the recipe in the {@code model}\u0027s recipe list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return Index.fromOneBased(model.getFilteredRecipeList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns the last index of the recipe in the {@code model}\u0027s recipe list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return Index.fromOneBased(model.getFilteredRecipeList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns the recipe in the {@code model}\u0027s recipe list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static Recipe getRecipe(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return model.getFilteredRecipeList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 7,
      "-": 44,
      "beatricetay": 4
    }
  },
  {
    "path": "src/test/java/seedu/recipe/testutil/TypicalDates.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * A utility class containing a list of {@code Date} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "public class TypicalDates {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final Date DATE_IN_PAST \u003d new Date(\"2000-05-05\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final Date DATE_IN_FUTURE \u003d new Date(\"3000-05-05\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final Date DATE_TODAY \u003d Date.today();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "beatricetay": 12
    }
  },
  {
    "path": "src/test/java/seedu/recipe/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final Index INDEX_FIRST_RECIPE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final Index INDEX_SECOND_RECIPE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final Index INDEX_THIRD_RECIPE \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 3,
      "-": 7,
      "beatricetay": 2
    }
  },
  {
    "path": "src/test/java/seedu/recipe/testutil/TypicalRecipes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.VALID_FRUIT_FISH;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.VALID_FRUIT_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.VALID_GOAL_GRAIN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.VALID_GOAL_PROTEIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.VALID_GRAIN_FISH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.VALID_GRAIN_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.VALID_NAME_FISH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.VALID_NAME_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.VALID_OTHER_FISH;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.VALID_OTHER_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.VALID_PROTEIN_FISH;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.VALID_PROTEIN_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.VALID_STEP_FISH;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.VALID_STEP_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.VALID_TIME_FISH;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.VALID_TIME_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.VALID_VEGE_FISH;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.logic.commands.CommandTestUtil.VALID_VEGE_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.RecipeBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.model.recipe.Recipe;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * A utility class containing a list of {@code Recipe} objects to be used in tests."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class TypicalRecipes {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final Recipe CAESAR_SALAD \u003d new RecipeBuilder().withName(\"Caesar Salad\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            .withTime(\"10\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withVegetables(\"100g, Lettuce\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withSteps(\"Cut tomatoes\", \"Remove honeydew skin\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withGoals(\"Herbivore\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final Recipe GRILLED_SANDWICH \u003d new RecipeBuilder().withName(\"Grilled Sandwich\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withTime(\"10\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withGrains(\"50g, Bread\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withOthers(\"50g, Cheese\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withSteps(\"Spread butter on bread\", \"Heat pan to medium heat\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withGoals(\"Wholesome Wholemeal\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final Recipe BOILED_CHICKEN \u003d new RecipeBuilder().withName(\"Boiled Chicken\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withTime(\"10\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withProteins(\"100g, Chicken\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withSteps(\"Dice chicken\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withGoals(\"Bulk like the Hulk\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final Recipe CHOCOLATE_CAKE \u003d new RecipeBuilder().withName(\"Chocolate Cake\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withTime(\"120\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withOthers(\"100g, Sugar\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            .withSteps(\"Caramelize sugar\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final Recipe OMELET \u003d new RecipeBuilder().withName(\"Omelet\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withTime(\"15\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withProteins(\"50g, Egg\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            .withSteps(\"Crack and beat eggs\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final Recipe STEAMED_EGG \u003d new RecipeBuilder().withName(\"Steamed Egg\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withTime(\"15\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withProteins(\"50g, Egg\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            .withSteps(\"Pour water into steamer and bring to a boil\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final Recipe TUNA_BREAD \u003d new RecipeBuilder().withName(\"Tuna Bread\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withTime(\"60\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withGrains(\"100g, Bread\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withProteins(\"100g, Tuna\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withGoals(\"Bulk like the Hulk\", \"Wholesome Wholemeal\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            .withSteps(\"Slice tuna\").build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final Recipe FISH_TACO \u003d new RecipeBuilder().withName(\"Fish Taco\").withTime(\"60\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withGrains(\"50g, Taco\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withProteins(\"100g, Fish\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            .withSteps(\"Grill fish until skin is slightly crispy and meat is opaque and flaky\").build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final Recipe VEGETARIAN_PIZZA \u003d new RecipeBuilder().withName(\"Vegetarian Pizza\").withTime(\"45\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withGrains(\"300g, Dough\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withVegetables(\"100g, Capsicum\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withOthers(\"100g, Tomato sauce\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            .withGoals(\"Herbivore\").withSteps(\"Roll dough until stretchy and thin\").build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    // Manually added - Recipe\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final Recipe TURKEY_SANDWICH \u003d new RecipeBuilder().withName(VALID_NAME_TURKEY_SANDWICH)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withTime(VALID_TIME_TURKEY_SANDWICH)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withGrains(VALID_GRAIN_TURKEY_SANDWICH)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withVegetables(VALID_VEGE_TURKEY_SANDWICH)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withProteins(VALID_PROTEIN_TURKEY_SANDWICH)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withFruits(VALID_FRUIT_TURKEY_SANDWICH)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withOthers(VALID_OTHER_TURKEY_SANDWICH)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            .withGoals(VALID_GOAL_GRAIN).withSteps(VALID_STEP_TURKEY_SANDWICH).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final Recipe FISH \u003d new RecipeBuilder().withName(VALID_NAME_FISH).withTime(VALID_TIME_FISH)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withGrains(VALID_GRAIN_FISH)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withVegetables(VALID_VEGE_FISH)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withProteins(VALID_PROTEIN_FISH)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withFruits(VALID_FRUIT_FISH)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withOthers(VALID_OTHER_FISH)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            .withGoals(VALID_GOAL_PROTEIN).withSteps(VALID_STEP_FISH).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private TypicalRecipes() {} // prevents instantiation"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Returns an {@code RecipeBook} with all the typical recipes."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static RecipeBook getTypicalRecipeBook() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        RecipeBook ab \u003d new RecipeBook();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        for (Recipe recipe : getTypicalRecipes()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            ab.addRecipe(recipe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static List\u003cRecipe\u003e getTypicalRecipes() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CAESAR_SALAD, GRILLED_SANDWICH, BOILED_CHICKEN, CHOCOLATE_CAKE,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                OMELET, STEAMED_EGG, TUNA_BREAD));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 12,
      "tharshita": 5,
      "-": 25,
      "beatricetay": 82
    }
  },
  {
    "path": "src/test/java/seedu/recipe/testutil/TypicalRecords.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "package seedu.recipe.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.cooked.CookedRecordBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.recipe.model.cooked.Record;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * A utility class containing a list of {@code Record} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class TypicalRecords {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final Record CAESAR_SALAD \u003d new RecordBuilder().withName(\"Caesar Salad\").build();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final Record GRILLED_SANDWICH \u003d new RecordBuilder().withName(\"Grilled Sandwich\").build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final Record BOILED_CHICKEN \u003d new RecordBuilder().withName(\"Boiled Chicken\").build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final Record CHOCOLATE_CAKE \u003d new RecordBuilder().withName(\"Chocolate Cake\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final Record OMELET \u003d new RecordBuilder().withName(\"Omelet\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final Record STEAMED_EGG \u003d new RecordBuilder().withName(\"Steamed Egg\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final Record TUNA_BREAD \u003d new RecordBuilder().withName(\"Tuna Bread\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final Record FISH_TACO \u003d new RecordBuilder().withName(\"Fish Taco\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final Record VEGETARIAN_PIZZA \u003d new RecordBuilder().withName(\"Vegetarian Pizza\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private TypicalRecords() {} // prevents instantiation"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns an {@code RecordBook} with all the typical Records."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static CookedRecordBook getTypicalRecordBook() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        CookedRecordBook ab \u003d new CookedRecordBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        for (Record record : getTypicalRecords()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            ab.addRecord(record);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static List\u003cRecord\u003e getTypicalRecords() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CAESAR_SALAD, GRILLED_SANDWICH, BOILED_CHICKEN, CHOCOLATE_CAKE,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                OMELET, STEAMED_EGG, TUNA_BREAD));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 54
    }
  },
  {
    "path": "src/test/java/seedu/recipe/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "beatricetay": 1
    }
  },
  {
    "path": "src/test/java/seedu/recipe/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.recipe.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.recipe.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.recipe.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 111,
      "beatricetay": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "\u003c?import seedu.recipe.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "beatricetay": 1
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "\u003cfx:root type\u003d\"seedu.recipe.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "beatricetay": 1
    }
  }
]
