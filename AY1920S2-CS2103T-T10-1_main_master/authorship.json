[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        \u0027site-name\u0027: \u0027HealthyBaby\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S2-CS2103T-T10-1/main\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 2,
      "-": 153
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.model.RecipeBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.storage.JsonRecipeBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.storage.RecipeBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing RecipeBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        RecipeBookStorage recipeBookStorage \u003d new JsonRecipeBookStorage(userPrefs.getRecipeBookFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        storage \u003d new StorageManager(recipeBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s recipe book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * The data from the sample recipe book will be used instead if {@code storage}\u0027s recipe book is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * or an empty recipe book will be used instead if errors occur when reading {@code storage}\u0027s recipe book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Optional\u003cReadOnlyRecipeBook\u003e recipeBookOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        ReadOnlyRecipeBook initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            recipeBookOptional \u003d storage.readRecipeBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (!recipeBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample RecipeBook\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            initialData \u003d recipeBookOptional.orElseGet(SampleDataUtil::getSampleRecipeBook);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty RecipeBook\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            initialData \u003d new RecipeBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty RecipeBook\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            initialData \u003d new RecipeBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty RecipeBook\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        logger.info(\"Starting RecipeBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Recipe Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 23,
      "-": 160
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final String MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX \u003d \"The recipe index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final String MESSAGE_RECIPES_LISTED_OVERVIEW \u003d \"%1$d recipes listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 2,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Returns the RecipeBook."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @see seedu.address.model.Model#getRecipeBook()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    ReadOnlyRecipeBook getRecipeBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of recipes */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    ObservableList\u003cRecipe\u003e getFilteredRecipeList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    Path getRecipeBookFilePath();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 5,
      "tharshita": 3,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.logic.parser.RecipeBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final RecipeBookParser recipeBookParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        recipeBookParser \u003d new RecipeBookParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Command command \u003d recipeBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            storage.saveRecipeBook(model.getRecipeBook());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public ReadOnlyRecipeBook getRecipeBook() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return model.getRecipeBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public ObservableList\u003cRecipe\u003e getFilteredRecipeList() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return model.getFilteredRecipeList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public Path getRecipeBookFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return model.getRecipeBookFilePath();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 10,
      "tharshita": 3,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GOAL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_GRAIN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_OTHER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_PROTEIN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_VEGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STEP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Adds a recipe to the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a recipe to the address book. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            + PREFIX_TIME + \"TIME \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_GRAIN + \"GRAIN]...\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_VEGE + \"VEGETABLE]...\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_PROTEIN + \"PROTEIN]...\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_OTHER + \"OTHER]...\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"[\" + PREFIX_STEP + \"STEP]... \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            + \"[\" + PREFIX_GOAL + \"GOAL]...\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + PREFIX_NAME + \"Caesar Salad \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + PREFIX_TIME + \"10 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + PREFIX_INGREDIENT_VEGE + \"100, Tomato\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + PREFIX_INGREDIENT_VEGE + \"100, Lettuce\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + PREFIX_INGREDIENT_OTHER + \"50, Honeydew\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + PREFIX_STEP + \"Cut tomatoes \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + PREFIX_STEP + \"Remove honeydew skin \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + PREFIX_GOAL + \"Herbivore \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New recipe added: %1$s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RECIPE \u003d \"This recipe already exists in the address book\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private final Recipe toAdd;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Recipe}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public AddCommand(Recipe recipe) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireNonNull(recipe);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        toAdd \u003d recipe;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (model.hasRecipe(toAdd)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_RECIPE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        model.addRecipe(toAdd);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 6,
      "tharshita": 18,
      "-": 40,
      "beatricetay": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.model.RecipeBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Clears the recipe book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Recipe book has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        model.setRecipeBook(new RecipeBook());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 4,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Deletes a recipe identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \": Deletes the recipe identified by the index number(s) used in the displayed recipe list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"Parameters: INDEX NUMBER(s) (must be positive integers)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final Index[] targetIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public DeleteCommand(Index[] targetIndex) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredRecipeList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder().append(\"Deleted \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        for (int i \u003d 0; i \u003c targetIndex.length; i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            Index indexAfterEachDeletion \u003d Index.fromZeroBased(targetIndex[i].getZeroBased() - i);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (indexAfterEachDeletion.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            Recipe recipeToDelete \u003d lastShownList.get(indexAfterEachDeletion.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            model.deleteRecipe(recipeToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (i \u003d\u003d targetIndex.length - 1 \u0026\u0026 targetIndex.length !\u003d 1) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                sb.append(\" and \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            sb.append(recipeToDelete.getName().toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (i \u003c targetIndex.length - 2) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                sb.append(\", \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        sb.append(\" from recipe book!\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return new CommandResult(sb.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                \u0026\u0026 Arrays.equals(targetIndex, ((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 21,
      "tharshita": 5,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GOAL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_GRAIN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_OTHER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_PROTEIN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_VEGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STEP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_RECIPES;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.goal.Goal;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.address.model.recipe.Step;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Time;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.address.model.recipe.ingredient.Ingredient;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Edits the details of an existing recipe in the address book."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the recipe identified \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            + \"by the index number used in the displayed recipe list. \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            + \"[\" + PREFIX_TIME + \"TIME] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_GRAIN + \"GRAIN]...\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_VEGE + \"VEGETABLE]...\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_PROTEIN + \"PROTEIN]...\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_OTHER + \"OTHER]...\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + \"[\" + PREFIX_STEP + \"STEP]... \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            + \"[\" + PREFIX_GOAL + \"GOAL]...\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + PREFIX_TIME + \"10 \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + PREFIX_INGREDIENT_VEGE + \"Insert new vegetable here.\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + PREFIX_INGREDIENT_PROTEIN + \"Insert new protein-rich ingredient here.\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + PREFIX_STEP + \"Insert new step here.\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + PREFIX_GOAL + \"Insert new goal here.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final String MESSAGE_EDIT_RECIPE_SUCCESS \u003d \"Edited Recipe: %1$s\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RECIPE \u003d \"This recipe already exists in the address book.\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private final EditRecipeDescriptor editRecipeDescriptor;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @param index of the recipe in the filtered recipe list to edit"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @param editRecipeDescriptor details to edit the recipe with"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public EditCommand(Index index, EditRecipeDescriptor editRecipeDescriptor) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireNonNull(editRecipeDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.editRecipeDescriptor \u003d new EditRecipeDescriptor(editRecipeDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredRecipeList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Recipe recipeToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Recipe editedRecipe \u003d createEditedRecipe(recipeToEdit, editRecipeDescriptor);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (!recipeToEdit.isSameRecipe(editedRecipe) \u0026\u0026 model.hasRecipe(editedRecipe)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_RECIPE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        model.setRecipe(recipeToEdit, editedRecipe);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        model.updateFilteredRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_RECIPE_SUCCESS, editedRecipe));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Creates and returns a {@code Recipe} with the details of {@code recipeToEdit}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * edited with {@code editRecipeDescriptor}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private static Recipe createEditedRecipe(Recipe recipeToEdit, EditRecipeDescriptor editRecipeDescriptor) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assert recipeToEdit !\u003d null;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Name updatedName \u003d editRecipeDescriptor.getName().orElse(recipeToEdit.getName());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Time updatedTime \u003d editRecipeDescriptor.getTime().orElse(recipeToEdit.getTime());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        boolean isFavourite \u003d editRecipeDescriptor.getFavourite();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        List\u003cStep\u003e updatedStep \u003d editRecipeDescriptor.getSteps().orElse(recipeToEdit.getSteps());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Set\u003cGoal\u003e updatedGoals \u003d editRecipeDescriptor.getGoals().orElse(recipeToEdit.getGoals());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Set\u003cIngredient\u003e updatedIngredients \u003d editRecipeDescriptor.getIngredients()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .orElse(recipeToEdit.getIngredients());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return new Recipe(updatedName, updatedTime, updatedIngredients, updatedStep, updatedGoals, isFavourite);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                \u0026\u0026 editRecipeDescriptor.equals(e.editRecipeDescriptor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Stores the details to edit the recipe with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * corresponding field value of the recipe."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static class EditRecipeDescriptor {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        private Time time;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        private boolean isFavourite;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        private List\u003cStep\u003e steps;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        private Set\u003cGoal\u003e goals;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        private Set\u003cIngredient\u003e ingredients;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        public EditRecipeDescriptor() {}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tharshita"
        },
        "content": "         * A defensive copy of {@code goals} is used internally."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        public EditRecipeDescriptor(EditRecipeDescriptor toCopy) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            setTime(toCopy.time);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            setFavourite(toCopy.isFavourite);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            setSteps(toCopy.steps);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            setGoals(toCopy.goals);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            setIngredients(toCopy.ingredients);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, time, ingredients, steps, goals);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        public void setTime(Time time) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            this.time \u003d time;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        public Optional\u003cTime\u003e getTime() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            return Optional.ofNullable(time);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        public void setFavourite(boolean isFavourite) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            this.isFavourite \u003d isFavourite;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        public boolean getFavourite() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return isFavourite;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "         * Sets {@code ingredients} to this object\u0027s {@code ingredients}."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "         * A defensive copy of {@code ingredients} is used internally."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        public void setIngredients(Set\u003cIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            this.ingredients \u003d (ingredients !\u003d null) ? new TreeSet\u003c\u003e(ingredients) : null;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "         * Returns an unmodifiable ingredient set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code ingredients} is null."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        public Optional\u003cSet\u003cIngredient\u003e\u003e getIngredients() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return (ingredients !\u003d null) ? Optional.of(Collections.unmodifiableSet(ingredients)) : Optional.empty();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "         * Sets {@code steps} to this object\u0027s {@code steps}."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "         * A defensive copy of {@code steps} is used internally."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        public void setSteps(List\u003cStep\u003e steps) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            this.steps \u003d (steps !\u003d null) ? new ArrayList\u003c\u003e(steps) : null;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "         * Returns an unmodifiable steps list, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code steps} is null."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        public Optional\u003cList\u003cStep\u003e\u003e getSteps() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return (steps !\u003d null) ? Optional.of(Collections.unmodifiableList(steps)) : Optional.empty();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tharshita"
        },
        "content": "         * Sets {@code goals} to this object\u0027s {@code goals}."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tharshita"
        },
        "content": "         * A defensive copy of {@code goals} is used internally."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        public void setGoals(Set\u003cGoal\u003e goals) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            this.goals \u003d (goals !\u003d null) ? new HashSet\u003c\u003e(goals) : null;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tharshita"
        },
        "content": "         * Returns an unmodifiable goal set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tharshita"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code goals} is null."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        public Optional\u003cSet\u003cGoal\u003e\u003e getGoals() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            return (goals !\u003d null) ? Optional.of(Collections.unmodifiableSet(goals)) : Optional.empty();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            if (!(other instanceof EditRecipeDescriptor)) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            EditRecipeDescriptor e \u003d (EditRecipeDescriptor) other;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            System.out.println(\"Ingredients test: \" + getIngredients().equals(e.getIngredients()));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                    \u0026\u0026 getTime().equals(e.getTime())"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                    \u0026\u0026 getIngredients().equals(e.getIngredients())"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    \u0026\u0026 getSteps().equals(e.getSteps())"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                    \u0026\u0026 getGoals().equals(e.getGoals());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 22,
      "tharshita": 64,
      "-": 146,
      "beatricetay": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FavouriteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Favourites a recipe identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class FavouriteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"favourite\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \": Favourites the recipe identified by the index number(s) used in the displayed recipe list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"Parameters: INDEX NUMBER(s) (must be positive integers)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final Index[] targetIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public FavouriteCommand(Index[] targetIndex) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredRecipeList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder().append(\"Added \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        for (int i \u003d 0; i \u003c targetIndex.length; i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (targetIndex[i].getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            Recipe recipeToFavourite \u003d lastShownList.get(targetIndex[i].getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            model.favouriteRecipe(recipeToFavourite);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (i \u003d\u003d targetIndex.length - 1 \u0026\u0026 targetIndex.length !\u003d 1) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                sb.append(\" and \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            sb.append(recipeToFavourite.getName().toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (i \u003c targetIndex.length - 2) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                sb.append(\", \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        sb.append(\" to favourites!\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return new CommandResult(sb.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                || (other instanceof FavouriteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                \u0026\u0026 Arrays.equals(targetIndex, ((FavouriteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Finds and lists all recipes in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all recipes whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        model.updateFilteredRecipeList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                String.format(Messages.MESSAGE_RECIPES_LISTED_OVERVIEW, model.getFilteredRecipeList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 5,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_RECIPES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Lists all recipes in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all recipes\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        model.updateFilteredRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 4,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UnfavouriteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Unfavourites a recipe identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class UnfavouriteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"unfavourite\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \": Unfavourites the recipe identified by the index number(s) used in the displayed recipe list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"Parameters: INDEX NUMBER(s) (must be positive integers)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final Index[] targetIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public UnfavouriteCommand(Index[] targetIndex) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredRecipeList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder().append(\"Removed \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        for (int i \u003d 0; i \u003c targetIndex.length; i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (targetIndex[i].getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            Recipe recipeToUnfavourite \u003d lastShownList.get(targetIndex[i].getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            model.unfavouriteRecipe(recipeToUnfavourite);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (i \u003d\u003d targetIndex.length - 1 \u0026\u0026 targetIndex.length !\u003d 1) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                sb.append(\" and \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            sb.append(recipeToUnfavourite.getName().toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (i \u003c targetIndex.length - 2) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                sb.append(\", \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        sb.append(\" from favourites!\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return new CommandResult(sb.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                || (other instanceof UnfavouriteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                \u0026\u0026 Arrays.equals(targetIndex, ((UnfavouriteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GOAL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_GRAIN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_OTHER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_PROTEIN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_VEGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STEP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.goal.Goal;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Step;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Time;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.address.model.recipe.ingredient.Ingredient;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_TIME, PREFIX_INGREDIENT_GRAIN,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                        PREFIX_INGREDIENT_VEGE, PREFIX_INGREDIENT_PROTEIN, PREFIX_INGREDIENT_OTHER,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                        PREFIX_STEP, PREFIX_GOAL);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_TIME, PREFIX_STEP)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Time time \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        List\u003cStep\u003e steps \u003d ParserUtil.parseSteps(argMultimap.getAllValues(PREFIX_STEP));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Set\u003cGoal\u003e goalList \u003d ParserUtil.parseGoals(argMultimap.getAllValues(PREFIX_GOAL));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Set\u003cIngredient\u003e ingredientList \u003d ParserUtil.parseGrains(argMultimap.getAllValues(PREFIX_INGREDIENT_GRAIN),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                null);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        ingredientList \u003d ParserUtil.parseVegetables(argMultimap.getAllValues(PREFIX_INGREDIENT_VEGE), ingredientList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        ingredientList \u003d ParserUtil.parseProteins(argMultimap.getAllValues(PREFIX_INGREDIENT_PROTEIN), ingredientList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        ingredientList \u003d ParserUtil.parseOthers(argMultimap.getAllValues(PREFIX_INGREDIENT_OTHER), ingredientList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // When recipe is first added, it will not be marked as favourite by default."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Recipe recipe \u003d new Recipe(name, time, ingredientList, steps, goalList, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return new AddCommand(recipe);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 4,
      "tharshita": 11,
      "-": 43,
      "beatricetay": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final Prefix PREFIX_TIME \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final Prefix PREFIX_STEP \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final Prefix PREFIX_GOAL \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final Prefix PREFIX_INGREDIENT_GRAIN \u003d new Prefix(\"ig/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final Prefix PREFIX_INGREDIENT_VEGE \u003d new Prefix(\"iv/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final Prefix PREFIX_INGREDIENT_PROTEIN \u003d new Prefix(\"ip/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final Prefix PREFIX_INGREDIENT_OTHER \u003d new Prefix(\"io/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 3,
      "-": 11,
      "beatricetay": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            Index[] index \u003d ParserUtil.parseMultipleIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 1,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GOAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_GRAIN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_OTHER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_PROTEIN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_VEGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STEP;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditRecipeDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.goal.Goal;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.model.recipe.Step;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.address.model.recipe.ingredient.Ingredient;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_TIME, PREFIX_INGREDIENT_GRAIN,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                        PREFIX_INGREDIENT_VEGE, PREFIX_INGREDIENT_PROTEIN, PREFIX_INGREDIENT_OTHER,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                        PREFIX_STEP, PREFIX_GOAL);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        EditRecipeDescriptor editRecipeDescriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            editRecipeDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TIME).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            editRecipeDescriptor.setTime(ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Optional\u003cSet\u003cIngredient\u003e\u003e optionalIngredients \u003d Optional.empty();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        optionalIngredients \u003d parseGrainsForEdit(argMultimap.getAllValues(PREFIX_INGREDIENT_GRAIN),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                optionalIngredients);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        optionalIngredients \u003d parseVegetablesForEdit(argMultimap.getAllValues(PREFIX_INGREDIENT_VEGE),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                optionalIngredients);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        optionalIngredients \u003d parseProteinsForEdit(argMultimap.getAllValues(PREFIX_INGREDIENT_PROTEIN),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                optionalIngredients);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        optionalIngredients \u003d parseOthersForEdit(argMultimap.getAllValues(PREFIX_INGREDIENT_OTHER),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                optionalIngredients);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        optionalIngredients.ifPresent(editRecipeDescriptor::setIngredients);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        parseStepsForEdit(argMultimap.getAllValues(PREFIX_STEP)).ifPresent(editRecipeDescriptor::setSteps);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        parseGoalsForEdit(argMultimap.getAllValues(PREFIX_GOAL)).ifPresent(editRecipeDescriptor::setGoals);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (!editRecipeDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return new EditCommand(index, editRecipeDescriptor);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Parses and adds the {@code Collection\u003cString\u003e grains} into the {@code Set\u003cIngredient\u003e}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * If {@code grains} contain only one element which is an empty string, no additional ingredient will be"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * added into the {@code Set\u003cIngredient\u003e} ."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private Optional\u003cSet\u003cIngredient\u003e\u003e parseGrainsForEdit(Collection\u003cString\u003e grains,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                                                         Optional\u003cSet\u003cIngredient\u003e\u003e ingredientSet)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assert grains !\u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (grains.isEmpty()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return ingredientSet;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Collection\u003cString\u003e grainSet \u003d grains.size() \u003d\u003d 1 \u0026\u0026 grains.contains(\"\") ? Collections.emptySet() : grains;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (ingredientSet.isPresent()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return Optional.of(ParserUtil.parseGrains(grainSet, ingredientSet.get()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return Optional.of(ParserUtil.parseGrains(grainSet, null));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Parses and adds the {@code Collection\u003cString\u003e vegetables} into the {@code Set\u003cIngredient\u003e}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * If {@code vegetables} contain only one element which is an empty string, no additional ingredient will be"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * added into the {@code Set\u003cIngredient\u003e}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private Optional\u003cSet\u003cIngredient\u003e\u003e parseVegetablesForEdit(Collection\u003cString\u003e vegetables,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                                                             Optional\u003cSet\u003cIngredient\u003e\u003e ingredientSet)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assert vegetables !\u003d null;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (vegetables.isEmpty()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return ingredientSet;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Collection\u003cString\u003e vegetableSet \u003d vegetables.size() \u003d\u003d 1 \u0026\u0026 vegetables.contains(\"\")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                ? Collections.emptySet()"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                : vegetables;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (ingredientSet.isPresent()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return Optional.of(ParserUtil.parseGrains(vegetableSet, ingredientSet.get()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return Optional.of(ParserUtil.parseVegetables(vegetableSet, null));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Parses and adds the {@code Collection\u003cString\u003e proteins} into the {@code Set\u003cIngredient\u003e}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * If {@code proteins} contain only one element which is an empty string, no additional ingredient will be"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * added into the {@code Set\u003cIngredient\u003e} ."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private Optional\u003cSet\u003cIngredient\u003e\u003e parseProteinsForEdit(Collection\u003cString\u003e proteins,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                                                           Optional\u003cSet\u003cIngredient\u003e\u003e ingredientSet)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assert proteins !\u003d null;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (proteins.isEmpty()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return ingredientSet;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Collection\u003cString\u003e proteinSet \u003d proteins.size() \u003d\u003d 1 \u0026\u0026 proteins.contains(\"\")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                ? Collections.emptySet()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                : proteins;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (ingredientSet.isPresent()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return Optional.of(ParserUtil.parseGrains(proteinSet, ingredientSet.get()));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return Optional.of(ParserUtil.parseGrains(proteinSet, null));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Parses and adds the {@code Collection\u003cString\u003e others} into the {@code Set\u003cIngredient\u003e}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * If {@code others} contain only one element which is an empty string, no additional ingredient will be"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * added into the {@code Set\u003cIngredient\u003e} ."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private Optional\u003cSet\u003cIngredient\u003e\u003e parseOthersForEdit(Collection\u003cString\u003e others,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                                                         Optional\u003cSet\u003cIngredient\u003e\u003e ingredientSet)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assert others !\u003d null;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (others.isEmpty()) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return ingredientSet;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Collection\u003cString\u003e otherSet \u003d others.size() \u003d\u003d 1 \u0026\u0026 others.contains(\"\") ? Collections.emptySet() : others;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (ingredientSet.isPresent()) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return Optional.of(ParserUtil.parseGrains(otherSet, ingredientSet.get()));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return Optional.of(ParserUtil.parseGrains(otherSet, null));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e goals} into a {@code Set\u003cGoal\u003e} if {@code goals} is non-empty."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * If {@code goals} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * {@code Set\u003cGoal\u003e} containing zero goals."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private Optional\u003cSet\u003cGoal\u003e\u003e parseGoalsForEdit(Collection\u003cString\u003e goals) throws ParseException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assert goals !\u003d null;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (goals.isEmpty()) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Collection\u003cString\u003e goalSet \u003d goals.size() \u003d\u003d 1 \u0026\u0026 goals.contains(\"\") ? Collections.emptySet() : goals;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return Optional.of(ParserUtil.parseGoals(goalSet));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e steps} into a {@code List\u003cStep\u003e} if {@code steps} is non-empty."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private Optional\u003cList\u003cStep\u003e\u003e parseStepsForEdit(Collection\u003cString\u003e steps) throws ParseException {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assert steps !\u003d null;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (steps.isEmpty()) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return Optional.of(ParserUtil.parseSteps(steps));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 9,
      "tharshita": 20,
      "-": 66,
      "beatricetay": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FavouriteCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.logic.commands.FavouriteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Parses input arguments and creates a new FavouriteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class FavouriteCommandParser implements Parser\u003cFavouriteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FavouriteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * and returns a FavouriteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public FavouriteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            Index[] index \u003d ParserUtil.parseMultipleIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return new FavouriteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FavouriteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 1,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.goal.Goal;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Step;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Time;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.address.model.recipe.ingredient.Grain;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.address.model.recipe.ingredient.Ingredient;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.address.model.recipe.ingredient.Other;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.address.model.recipe.ingredient.Protein;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.address.model.recipe.ingredient.Vegetable;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses multiple {@code oneBasedIndex} into an {@code Index} array and returns it."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static Index[] parseMultipleIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String[] args \u003d oneBasedIndex.trim().split(\" \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        int len \u003d args.length;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Integer[] toSort \u003d new Integer[len];"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        for (int i \u003d 0; i \u003c len; i++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            String index \u003d args[i];"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (!StringUtil.isNonZeroUnsignedInteger(index)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            toSort[i] \u003d Integer.parseInt(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Arrays.sort(toSort);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Index[] indices \u003d new Index[len];"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        for (int i \u003d 0; i \u003c len; i++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            indices[i] \u003d Index.fromOneBased(toSort[i]);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return indices;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Parses a {@code String time} into a {@code Time}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @throws ParseException if the given {@code time} is invalid."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static Time parseTime(String time) throws ParseException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        String trimmedTime \u003d time.trim();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (!Time.isValidTime(trimmedTime)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            throw new ParseException(Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return new Time(trimmedTime);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Parses a {@code String step} into an {@code Step}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @throws ParseException if the given {@code step} is invalid."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static Step parseStep(String step) throws ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireNonNull(step);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        String trimmedStep \u003d step.trim();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (!Step.isValidStep(trimmedStep)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            throw new ParseException(Step.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return new Step(trimmedStep);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e steps} into a {@code List\u003cStep\u003e}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static List\u003cStep\u003e parseSteps(Collection\u003cString\u003e steps) throws ParseException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(steps);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (steps.contains(\"\")) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new ParseException(Step.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        final List\u003cStep\u003e stepsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        for (String step : steps) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            Step nextStep \u003d parseStep(step);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (!stepsList.contains(nextStep)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                stepsList.add(nextStep);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return stepsList;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Parses a {@code String goal} into a {@code Goal}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @throws ParseException if the given {@code goal} is invalid."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static Goal parseGoal(String goal) throws ParseException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireNonNull(goal);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        String trimmedGoal \u003d goal.trim();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (!Goal.isValidGoalName(trimmedGoal)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            throw new ParseException(Goal.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return new Goal(trimmedGoal);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e goals} into a {@code Set\u003cGoal\u003e}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static Set\u003cGoal\u003e parseGoals(Collection\u003cString\u003e goals) throws ParseException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireNonNull(goals);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        final Set\u003cGoal\u003e goalSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        for (String goalName : goals) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            goalSet.add(parseGoal(goalName));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return goalSet;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Parses a {@code String grain} into a {@code Grain}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * @throws ParseException if the given {@code grain} is invalid."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static Grain parseGrain(String grain) throws ParseException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        requireNonNull(grain);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String[] splitFields \u003d grain.split(\",\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (splitFields.length !\u003d 2) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throw new ParseException(Ingredient.MESSAGE_MISSING_FIELD);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String trimmedGrainName \u003d splitFields[1].trim();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String trimmedGrainQuantity \u003d splitFields[0].trim();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (!Ingredient.isValidIngredientName(trimmedGrainName)) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throw new ParseException(Ingredient.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        double grainQuantity \u003d Double.parseDouble(trimmedGrainQuantity);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return new Grain(trimmedGrainName, grainQuantity);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e grains} and adds them to the {@code Set\u003cIngredient\u003e} ingredientSet."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static Set\u003cIngredient\u003e parseGrains(Collection\u003cString\u003e grains, Set\u003cIngredient\u003e ingredientSet)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (ingredientSet \u003d\u003d null || ingredientSet.isEmpty()) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            ingredientSet \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        requireNonNull(grains);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        for (String grain : grains) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            ingredientSet.add(parseGrain(grain));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return ingredientSet;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Parses a {@code String vegetable} into a {@code Vegetable}."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * @throws ParseException if the given {@code vegetable} is invalid."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static Vegetable parseVegetable(String vegetable) throws ParseException {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        requireNonNull(vegetable);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String[] splitFields \u003d vegetable.split(\",\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (splitFields.length !\u003d 2) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throw new ParseException(Ingredient.MESSAGE_MISSING_FIELD);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String trimmedVegetableName \u003d splitFields[1].trim();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String trimmedVegetableQuantity \u003d splitFields[0].trim();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (!Ingredient.isValidIngredientName(trimmedVegetableName)) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throw new ParseException(Ingredient.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        double vegetableQuantity \u003d Double.parseDouble(trimmedVegetableQuantity);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return new Vegetable(trimmedVegetableName, vegetableQuantity);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e vegetables} and adds them to the {@code Set\u003cIngredient\u003e} ingredientSet."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static Set\u003cIngredient\u003e parseVegetables(Collection\u003cString\u003e vegetables, Set\u003cIngredient\u003e ingredientSet)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (ingredientSet \u003d\u003d null || ingredientSet.isEmpty()) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            ingredientSet \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        requireNonNull(vegetables);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        for (String vegetable : vegetables) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            ingredientSet.add(parseVegetable(vegetable));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return ingredientSet;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Parses a {@code String protein} into a {@code Protein}."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * @throws ParseException if the given {@code protein} is invalid."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static Protein parseProtein(String protein) throws ParseException {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        requireNonNull(protein);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String[] splitFields \u003d protein.split(\",\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (splitFields.length !\u003d 2) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throw new ParseException(Ingredient.MESSAGE_MISSING_FIELD);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String trimmedProteinName \u003d splitFields[1].trim();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String trimmedProteinQuantity \u003d splitFields[0].trim();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (!Ingredient.isValidIngredientName(trimmedProteinName)) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throw new ParseException(Ingredient.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        double proteinQuantity \u003d Double.parseDouble(trimmedProteinQuantity);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return new Protein(trimmedProteinName, proteinQuantity);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e proteins} and adds them to the {@code Set\u003cIngredient\u003e} ingredientSet."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static Set\u003cIngredient\u003e parseProteins(Collection\u003cString\u003e proteins, Set\u003cIngredient\u003e ingredientSet)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (ingredientSet \u003d\u003d null || ingredientSet.isEmpty()) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            ingredientSet \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        requireNonNull(proteins);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        for (String protein : proteins) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            ingredientSet.add(parseProtein(protein));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return ingredientSet;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Parses a {@code String other} into a {@code Other}."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * @throws ParseException if the given {@code other} is invalid."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static Other parseOther(String other) throws ParseException {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        requireNonNull(other);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String[] splitFields \u003d other.split(\",\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (splitFields.length !\u003d 2) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throw new ParseException(Ingredient.MESSAGE_MISSING_FIELD);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String trimmedOtherName \u003d splitFields[1].trim();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String trimmedOtherQuantity \u003d splitFields[0].trim();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (!Ingredient.isValidIngredientName(trimmedOtherName)) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throw new ParseException(Ingredient.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        double otherQuantity \u003d Double.parseDouble(trimmedOtherQuantity);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return new Other(trimmedOtherName, otherQuantity);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e others} and adds them to the {@code Set\u003cIngredient\u003e} ingredientSet."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static Set\u003cIngredient\u003e parseOthers(Collection\u003cString\u003e others, Set\u003cIngredient\u003e ingredientSet)"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (ingredientSet \u003d\u003d null || ingredientSet.isEmpty()) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            ingredientSet \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        requireNonNull(others);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        for (String other : others) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            ingredientSet.add(parseProtein(other));"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return ingredientSet;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 43,
      "tharshita": 35,
      "-": 90,
      "beatricetay": 151
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Prefix.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * E.g. \u0027g/\u0027 in \u0027add James g/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RecipeBookParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.logic.commands.FavouriteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.logic.commands.UnfavouriteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class RecipeBookParser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        case FavouriteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return new FavouriteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        case UnfavouriteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return new UnfavouriteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 9,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UnfavouriteCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.logic.commands.UnfavouriteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Parses input arguments and creates a new UnfavouriteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class UnfavouriteCommandParser implements Parser\u003cUnfavouriteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UnfavouriteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * and returns a UnfavouriteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public UnfavouriteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            Index[] index \u003d ParserUtil.parseMultipleIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return new UnfavouriteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnfavouriteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    Predicate\u003cRecipe\u003e PREDICATE_SHOW_ALL_RECIPES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Returns the user prefs\u0027 recipe book file path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    Path getRecipeBookFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Sets the user prefs\u0027 recipe book file path."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    void setRecipeBookFilePath(Path recipeBookFilePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Replaces recipe book data with the data in {@code recipeBook}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    void setRecipeBook(ReadOnlyRecipeBook recipeBook);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /** Returns the RecipeBook */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    ReadOnlyRecipeBook getRecipeBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Returns true if a recipe with the same identity as {@code recipe} exists in the recipe book."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    boolean hasRecipe(Recipe recipe);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Deletes the given recipe."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * The recipe must exist in the recipe book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    void deleteRecipe(Recipe target);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Favourites the given recipe."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * The recipe must exist in the recipe book."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    void favouriteRecipe(Recipe target);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Unfavourites the given recipe."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * The recipe must exist in the recipe book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    void unfavouriteRecipe(Recipe target);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Adds the given recipe."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * {@code recipe} must not already exist in the recipe book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    void addRecipe(Recipe recipe);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Replaces the given recipe {@code target} with {@code editedRecipe}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * {@code target} must exist in the recipe book."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * The recipe identity of {@code editedRecipe} must not be the same as another existing recipe in the recipe book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    void setRecipe(Recipe target, Recipe editedRecipe);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /** Returns an unmodifiable view of the filtered recipe list */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    ObservableList\u003cRecipe\u003e getFilteredRecipeList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Updates the filter of the filtered recipe list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    void updateFilteredRecipeList(Predicate\u003cRecipe\u003e predicate);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 19,
      "tharshita": 13,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Represents the in-memory model of the recipe book data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final RecipeBook recipeBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private final FilteredList\u003cRecipe\u003e filteredRecipes;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Initializes a ModelManager with the given recipeBook and userPrefs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public ModelManager(ReadOnlyRecipeBook recipeBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireAllNonNull(recipeBook, userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        logger.fine(\"Initializing with recipe book: \" + recipeBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.recipeBook \u003d new RecipeBook(recipeBook);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        filteredRecipes \u003d new FilteredList\u003c\u003e(this.recipeBook.getRecipeList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this(new RecipeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public Path getRecipeBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return userPrefs.getRecipeBookFilePath();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void setRecipeBookFilePath(Path recipeBookFilePath) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(recipeBookFilePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        userPrefs.setRecipeBookFilePath(recipeBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d RecipeBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void setRecipeBook(ReadOnlyRecipeBook recipeBook) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.recipeBook.resetData(recipeBook);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public ReadOnlyRecipeBook getRecipeBook() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return recipeBook;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public boolean hasRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireNonNull(recipe);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return recipeBook.hasRecipe(recipe);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void deleteRecipe(Recipe target) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        recipeBook.removeRecipe(target);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void favouriteRecipe(Recipe target) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        recipeBook.favouriteRecipe(target);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void unfavouriteRecipe(Recipe target) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        recipeBook.unfavouriteRecipe(target);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void addRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        recipeBook.addRecipe(recipe);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        updateFilteredRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void setRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireAllNonNull(target, editedRecipe);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        recipeBook.setRecipe(target, editedRecipe);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Recipe List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Recipe} backed by the internal list of"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * {@code versionedRecipeBook}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public ObservableList\u003cRecipe\u003e getFilteredRecipeList() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return filteredRecipes;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void updateFilteredRecipeList(Predicate\u003cRecipe\u003e predicate) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        filteredRecipes.setPredicate(predicate);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return recipeBook.equals(other.recipeBook)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                \u0026\u0026 filteredRecipes.equals(other.filteredRecipes);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 31,
      "tharshita": 16,
      "-": 114
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyRecipeBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Unmodifiable view of a recipe book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public interface ReadOnlyRecipeBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns an unmodifiable view of the recipes list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * This list will not contain any duplicate recipes."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    ObservableList\u003cRecipe\u003e getRecipeList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 2,
      "tharshita": 4,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    Path getRecipeBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/RecipeBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.UniqueRecipeList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Duplicates are not allowed (by .isSameRecipe comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class RecipeBook implements ReadOnlyRecipeBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private final UniqueRecipeList recipes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        recipes \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public RecipeBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Creates a RecipeBook using the Recipes in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public RecipeBook(ReadOnlyRecipeBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Replaces the contents of the recipe list with {@code recipes}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * {@code recipes} must not contain duplicate recipes."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void setRecipes(List\u003cRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.recipes.setRecipes(recipes);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Resets the existing data of this {@code RecipeBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param newData"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void resetData(ReadOnlyRecipeBook newData) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        setRecipes(newData.getRecipeList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    //// recipe-level operations"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns true if a recipe with the same identity as {@code recipe} exists in the address book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public boolean hasRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireNonNull(recipe);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return recipes.contains(recipe);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Adds a recipe to the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * The recipe must not already exist in the address book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void addRecipe(Recipe p) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        recipes.add(p);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Replaces the given recipe {@code target} in the list with {@code editedRecipe}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * The recipe identity of {@code editedRecipe} must not be the same as another existing recipe in the address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void setRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireNonNull(editedRecipe);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        recipes.setRecipe(target, editedRecipe);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Removes {@code key} from this {@code RecipeBook}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * {@code key} must exist in the recipe book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void removeRecipe(Recipe key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        recipes.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Favourites {@code key} from this {@code RecipeBook}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * {@code key} must exist in the recipe book."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void favouriteRecipe(Recipe key) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        recipes.favourite(key);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Unfavourites {@code key} from this {@code RecipeBook}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * {@code key} must exist in the recipe book."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void unfavouriteRecipe(Recipe key) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        recipes.unfavourite(key);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return recipes.asUnmodifiableObservableList().size() + \" recipes\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public ObservableList\u003cRecipe\u003e getRecipeList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return recipes.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                || (other instanceof RecipeBook // instanceof handles nulls"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                \u0026\u0026 recipes.equals(((RecipeBook) other).recipes));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return recipes.hashCode();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 27,
      "tharshita": 30,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private Path recipeBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        setRecipeBookFilePath(newUserPrefs.getRecipeBookFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public Path getRecipeBookFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return recipeBookFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void setRecipeBookFilePath(Path recipeBookFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(recipeBookFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.recipeBookFilePath \u003d recipeBookFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                \u0026\u0026 recipeBookFilePath.equals(o.recipeBookFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return Objects.hash(guiSettings, recipeBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + recipeBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 10,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/goal/Goal.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "package seedu.address.model.goal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Represents a Goal in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidGoalName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class Goal {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Goals names should contain only alphabetical letters or spaces\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[ A-Za-z]+$+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public final String goalName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Constructs a {@code Goal}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @param goalName A valid goal name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public Goal(String goalName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireNonNull(goalName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        checkArgument(isValidGoalName(goalName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.goalName \u003d goalName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns true if a given string is a valid goal name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static boolean isValidGoalName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                || (other instanceof Goal // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                \u0026\u0026 goalName.equals(((Goal) other).goalName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return goalName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return \u0027[\u0027 + goalName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 52,
      "beatricetay": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/Name.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Represents a Recipe\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 2,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/NameContainsKeywordsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Tests that a {@code Recipe}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cRecipe\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public boolean test(Recipe recipe) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(recipe.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 5,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/Recipe.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.goal.Goal;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.address.model.recipe.ingredient.Ingredient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Represents a Recipe in the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class Recipe {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private final Time time;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final List\u003cStep\u003e steps \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private final Set\u003cGoal\u003e goals \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private final Set\u003cIngredient\u003e ingredients \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private boolean isFavourite;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public Recipe(Name name, Time time, Set\u003cIngredient\u003e ingredients,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                  List\u003cStep\u003e steps, Set\u003cGoal\u003e goals, boolean isFavourite) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireAllNonNull(name, time, steps, goals);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.steps.addAll(steps);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.goals.addAll(goals);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.ingredients.addAll(ingredients);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.isFavourite \u003d isFavourite;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public boolean getFavouriteStatus() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return isFavourite;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void markAsFavourite() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        isFavourite \u003d true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void unmarkAsFavourite() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        isFavourite \u003d false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public Time getTime() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public List\u003cStep\u003e getSteps() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return Collections.unmodifiableList(steps);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns an immutable goal set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public Set\u003cGoal\u003e getGoals() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return Collections.unmodifiableSet(goals);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Returns an immutable ingredient set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public Set\u003cIngredient\u003e getIngredients() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return Collections.unmodifiableSet(ingredients);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns true if both recipes of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * This defines a weaker notion of equality between two recipes."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public boolean isSameRecipe(Recipe otherRecipe) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (otherRecipe \u003d\u003d this) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return otherRecipe !\u003d null"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                \u0026\u0026 otherRecipe.getName().equals(getName())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                \u0026\u0026 (otherRecipe.getTime().equals(getTime()) || otherRecipe.getSteps().equals(getSteps()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns true if both recipes have the same identity and data fields."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * This defines a stronger notion of equality between two recipes."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (!(other instanceof Recipe)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Recipe otherRecipe \u003d (Recipe) other;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return otherRecipe.getName().equals(getName())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                \u0026\u0026 otherRecipe.getTime().equals(getTime())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                \u0026\u0026 otherRecipe.getIngredients().equals(getIngredients())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                \u0026\u0026 otherRecipe.getSteps().equals(getSteps())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                \u0026\u0026 otherRecipe.getGoals().equals(getGoals());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return Objects.hash(name, time, steps, goals);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                .append(\" Time: \")"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                .append(getTime())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .append(\" Ingredients: \");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        getIngredients().forEach(builder::append);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        builder.append(\" Step: \")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .append(getSteps())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                .append(\" Goals: \");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        getGoals().forEach(builder::append);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 27,
      "tharshita": 30,
      "-": 70,
      "beatricetay": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/Step.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Represents a Recipe\u0027s step in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidStep(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class Step {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Step should not be empty or blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(.|\\\\s)*\\\\S(.|\\\\s)*\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Constructs an {@code Step}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @param step A valid step address."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public Step(String step) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireNonNull(step);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        checkArgument(isValidStep(step), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        value \u003d step;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns if a given string is a valid step."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static boolean isValidStep(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                || (other instanceof Step // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                \u0026\u0026 value.equals(((Step) other).value)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 16,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/Time.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Represents a Recipe\u0027s time number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTime(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class Time {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            \"Time should only contain numbers in terms of minutes, and it should be at least 1 digit long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{1,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Constructs a {@code Time}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @param time A valid time number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public Time(String time) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        checkArgument(isValidTime(time), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        value \u003d time;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns true if a given string is a valid time number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static boolean isValidTime(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                || (other instanceof Time // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                \u0026\u0026 value.equals(((Time) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/UniqueRecipeList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.exceptions.DuplicateRecipeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.exceptions.RecipeNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * A list of recipes that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * A recipe is considered unique by comparing using {@code Recipe#isSameRecipe(Recipe)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * recipes uses Recipe#isSameRecipe(Recipe) for equality so as to ensure that the recipe being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * unique in terms of identity in the UniqueRecipeList. However, the removal of a recipe uses Recipe#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * as to ensure that the recipe with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * @see Recipe#isSameRecipe(Recipe)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class UniqueRecipeList implements Iterable\u003cRecipe\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private final ObservableList\u003cRecipe\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private final ObservableList\u003cRecipe\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns true if the list contains an equivalent recipe as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public boolean contains(Recipe toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameRecipe);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Adds a recipe to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * The recipe must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void add(Recipe toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            throw new DuplicateRecipeException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Replaces the recipe {@code target} in the list with {@code editedRecipe}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * The recipe identity of {@code editedRecipe} must not be the same as another existing recipe in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void setRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireAllNonNull(target, editedRecipe);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            throw new RecipeNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (!target.isSameRecipe(editedRecipe) \u0026\u0026 contains(editedRecipe)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            throw new DuplicateRecipeException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        internalList.set(index, editedRecipe);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Removes the equivalent recipe from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * The recipe must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void remove(Recipe toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            throw new RecipeNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Favourites the equivalent recipe from the list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * The recipe must exist in the list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void favourite(Recipe toFavourite) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(toFavourite);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (!internalList.contains(toFavourite)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new RecipeNotFoundException();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        toFavourite.markAsFavourite();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Unfavourites the equivalent recipe from the list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * The recipe must exist in the list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void unfavourite(Recipe toUnfavourite) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(toUnfavourite);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (!internalList.contains(toUnfavourite)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new RecipeNotFoundException();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        toUnfavourite.unmarkAsFavourite();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void setRecipes(UniqueRecipeList replacement) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Replaces the contents of this list with {@code recipes}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * {@code recipes} must not contain duplicate recipes."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void setRecipes(List\u003cRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        requireAllNonNull(recipes);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (!recipesAreUnique(recipes)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            throw new DuplicateRecipeException();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        internalList.setAll(recipes);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public ObservableList\u003cRecipe\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public Iterator\u003cRecipe\u003e iterator() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                || (other instanceof UniqueRecipeList // instanceof handles nulls"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueRecipeList) other).internalList));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns true if {@code recipes} contains only unique recipes."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private boolean recipesAreUnique(List\u003cRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        for (int i \u003d 0; i \u003c recipes.size() - 1; i++) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            for (int j \u003d i + 1; j \u003c recipes.size(); j++) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                if (recipes.get(i).isSameRecipe(recipes.get(j))) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 24,
      "tharshita": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/exceptions/DuplicateRecipeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "package seedu.address.model.recipe.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Signals that the operation will result in duplicate Recipes (Recipes are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class DuplicateRecipeException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public DuplicateRecipeException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        super(\"Operation would result in duplicate recipes\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/exceptions/RecipeNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "package seedu.address.model.recipe.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Signals that the operation is unable to find the specified recipe."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class RecipeNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/ingredient/Grain.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.address.model.recipe.ingredient;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * Represents a Grain Ingredient in the recipe book."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "public class Grain extends Ingredient {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public Grain(String name, double quantity) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        super(name, quantity);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        super.unit \u003d Unit.SOLID;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        super.ingredientType \u003d IngredientType.GRAIN;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "beatricetay": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/ingredient/Ingredient.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.address.model.recipe.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * Represents an Ingredient in the recipe book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "public abstract class Ingredient implements Comparable\u003cIngredient\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Ingredient names should contain only \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + \"alphabetical letters or spaces\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String MESSAGE_MISSING_FIELD \u003d \"Ingredients require a quantity and name written in the format: \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + \"Tag/Quantity, Name\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            + \"For example, to enter 50g of Broccoli, the format is iv/50, Broccoli\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[ A-Za-z]+$+\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    protected IngredientType ingredientType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    protected String ingredientName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    protected double quantity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    protected Unit unit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public Ingredient(String ingredientName, double quantity) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        requireNonNull(quantity, ingredientName);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        checkArgument(isValidIngredientName(ingredientName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.ingredientName \u003d ingredientName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Returns true if a given string is a valid ingredient name."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static boolean isValidIngredientName(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public double getQuantity() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return quantity;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return ingredientName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public IngredientType getType() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return ingredientType;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public Unit getUnit() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return unit;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public String getIngredientName() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return ingredientName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return quantity + unit.toString() + \" \" + ingredientName;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                || (other instanceof Ingredient // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                \u0026\u0026 ingredientName.equals(((Ingredient) other).getIngredientName()) // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                \u0026\u0026 quantity \u003d\u003d ((Ingredient) other).getQuantity()); // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public int compareTo(Ingredient other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return ingredientName.compareTo(other.ingredientName); // ingredients are sorted alphabetically"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "beatricetay": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/ingredient/IngredientType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.address.model.recipe.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * IngredientType contains the four main categories that the ingredients can belong to."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "public enum IngredientType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    GRAIN(\"grain\"), VEGETABLE(\"vegetable\"), PROTEIN(\"protein\"), OTHER(\"other\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private String value;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    IngredientType(String value) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "beatricetay": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/ingredient/Other.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.address.model.recipe.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * Represents Other Ingredients in the recipe book. These ingredients include spices, liquids and condiments."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "public class Other extends Ingredient {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public Other(String name, double quantity) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        super(name, quantity);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        super.unit \u003d Unit.COUNTABLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        super.ingredientType \u003d IngredientType.OTHER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public void setUnit(Unit unit) { //todo: allow users to input their own unit for \u0027Other\u0027 Ingredient"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        super.unit \u003d unit;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "beatricetay": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/ingredient/Protein.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.address.model.recipe.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * Represents a Protein Ingredient in the recipe book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "public class Protein extends Ingredient {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public Protein (String name, double quantity) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        super(name, quantity);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        super.unit \u003d Unit.SOLID;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        super.ingredientType \u003d IngredientType.PROTEIN;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "beatricetay": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/ingredient/Unit.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.address.model.recipe.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * Represents the standardized units that will be used in the recipe book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "public enum Unit {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    LIQUID(\"ml\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    SOLID(\"g\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    COUNTABLE(\"\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private final String label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    Unit(final String label) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.label \u003d label;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return label;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "beatricetay": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/ingredient/Vegetable.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.address.model.recipe.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * Represents a Vegetable Ingredient in the recipe book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "public class Vegetable extends Ingredient {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public Vegetable(String name, double quantity) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        super(name, quantity);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        super.unit \u003d Unit.SOLID;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        super.ingredientType \u003d IngredientType.VEGETABLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "beatricetay": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.model.RecipeBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.goal.Goal;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Step;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Time;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.address.model.recipe.ingredient.Grain;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.address.model.recipe.ingredient.Ingredient;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.address.model.recipe.ingredient.Other;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.address.model.recipe.ingredient.Protein;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.address.model.recipe.ingredient.Vegetable;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Contains utility methods for populating {@code RecipeBook} with sample data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static Recipe[] getSampleRecipes() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return new Recipe[] {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            new Recipe(new Name(\"Caesar Salad\"), new Time(\"10\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                    getIngredientSet(\"Tomato, 100, vegetable\", \"Honeydew, 100, other\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getStepsList(\"Cut tomatoes\", \"Remove honeydew skin\"), getGoalSet(\"Herbivore\"), false),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            new Recipe(new Name(\"Grilled Sandwich\"), new Time(\"10\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                    getIngredientSet(\"Bread, 50, grain\", \"Cheese, 50, other\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getStepsList(\"Spread butter on bread\", \"Heat pan to medium heat\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getGoalSet(\"Wholesome Wholemeal\"), false),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            new Recipe(new Name(\"Boiled Chicken\"), new Time(\"10\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                    getIngredientSet(\"Chicken, 100, protein\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getStepsList(\"Dice chicken\"), getGoalSet(\"Bulk like the Hulk\"), false),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            new Recipe(new Name(\"Chocolate Cake\"), new Time(\"120\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                    getIngredientSet(\"Sugar, 100, other\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getStepsList(\"Caramelize sugar\"), getGoalSet(), false),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            new Recipe(new Name(\"Omelet\"), new Time(\"15\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                    getIngredientSet(\"Egg, 100, protein\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getStepsList(\"Crack and beat eggs\"), getGoalSet(), false),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            new Recipe(new Name(\"Tuna Bread\"), new Time(\"60\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                    getIngredientSet(\"Wholemeal bread, 100, grain\", \"Tuna, 100, protein\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getStepsList(\"Slice tuna\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    getGoalSet(\"Bulk like the Hulk\", \"Wholesome Wholemeal\"), false)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static ReadOnlyRecipeBook getSampleRecipeBook() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        RecipeBook sampleAb \u003d new RecipeBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        for (Recipe sampleRecipe : getSampleRecipes()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            sampleAb.addRecipe(sampleRecipe);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns a goal set containing the list of strings given."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static Set\u003cGoal\u003e getGoalSet(String... goals) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return Arrays.stream(goals)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                .map(Goal::new)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Returns an ingredient set containing the list of strings given in the format (name, quantity, type)."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static Set\u003cIngredient\u003e getIngredientSet(String... ingredients) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Set\u003cIngredient\u003e ingredientSet \u003d new TreeSet\u003cIngredient\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        for (String ingredient: ingredients) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            String[] splitDetails \u003d ingredient.split(\",\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            String name \u003d splitDetails[0].trim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            double quantity \u003d Double.parseDouble(splitDetails[1].trim());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            String type \u003d splitDetails[2].trim();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            switch (type) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            case \"vegetable\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                ingredientSet.add(new Vegetable(name, quantity));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            case \"grain\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                ingredientSet.add(new Grain(name, quantity));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            case \"protein\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                ingredientSet.add(new Protein(name, quantity));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            case \"other\":"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                ingredientSet.add(new Other(name, quantity));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                System.out.println(\"Error: ingredient type does not belong to one of the defaults\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return ingredientSet;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Returns a steps list containing the list of steps given."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static List\u003cStep\u003e getStepsList(String ... steps) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return Arrays.stream(steps)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .map(Step::new)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 27,
      "tharshita": 11,
      "-": 24,
      "beatricetay": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedGoal.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.goal.Goal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Jackson-friendly version of {@link Goal}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "class JsonAdaptedGoal {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private final String goalName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Constructs a {@code JsonAdaptedGoal} with the given {@code goalName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public JsonAdaptedGoal(String goalName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.goalName \u003d goalName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Converts a given {@code Goal} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public JsonAdaptedGoal(Goal source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        goalName \u003d source.goalName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public String getGoalName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return goalName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Converts this Jackson-friendly adapted goal object into the model\u0027s {@code Goal} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted goal."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public Goal toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (!Goal.isValidGoalName(goalName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            throw new IllegalValueException(Goal.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return new Goal(goalName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 18,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedIngredient.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.address.model.recipe.ingredient.Grain;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.address.model.recipe.ingredient.Ingredient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.address.model.recipe.ingredient.IngredientType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.address.model.recipe.ingredient.Other;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.address.model.recipe.ingredient.Protein;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.address.model.recipe.ingredient.Vegetable;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * Jackson-friendly version of {@link Ingredient}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "class JsonAdaptedIngredient {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private final String ingredientName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private final double quantity;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private final IngredientType ingredientType;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Constructs a {@code JsonAdaptedIngredient} with the given {@code ingredientName},"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * {@code quantity} and {@code type}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public JsonAdaptedIngredient(String ingredientDetails) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String[] details \u003d ingredientDetails.split(\",\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.ingredientName \u003d details[0].trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.quantity \u003d Double.parseDouble(details[1].trim());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String type \u003d details[2].trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        case \"vegetable\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            this.ingredientType \u003d IngredientType.VEGETABLE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        case \"protein\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            this.ingredientType \u003d IngredientType.PROTEIN;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        case \"grain\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            this.ingredientType \u003d IngredientType.GRAIN;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        case \"other\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            this.ingredientType \u003d IngredientType.OTHER;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            System.out.println(\"Error: ingredient type does not belong to one of the categories\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            this.ingredientType \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Converts a given {@code Ingredient} into this class for Jackson use."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public JsonAdaptedIngredient(Ingredient source) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        ingredientName \u003d source.getIngredientName();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        quantity \u003d source.getQuantity();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        ingredientType \u003d source.getType();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public String getIngredient() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return ingredientName + \",  \" + quantity + \", \" + ingredientType.toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Converts this Jackson-friendly adapted goal object into the model\u0027s {@code Ingredient} object."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * @return Ingredient object that the adapted goal was converted into."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted ingredient."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public Ingredient toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (!Ingredient.isValidIngredientName(ingredientName)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            throw new IllegalValueException(Ingredient.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        switch (ingredientType) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        case GRAIN:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return new Grain(ingredientName, quantity);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        case VEGETABLE:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return new Vegetable(ingredientName, quantity);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        case PROTEIN:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return new Protein(ingredientName, quantity);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        case OTHER:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            return new Other(ingredientName, quantity);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            System.out.println(\"Error: ingredient type not instantiated\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "beatricetay": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedRecipe.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.goal.Goal;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Step;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.address.model.recipe.ingredient.Ingredient;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Jackson-friendly version of {@link Recipe}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "class JsonAdaptedRecipe {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Recipe\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final boolean isFavourite;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final List\u003cJsonAdaptedStep\u003e steps \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private final List\u003cJsonAdaptedGoal\u003e goals \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private final List\u003cJsonAdaptedIngredient\u003e ingredients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Constructs a {@code JsonAdaptedRecipe} with the given recipe details."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public JsonAdaptedRecipe(@JsonProperty(\"name\") String name, @JsonProperty(\"time\") String time,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            @JsonProperty(\"isFavourite\") boolean isFavourite,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            @JsonProperty(\"ingredients\") List\u003cJsonAdaptedIngredient\u003e ingredients,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            @JsonProperty(\"steps\") List\u003cJsonAdaptedStep\u003e steps,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            @JsonProperty(\"goals\") List\u003cJsonAdaptedGoal\u003e goals) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.isFavourite \u003d isFavourite;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        if (ingredients !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            this.ingredients.addAll(ingredients);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (steps !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            this.steps.addAll(steps);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (goals !\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            this.goals.addAll(goals);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Converts a given {@code Recipe} into this class for Jackson use."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public JsonAdaptedRecipe(Recipe source) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        time \u003d source.getTime().value;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        isFavourite \u003d source.getFavouriteStatus();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        ingredients.addAll(source.getIngredients().stream()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .map(JsonAdaptedIngredient::new)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        steps.addAll(source.getSteps().stream()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .map(JsonAdaptedStep::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        goals.addAll(source.getGoals().stream()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                .map(JsonAdaptedGoal::new)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Converts this Jackson-friendly adapted recipe object into the model\u0027s {@code Recipe} object."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted recipe."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public Recipe toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        final List\u003cGoal\u003e recipeGoals \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        for (JsonAdaptedGoal goal : goals) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            recipeGoals.add(goal.toModelType());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        final List\u003cIngredient\u003e recipeIngredients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        for (JsonAdaptedIngredient ingredient : ingredients) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            recipeIngredients.add(ingredient.toModelType());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        final List\u003cStep\u003e recipeSteps \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (steps.isEmpty()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Step.class.getSimpleName()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        for (JsonAdaptedStep step : steps) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            recipeSteps.add(step.toModelType());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (time \u003d\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Time.class.getSimpleName()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (!Time.isValidTime(time)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            throw new IllegalValueException(Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        final Time modelTime \u003d new Time(time);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        final Set\u003cGoal\u003e modelGoals \u003d new HashSet\u003c\u003e(recipeGoals);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        final Set\u003cIngredient\u003e modelIngredients \u003d new TreeSet\u003c\u003e(recipeIngredients);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        final ArrayList\u003cStep\u003e modelSteps \u003d new ArrayList\u003c\u003e(recipeSteps);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return new Recipe(modelName, modelTime, modelIngredients, modelSteps, modelGoals, isFavourite);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 21,
      "tharshita": 33,
      "-": 51,
      "beatricetay": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedStep.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.model.recipe.Step;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Jackson-friendly version of {@link Step}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class JsonAdaptedStep {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final String step;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Constructs a {@code JsonAdaptedStep} with the given {@code step}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public JsonAdaptedStep(String step) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.step \u003d step;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Converts a given {@code Step} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public JsonAdaptedStep(Step source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        step \u003d source.value;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public String getStep() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return step;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Converts this Jackson-friendly adapted goal object into the model\u0027s {@code Step} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted step."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public Step toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (!Step.isValidStep(step)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new IllegalValueException(Step.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return new Step(step);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonRecipeBookStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * A class to access RecipeBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class JsonRecipeBookStorage implements RecipeBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonRecipeBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public JsonRecipeBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public Path getRecipeBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public Optional\u003cReadOnlyRecipeBook\u003e readRecipeBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return readRecipeBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Similar to {@link #readRecipeBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public Optional\u003cReadOnlyRecipeBook\u003e readRecipeBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Optional\u003cJsonSerializableRecipeBook\u003e jsonRecipeBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                filePath, JsonSerializableRecipeBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (!jsonRecipeBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return Optional.of(jsonRecipeBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void saveRecipeBook(ReadOnlyRecipeBook recipeBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        saveRecipeBook(recipeBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Similar to {@link #saveRecipeBook(ReadOnlyRecipeBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void saveRecipeBook(ReadOnlyRecipeBook recipeBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        requireNonNull(recipeBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableRecipeBook(recipeBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 20,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableRecipeBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.model.RecipeBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * An Immutable RecipeBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "@JsonRootName(value \u003d \"recipebook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "class JsonSerializableRecipeBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RECIPE \u003d \"Recipes list contains duplicate recipe(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private final List\u003cJsonAdaptedRecipe\u003e recipes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Constructs a {@code JsonSerializableRecipeBook} with the given recipes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public JsonSerializableRecipeBook(@JsonProperty(\"recipes\") List\u003cJsonAdaptedRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.recipes.addAll(recipes);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Converts a given {@code ReadOnlyRecipeBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableRecipeBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public JsonSerializableRecipeBook(ReadOnlyRecipeBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        recipes.addAll(source.getRecipeList().stream().map(JsonAdaptedRecipe::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Converts this recipe book into the model\u0027s {@code RecipeBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public RecipeBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        RecipeBook recipeBook \u003d new RecipeBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        for (JsonAdaptedRecipe jsonAdaptedRecipe : recipes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            Recipe recipe \u003d jsonAdaptedRecipe.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (recipeBook.hasRecipe(recipe)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_RECIPE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            recipeBook.addRecipe(recipe);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return recipeBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 16,
      "tharshita": 8,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/RecipeBookStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Represents a storage for {@link seedu.address.model.RecipeBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public interface RecipeBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    Path getRecipeBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Returns RecipeBook data as a {@link ReadOnlyRecipeBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    Optional\u003cReadOnlyRecipeBook\u003e readRecipeBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @see #getRecipeBookFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    Optional\u003cReadOnlyRecipeBook\u003e readRecipeBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Saves the given {@link ReadOnlyRecipeBook} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @param recipeBook cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    void saveRecipeBook(ReadOnlyRecipeBook recipeBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * @see #saveRecipeBook(ReadOnlyRecipeBook)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    void saveRecipeBook(ReadOnlyRecipeBook recipeBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public interface Storage extends RecipeBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    Path getRecipeBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    Optional\u003cReadOnlyRecipeBook\u003e readRecipeBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    void saveRecipeBook(ReadOnlyRecipeBook recipeBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 5,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Manages storage of RecipeBook data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private RecipeBookStorage recipeBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public StorageManager(RecipeBookStorage recipeBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.recipeBookStorage \u003d recipeBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d RecipeBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public Path getRecipeBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return recipeBookStorage.getRecipeBookFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public Optional\u003cReadOnlyRecipeBook\u003e readRecipeBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return readRecipeBook(recipeBookStorage.getRecipeBookFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public Optional\u003cReadOnlyRecipeBook\u003e readRecipeBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return recipeBookStorage.readRecipeBook(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void saveRecipeBook(ReadOnlyRecipeBook recipeBook) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        saveRecipeBook(recipeBook, recipeBookStorage.getRecipeBookFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void saveRecipeBook(ReadOnlyRecipeBook recipeBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        recipeBookStorage.saveRecipeBook(recipeBook, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 16,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/GoalsChart.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * UI for goals chart."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class GoalsChart {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private RecipeListPanel recipeListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private StackPane recipeListPanelPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        recipeListPanel \u003d new RecipeListPanel(logic.getFilteredRecipeList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        recipeListPanelPlaceholder.getChildren().add(recipeListPanel.getRoot());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getRecipeBookFilePath());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public RecipeListPanel getRecipeListPanel() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return recipeListPanel;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 1,
      "tharshita": 6,
      "-": 186
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RecipeCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.concurrent.atomic.AtomicInteger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import javafx.geometry.Orientation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * An UI component that displays information of a {@code Recipe}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class RecipeCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private static final String FXML \u003d \"RecipeListCard.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public final Recipe recipe;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private ImageView favourite;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private Label time;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private FlowPane ingredients;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private VBox steps;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private FlowPane goals;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public RecipeCard(Recipe recipe, int displayedIndex) throws IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.recipe \u003d recipe;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        name.setText(recipe.getName().fullName);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        name.setWrapText(true);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        time.setText(recipe.getTime().value + \" min\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        System.out.println(\"Recipe Card is updated\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (recipe.getFavouriteStatus()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            System.out.println(\"It IS a favourite\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            Path favouriteIconPath \u003d Paths.get(\"src\", \"main\", \"resources\", \"images\", \"favourite.png\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            favourite.setImage(new Image(Files.newInputStream(favouriteIconPath)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        ingredients.setOrientation(Orientation.VERTICAL);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        recipe.getIngredients().stream()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .forEach(ingredient -\u003e ingredients.getChildren().add(new Label(ingredient.toString())));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // Calculates step number and displays with along with the step"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        AtomicInteger stepNumber \u003d new AtomicInteger(1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        recipe.getSteps().forEach(step -\u003e {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            Label stepLabel \u003d new Label(\"Step \" + stepNumber.getAndIncrement() + \": \" + step.value);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            stepLabel.setWrapText(true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            steps.getChildren().add(stepLabel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        });"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        recipe.getGoals().stream()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                .sorted(Comparator.comparing(goal -\u003e goal.goalName))"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                .forEach(goal -\u003e goals.getChildren().add(new Label(goal.goalName)));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (!(other instanceof RecipeCard)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        RecipeCard card \u003d (RecipeCard) other;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                \u0026\u0026 recipe.equals(card.recipe);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 31,
      "tharshita": 16,
      "-": 52,
      "beatricetay": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RecipeListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Panel containing the list of recipes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class RecipeListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private static final String FXML \u003d \"RecipeListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(RecipeListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private ListView\u003cRecipe\u003e recipeListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public RecipeListPanel(ObservableList\u003cRecipe\u003e recipeList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        recipeListView.setItems(recipeList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        recipeListView.setCellFactory(listView -\u003e new RecipeListViewCell());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Recipe} using a {@code RecipeCard}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    class RecipeListViewCell extends ListCell\u003cRecipe\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        protected void updateItem(Recipe recipe, boolean empty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            super.updateItem(recipe, empty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            if (empty || recipe \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                    setGraphic(new RecipeCard(recipe, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    logger.warning(\"Failed to favourites icon : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 6,
      "tharshita": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TabPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * Panel containing all tabs."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class TabPanel {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/leaf.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 1,
      "-": 85
    }
  },
  {
    "path": "src/main/resources/view/GoalsChart.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003cAnchorPane xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            fx:controller\u003d\"$CONTROLLER_NAME$\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "tharshita": 14
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "         title\u003d\"HealthyBaby\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    \u003cImage url\u003d\"@/images/leaf.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        \u003cVBox fx:id\u003d\"recipeList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": "          \u003cStackPane fx:id\u003d\"recipeListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "tharshita": 4,
      "-": 56
    }
  },
  {
    "path": "src/main/resources/view/RecipeListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        \u003cImageView fx:id\u003d\"favourite\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"goals\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "      \u003cLabel fx:id\u003d\"time\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$time\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"ingredients\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "      \u003cVBox fx:id\u003d\"steps\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 3,
      "tharshita": 2,
      "-": 32,
      "beatricetay": 1
    }
  },
  {
    "path": "src/main/resources/view/RecipeListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "  \u003cListView fx:id\u003d\"recipeListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "tharshita": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/TabPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003cAnchorPane xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            fx:controller\u003d\"$CONTROLLER_NAME$\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "tharshita": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        final Index fifthRecipeIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertTrue(fifthRecipeIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertTrue(fifthRecipeIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertTrue(fifthRecipeIndex.equals(fifthRecipeIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertFalse(fifthRecipeIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertFalse(fifthRecipeIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertFalse(fifthRecipeIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 7,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/leaf.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.storage.JsonRecipeBookStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        JsonRecipeBookStorage recipeBookStorage \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                new JsonRecipeBookStorage(temporaryFolder.resolve(\"recipeBook.json\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        StorageManager storage \u003d new StorageManager(recipeBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    //TODO: Resolve after refactoring add and edit command"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // Setup LogicManager with JsonRecipeBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        JsonRecipeBookStorage recipeBookStorage \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                new JsonRecipeBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionRecipeBook.json\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        StorageManager storage \u003d new StorageManager(recipeBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_TURKEY_SANDWICH + TIME_DESC_TURKEY_SANDWICH +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        STEP_DESC_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Recipe expectedRecipe \u003d new RecipeBuilder(TURKEY_SANDWICH).withGoals().build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        expectedModel.addRecipe(expectedRecipe);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void getFilteredRecipeList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredRecipeList().remove(0));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getRecipeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private static class JsonRecipeBookIoExceptionThrowingStub extends JsonRecipeBookStorage {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        private JsonRecipeBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        public void saveRecipeBook(ReadOnlyRecipeBook recipeBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 13,
      "tharshita": 5,
      "-": 131,
      "beatricetay": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        model \u003d new ModelManager(getTypicalRecipeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void execute_newRecipe_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Recipe validRecipe \u003d new RecipeBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getRecipeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        expectedModel.addRecipe(validRecipe);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertCommandSuccess(new AddCommand(validRecipe), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validRecipe), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void execute_duplicateRecipe_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Recipe recipeInList \u003d model.getRecipeBook().getRecipeList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertCommandFailure(new AddCommand(recipeInList), model, AddCommand.MESSAGE_DUPLICATE_RECIPE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 4,
      "tharshita": 9,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.model.RecipeBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void constructor_nullRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void execute_recipeAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        ModelStubAcceptingRecipeAdded modelStub \u003d new ModelStubAcceptingRecipeAdded();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Recipe validRecipe \u003d new RecipeBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validRecipe).execute(modelStub);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validRecipe), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertEquals(Arrays.asList(validRecipe), modelStub.recipesAdded);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void execute_duplicateRecipe_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Recipe validRecipe \u003d new RecipeBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validRecipe);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithRecipe(validRecipe);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_RECIPE, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Recipe alice \u003d new RecipeBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Recipe bob \u003d new RecipeBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // different recipe -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        public Path getRecipeBookFilePath() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        public void setRecipeBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        public void addRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        public void setRecipeBook(ReadOnlyRecipeBook newData) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        public ReadOnlyRecipeBook getRecipeBook() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        public boolean hasRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        public void deleteRecipe(Recipe target) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        public void favouriteRecipe(Recipe target) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        public void unfavouriteRecipe(Recipe target) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        public void setRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        public ObservableList\u003cRecipe\u003e getFilteredRecipeList() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        public void updateFilteredRecipeList(Predicate\u003cRecipe\u003e predicate) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * A Model stub that contains a single recipe."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private class ModelStubWithRecipe extends ModelStub {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        private final Recipe recipe;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        ModelStubWithRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            requireNonNull(recipe);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            this.recipe \u003d recipe;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        public boolean hasRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            requireNonNull(recipe);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            return this.recipe.isSameRecipe(recipe);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * A Model stub that always accept the recipe being added."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private class ModelStubAcceptingRecipeAdded extends ModelStub {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        final ArrayList\u003cRecipe\u003e recipesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        public boolean hasRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            requireNonNull(recipe);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            return recipesAdded.stream().anyMatch(recipe::isSameRecipe);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        public void addRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            requireNonNull(recipe);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            recipesAdded.add(recipe);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        public ReadOnlyRecipeBook getRecipeBook() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            return new RecipeBook();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 10,
      "tharshita": 41,
      "-": 153
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.model.RecipeBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void execute_emptyRecipeBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void execute_nonEmptyRecipeBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalRecipeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalRecipeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        expectedModel.setRecipeBook(new RecipeBook());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 7,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GOAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STEP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.model.RecipeBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.testutil.EditRecipeDescriptorBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": " * Contains helper methods for testing commands. todo: Add ingredients"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String VALID_INGREDIENT_TURKEY_SANDWICH \u003d \"Shredded Turkey, 150, protein\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String VALID_INGREDIENT_FISH \u003d \"Cod fish, 300, protein\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String VALID_NAME_TURKEY_SANDWICH \u003d \"Turkey Sandwich\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String VALID_NAME_FISH \u003d \"Steamed Fish\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String VALID_TIME_TURKEY_SANDWICH \u003d \"15\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String VALID_TIME_FISH \u003d \"40\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String VALID_STEP_TURKEY_SANDWICH \u003d \"Slice the turkey\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String VALID_STEP_FISH \u003d \"Remove fish stomach\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String VALID_GOAL_PROTEIN \u003d \"Bulk like the Hulk\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String VALID_GOAL_GRAIN \u003d \"Wholesome Wholemeal\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String NAME_DESC_TURKEY_SANDWICH \u003d \" \" + PREFIX_NAME + VALID_NAME_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String NAME_DESC_FISH \u003d \" \" + PREFIX_NAME + VALID_NAME_FISH;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String TIME_DESC_TURKEY_SANDWICH \u003d \" \" + PREFIX_TIME + VALID_TIME_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String TIME_DESC_FISH \u003d \" \" + PREFIX_TIME + VALID_TIME_FISH;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String STEP_DESC_TURKEY_SANDWICH \u003d \" \" + PREFIX_STEP + VALID_STEP_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String STEP_DESC_FISH \u003d \" \" + PREFIX_STEP + VALID_STEP_FISH;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String GOAL_DESC_GRAIN \u003d \" \" + PREFIX_GOAL + VALID_GOAL_GRAIN;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String GOAL_DESC_PROTEIN \u003d \" \" + PREFIX_GOAL + VALID_GOAL_PROTEIN;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final String INVALID_TIME_DESC \u003d \" \" + PREFIX_TIME + \"911a\"; // \u0027a\u0027 not allowed in times"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final String INVALID_STEP_DESC \u003d \" \" + PREFIX_STEP + \"\"; // empty space"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final String INVALID_GOAL_DESC \u003d \" \" + PREFIX_GOAL + \"bulking*\"; // \u0027*\u0027 not allowed in goals"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final EditCommand.EditRecipeDescriptor DESC_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final EditCommand.EditRecipeDescriptor DESC_FISH;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        DESC_TURKEY_SANDWICH \u003d new EditRecipeDescriptorBuilder().withName(VALID_NAME_TURKEY_SANDWICH)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withTime(VALID_TIME_TURKEY_SANDWICH).withSteps(VALID_STEP_TURKEY_SANDWICH)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .withGoals(VALID_GOAL_GRAIN).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        DESC_FISH \u003d new EditRecipeDescriptorBuilder().withName(VALID_NAME_FISH)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withTime(VALID_TIME_FISH).withSteps(VALID_STEP_FISH)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .withGoals(VALID_GOAL_PROTEIN).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * - the address book, filtered recipe list and selected recipe in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        RecipeBook expectedAddressBook \u003d new RecipeBook(actualModel.getRecipeBook());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        List\u003cRecipe\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredRecipeList());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getRecipeBook());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredRecipeList());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the recipe at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static void showRecipeAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredRecipeList().size());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Recipe recipe \u003d model.getFilteredRecipeList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        final String[] splitName \u003d recipe.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        model.updateFilteredRecipeList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertEquals(1, model.getFilteredRecipeList().size());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 7,
      "tharshita": 18,
      "-": 75,
      "beatricetay": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showRecipeAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_RECIPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalRecipeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Recipe recipeToDelete \u003d model.getFilteredRecipeList().get(INDEX_FIRST_RECIPE.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(new Index[] {INDEX_FIRST_RECIPE});"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String expectedMessageTemplate \u003d \"Deleted %1$s from recipe book!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String expectedMessage \u003d String.format(expectedMessageTemplate, recipeToDelete.getName().toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getRecipeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        expectedModel.deleteRecipe(recipeToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredRecipeList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(new Index[] {outOfBoundIndex});"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        showRecipeAtIndex(model, INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Recipe recipeToDelete \u003d model.getFilteredRecipeList().get(INDEX_FIRST_RECIPE.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(new Index[] {INDEX_FIRST_RECIPE});"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String expectedMessageTemplate \u003d \"Deleted %1$s from recipe book!\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        String expectedMessage \u003d String.format(expectedMessageTemplate, recipeToDelete.getName().toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getRecipeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        expectedModel.deleteRecipe(recipeToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        showNoRecipe(expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        showRecipeAtIndex(model, INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_RECIPE;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of recipe book list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getRecipeBook().getRecipeList().size());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(new Index[] {outOfBoundIndex});"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(new Index[] {INDEX_FIRST_RECIPE});"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(new Index[] {INDEX_SECOND_RECIPE});"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(new Index[] {INDEX_FIRST_RECIPE});"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // different recipe -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private void showNoRecipe(Model model) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        model.updateFilteredRecipeList(p -\u003e false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertTrue(model.getFilteredRecipeList().isEmpty());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 17,
      "tharshita": 19,
      "-": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_FISH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_FISH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showRecipeAtIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_RECIPE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditRecipeDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.testutil.EditRecipeDescriptorBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalRecipeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /* todo: after refactoring edit command"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Recipe editedRecipe \u003d new RecipeBuilder().build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        EditRecipeDescriptor descriptor \u003d new EditRecipeDescriptorBuilder(editedRecipe).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_RECIPE, descriptor);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_RECIPE_SUCCESS, editedRecipe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new RecipeBook(model.getRecipeBook()), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        expectedModel.setRecipe(model.getFilteredRecipeList().get(0), editedRecipe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /* todo: after refactoring edit command"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Index indexLastRecipe \u003d Index.fromOneBased(model.getFilteredRecipeList().size());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Recipe lastRecipe \u003d model.getFilteredRecipeList().get(indexLastRecipe.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        RecipeBuilder recipeInList \u003d new RecipeBuilder(lastRecipe);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Recipe editedRecipe \u003d recipeInList.withName(VALID_NAME_FISH).withTime(VALID_TIME_FISH)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .withGoals(VALID_GOAL_PROTEIN).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        EditRecipeDescriptor descriptor \u003d new EditRecipeDescriptorBuilder().withName(VALID_NAME_FISH)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .withTime(VALID_TIME_FISH).withGoals(VALID_GOAL_PROTEIN).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastRecipe, descriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_RECIPE_SUCCESS, editedRecipe);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new RecipeBook(model.getRecipeBook()), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        expectedModel.setRecipe(lastRecipe, editedRecipe);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /* todo: after refactoring edit command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_RECIPE, new EditRecipeDescriptor());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Recipe editedRecipe \u003d model.getFilteredRecipeList().get(INDEX_FIRST_RECIPE.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_RECIPE_SUCCESS, editedRecipe);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new RecipeBook(model.getRecipeBook()), new UserPrefs());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    } */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /* todo: after refactoring edit command"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        showRecipeAtIndex(model, INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Recipe recipeInFilteredList \u003d model.getFilteredRecipeList().get(INDEX_FIRST_RECIPE.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Recipe editedRecipe \u003d new RecipeBuilder(recipeInFilteredList).withName(VALID_NAME_FISH).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_RECIPE,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                new EditRecipeDescriptorBuilder().withName(VALID_NAME_FISH).build());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_RECIPE_SUCCESS, editedRecipe);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new RecipeBook(model.getRecipeBook()), new UserPrefs());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        expectedModel.setRecipe(model.getFilteredRecipeList().get(0), editedRecipe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void execute_duplicateRecipeUnfilteredList_failure() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Recipe firstRecipe \u003d model.getFilteredRecipeList().get(INDEX_FIRST_RECIPE.getZeroBased());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        EditRecipeDescriptor descriptor \u003d new EditRecipeDescriptorBuilder(firstRecipe).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_RECIPE, descriptor);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_RECIPE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void execute_duplicateRecipeFilteredList_failure() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        showRecipeAtIndex(model, INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // edit recipe in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Recipe recipeInList \u003d model.getRecipeBook().getRecipeList().get(INDEX_SECOND_RECIPE.getZeroBased());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_RECIPE,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                new EditRecipeDescriptorBuilder(recipeInList).build());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_RECIPE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void execute_invalidRecipeIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredRecipeList().size() + 1);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        EditRecipeDescriptor descriptor \u003d new EditRecipeDescriptorBuilder().withName(VALID_NAME_FISH).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void execute_invalidRecipeIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        showRecipeAtIndex(model, INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_RECIPE;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getRecipeBook().getRecipeList().size());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                new EditRecipeDescriptorBuilder().withName(VALID_NAME_FISH).build());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_RECIPE, DESC_TURKEY_SANDWICH);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        EditRecipeDescriptor copyDescriptor \u003d new EditRecipeDescriptor(DESC_TURKEY_SANDWICH);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_RECIPE, copyDescriptor);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_RECIPE, DESC_TURKEY_SANDWICH)));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_RECIPE, DESC_FISH)));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 8,
      "tharshita": 44,
      "-": 97,
      "beatricetay": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditRecipeDescriptorTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_FISH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GOAL_PROTEIN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_FISH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STEP_FISH;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIME_FISH;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditRecipeDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.testutil.EditRecipeDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class EditRecipeDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        EditRecipeDescriptor descriptorWithSameValues \u003d new EditRecipeDescriptor(DESC_TURKEY_SANDWICH);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertTrue(DESC_TURKEY_SANDWICH.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertTrue(DESC_TURKEY_SANDWICH.equals(DESC_TURKEY_SANDWICH));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(DESC_TURKEY_SANDWICH.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(DESC_TURKEY_SANDWICH.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(DESC_TURKEY_SANDWICH.equals(DESC_FISH));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        EditRecipeDescriptor editedAmy \u003d new EditRecipeDescriptorBuilder(DESC_TURKEY_SANDWICH)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .withName(VALID_NAME_FISH).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(DESC_TURKEY_SANDWICH.equals(editedAmy));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // different time -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        editedAmy \u003d new EditRecipeDescriptorBuilder(DESC_TURKEY_SANDWICH).withTime(VALID_TIME_FISH).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(DESC_TURKEY_SANDWICH.equals(editedAmy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // different step -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        editedAmy \u003d new EditRecipeDescriptorBuilder(DESC_TURKEY_SANDWICH).withSteps(VALID_STEP_FISH).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(DESC_TURKEY_SANDWICH.equals(editedAmy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // different goals -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        editedAmy \u003d new EditRecipeDescriptorBuilder(DESC_TURKEY_SANDWICH).withGoals(VALID_GOAL_PROTEIN).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(DESC_TURKEY_SANDWICH.equals(editedAmy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 1,
      "tharshita": 6,
      "-": 27,
      "beatricetay": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_RECIPES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalRecipeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalRecipeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // different recipe -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void execute_zeroKeywords_noRecipeFound() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_RECIPES_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        expectedModel.updateFilteredRecipeList(predicate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredRecipeList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /* todo: after refactoring find command"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void execute_multipleKeywords_multipleRecipesFound() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_RECIPES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        expectedModel.updateFilteredRecipeList(predicate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertEquals(Arrays.asList(BOILED_CHICKEN, OMELET, STEAMED_EGG), model.getFilteredRecipeList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 3,
      "tharshita": 10,
      "-": 65,
      "beatricetay": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showRecipeAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        model \u003d new ModelManager(getTypicalRecipeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getRecipeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        showRecipeAtIndex(model, INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 3,
      "tharshita": 3,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /* todo: after refactoring add command"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Recipe expectedRecipe \u003d new RecipeBuilder(FISH).withGoals(VALID_GOAL_GRAIN).build();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_FISH + TIME_DESC_FISH + STEP_DESC_FISH"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                + GOAL_DESC_GRAIN, new AddCommand(expectedRecipe));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_TURKEY_SANDWICH + NAME_DESC_FISH + TIME_DESC_FISH + STEP_DESC_FISH"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                + GOAL_DESC_GRAIN, new AddCommand(expectedRecipe));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // multiple times - last time accepted"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_FISH + TIME_DESC_TURKEY_SANDWICH + TIME_DESC_FISH + STEP_DESC_FISH"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                + GOAL_DESC_GRAIN, new AddCommand(expectedRecipe));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // multiple steps - last step accepted"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_FISH + TIME_DESC_FISH + STEP_DESC_TURKEY_SANDWICH + STEP_DESC_FISH"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                + GOAL_DESC_GRAIN, new AddCommand(expectedRecipe));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_FISH + TIME_DESC_FISH + STEP_DESC_FISH"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                + GOAL_DESC_GRAIN, new AddCommand(expectedRecipe));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // multiple goals - all accepted"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Recipe expectedRecipeMultipleGoals \u003d new RecipeBuilder(FISH).withGoals(VALID_GOAL_GRAIN, VALID_GOAL_PROTEIN)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_FISH + TIME_DESC_FISH + STEP_DESC_FISH"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                + GOAL_DESC_PROTEIN + GOAL_DESC_GRAIN, new AddCommand(expectedRecipeMultipleGoals));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /* todo: after refactoring add command"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // zero goals"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Recipe expectedRecipe \u003d new RecipeBuilder(TURKEY_SANDWICH).withGoals().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_TURKEY_SANDWICH + TIME_DESC_TURKEY_SANDWICH + STEP_DESC_TURKEY_SANDWICH,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                new AddCommand(expectedRecipe));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /* todo: after refactoring add command"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_FISH + TIME_DESC_FISH + STEP_DESC_FISH, expectedMessage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // missing time prefix"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_FISH + VALID_TIME_FISH + STEP_DESC_FISH, expectedMessage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // missing step prefix"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_FISH + TIME_DESC_FISH + VALID_STEP_FISH, expectedMessage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_FISH + VALID_TIME_FISH + VALID_STEP_FISH, expectedMessage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /* todo: after refactoring add command"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + TIME_DESC_FISH + STEP_DESC_FISH"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                + GOAL_DESC_PROTEIN + GOAL_DESC_GRAIN, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // invalid time"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_FISH + INVALID_TIME_DESC + STEP_DESC_FISH"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                + GOAL_DESC_PROTEIN + GOAL_DESC_GRAIN, Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // invalid step"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_FISH + TIME_DESC_FISH + INVALID_STEP_DESC"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                + GOAL_DESC_PROTEIN + GOAL_DESC_GRAIN, Step.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // invalid goal"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_FISH + TIME_DESC_FISH + STEP_DESC_FISH"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                + INVALID_GOAL_DESC + VALID_GOAL_GRAIN, Goal.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + TIME_DESC_FISH + STEP_DESC_FISH,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_FISH + TIME_DESC_FISH + STEP_DESC_FISH"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                + GOAL_DESC_PROTEIN + GOAL_DESC_GRAIN,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 10,
      "-": 44,
      "beatricetay": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        String argsString \u003d \"  some random string /g goal with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(new Index[] {INDEX_FIRST_RECIPE}));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 4,
      "tharshita": 1,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GOAL_DESC_GRAIN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GOAL_DESC_PROTEIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GOAL_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_STEP_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TIME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.STEP_DESC_FISH;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.STEP_DESC_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TIME_DESC_FISH;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TIME_DESC_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GOAL_GRAIN;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GOAL_PROTEIN;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STEP_FISH;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STEP_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIME_FISH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIME_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GOAL;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_RECIPE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_RECIPE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditRecipeDescriptor;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.goal.Goal;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Step;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Time;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.testutil.EditRecipeDescriptorBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private static final String GOAL_EMPTY \u003d \" \" + PREFIX_GOAL;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_TURKEY_SANDWICH, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_TURKEY_SANDWICH, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_TURKEY_SANDWICH, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TIME_DESC, Time.MESSAGE_CONSTRAINTS); // invalid time"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_STEP_DESC, Step.MESSAGE_CONSTRAINTS); // invalid step"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_GOAL_DESC, Goal.MESSAGE_CONSTRAINTS); // invalid goal"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // invalid time followed by valid step"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TIME_DESC + STEP_DESC_TURKEY_SANDWICH, Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // valid time followed by invalid time. The test case for invalid time followed by valid time"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertParseFailure(parser, \"1\" + TIME_DESC_FISH + INVALID_TIME_DESC, Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // while parsing {@code PREFIX_GOAL} alone will reset the goals of the {@code Recipe} being edited,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // parsing it together with a valid goal results in error"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertParseFailure(parser, \"1\" + GOAL_DESC_GRAIN + GOAL_DESC_PROTEIN + GOAL_EMPTY, Goal.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertParseFailure(parser, \"1\" + GOAL_DESC_GRAIN + GOAL_EMPTY + GOAL_DESC_PROTEIN, Goal.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertParseFailure(parser, \"1\" + GOAL_EMPTY + GOAL_DESC_GRAIN + GOAL_DESC_PROTEIN, Goal.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_STEP_DESC + VALID_TIME_TURKEY_SANDWICH,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_RECIPE;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TIME_DESC_FISH + GOAL_DESC_PROTEIN"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                + STEP_DESC_TURKEY_SANDWICH + NAME_DESC_TURKEY_SANDWICH + GOAL_DESC_GRAIN;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        EditRecipeDescriptor descriptor \u003d new EditRecipeDescriptorBuilder().withName(VALID_NAME_TURKEY_SANDWICH)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withTime(VALID_TIME_FISH).withSteps(VALID_STEP_TURKEY_SANDWICH)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .withGoals(VALID_GOAL_PROTEIN, VALID_GOAL_GRAIN).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TIME_DESC_FISH + STEP_DESC_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        EditRecipeDescriptor descriptor \u003d new EditRecipeDescriptorBuilder().withTime(VALID_TIME_FISH)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withSteps(VALID_STEP_TURKEY_SANDWICH).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_RECIPE;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        EditRecipeDescriptor descriptor \u003d new EditRecipeDescriptorBuilder()"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .withName(VALID_NAME_TURKEY_SANDWICH).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // time"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TIME_DESC_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        descriptor \u003d new EditRecipeDescriptorBuilder().withTime(VALID_TIME_TURKEY_SANDWICH).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // step"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + STEP_DESC_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        descriptor \u003d new EditRecipeDescriptorBuilder().withSteps(VALID_STEP_TURKEY_SANDWICH).build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // goals"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + GOAL_DESC_GRAIN;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        descriptor \u003d new EditRecipeDescriptorBuilder().withGoals(VALID_GOAL_GRAIN).build();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TIME_DESC_TURKEY_SANDWICH + STEP_DESC_TURKEY_SANDWICH"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                + GOAL_DESC_GRAIN + TIME_DESC_TURKEY_SANDWICH + STEP_DESC_TURKEY_SANDWICH + GOAL_DESC_GRAIN"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                + TIME_DESC_FISH + STEP_DESC_FISH + GOAL_DESC_PROTEIN;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        EditRecipeDescriptor descriptor \u003d new EditRecipeDescriptorBuilder().withTime(VALID_TIME_FISH)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withGoals(VALID_GOAL_GRAIN, VALID_GOAL_PROTEIN).withSteps(VALID_STEP_TURKEY_SANDWICH, VALID_STEP_FISH)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_TIME_DESC + TIME_DESC_FISH;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        EditRecipeDescriptor descriptor \u003d new EditRecipeDescriptorBuilder().withTime(VALID_TIME_FISH).build();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + STEP_DESC_FISH + INVALID_TIME_DESC + TIME_DESC_FISH;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        descriptor \u003d new EditRecipeDescriptorBuilder().withTime(VALID_TIME_FISH).withSteps(VALID_STEP_FISH).build();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void parse_resetGoals_success() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_RECIPE;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + GOAL_EMPTY;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        EditRecipeDescriptor descriptor \u003d new EditRecipeDescriptorBuilder().withGoals().build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 5,
      "tharshita": 32,
      "-": 117,
      "beatricetay": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.goal.Goal;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Step;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Time;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private static final String INVALID_TIME \u003d \"+651234\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private static final String INVALID_STEP \u003d \"   \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private static final String INVALID_GOAL \u003d \"#friend\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private static final String VALID_TIME \u003d \"123456\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private static final String VALID_STEP \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private static final String VALID_GOAL_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private static final String VALID_GOAL_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertEquals(INDEX_FIRST_RECIPE, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertEquals(INDEX_FIRST_RECIPE, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void parseTime_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTime((String) null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void parseTime_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTime(INVALID_TIME));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void parseTime_validValueWithoutWhitespace_returnsTime() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Time expectedTime \u003d new Time(VALID_TIME);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertEquals(expectedTime, ParserUtil.parseTime(VALID_TIME));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void parseTime_validValueWithWhitespace_returnsTrimmedTime() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        String timeWithWhitespace \u003d WHITESPACE + VALID_TIME + WHITESPACE;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Time expectedTime \u003d new Time(VALID_TIME);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertEquals(expectedTime, ParserUtil.parseTime(timeWithWhitespace));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void parseStep_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseStep((String) null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void parseStep_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseStep(INVALID_STEP));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void parseStep_validValueWithoutWhitespace_returnsStep() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Step expectedStep \u003d new Step(VALID_STEP);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertEquals(expectedStep, ParserUtil.parseStep(VALID_STEP));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void parseStep_validValueWithWhitespace_returnsTrimmedStep() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        String stepWithWhitespace \u003d WHITESPACE + VALID_STEP + WHITESPACE;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Step expectedStep \u003d new Step(VALID_STEP);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertEquals(expectedStep, ParserUtil.parseStep(stepWithWhitespace));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void parseGoal_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseGoal(null));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void parseGoal_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseGoal(INVALID_GOAL));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void parseGoal_validValueWithoutWhitespace_returnsGoal() throws Exception {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Goal expectedGoal \u003d new Goal(VALID_GOAL_1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertEquals(expectedGoal, ParserUtil.parseGoal(VALID_GOAL_1));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void parseGoal_validValueWithWhitespace_returnsTrimmedGoal() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        String goalWithWhitespace \u003d WHITESPACE + VALID_GOAL_1 + WHITESPACE;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Goal expectedGoal \u003d new Goal(VALID_GOAL_1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertEquals(expectedGoal, ParserUtil.parseGoal(goalWithWhitespace));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void parseGoals_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseGoals(null));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void parseGoals_collectionWithInvalidGoals_throwsParseException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseGoals(Arrays.asList(VALID_GOAL_1, INVALID_GOAL)));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void parseGoals_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertTrue(ParserUtil.parseGoals(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void parseGoals_collectionWithValidGoals_returnsGoalSet() throws Exception {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Set\u003cGoal\u003e actualGoalSet \u003d ParserUtil.parseGoals(Arrays.asList(VALID_GOAL_1, VALID_GOAL_2));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Set\u003cGoal\u003e expectedGoalSet \u003d new HashSet\u003cGoal\u003e(Arrays.asList(new Goal(VALID_GOAL_1), new Goal(VALID_GOAL_2)));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertEquals(expectedGoalSet, actualGoalSet);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 57,
      "-": 113
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/RecipeBookParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditRecipeDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.testutil.EditRecipeDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.testutil.RecipeUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class RecipeBookParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final RecipeBookParser parser \u003d new RecipeBookParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    // todo: resolve after refactoring add command"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Recipe recipe \u003d new RecipeBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(RecipeUtil.getAddCommand(recipe));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertEquals(new AddCommand(recipe), command);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RECIPE.getOneBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertEquals(new DeleteCommand(new Index[] {INDEX_FIRST_RECIPE}), command);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Recipe recipe \u003d new RecipeBuilder().build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        EditRecipeDescriptor descriptor \u003d new EditRecipeDescriptorBuilder(recipe).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                + INDEX_FIRST_RECIPE.getOneBased() + \" \" + RecipeUtil.getEditRecipeDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_RECIPE, descriptor), command);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 4,
      "tharshita": 15,
      "-": 80,
      "beatricetay": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_RECIPES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.CAESAR_SALAD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.GRILLED_SANDWICH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.testutil.RecipeBookBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertEquals(new RecipeBook(), new RecipeBook(modelManager.getRecipeBook()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        userPrefs.setRecipeBookFilePath(Paths.get(\"recipe/book/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        userPrefs.setRecipeBookFilePath(Paths.get(\"new/recipe/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void setRecipeBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setRecipeBookFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void setRecipeBookFilePath_validPath_setsRecipeBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Path path \u003d Paths.get(\"recipe/book/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        modelManager.setRecipeBookFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertEquals(path, modelManager.getRecipeBookFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void hasRecipe_nullRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasRecipe(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void hasRecipe_recipeNotInRecipeBook_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(modelManager.hasRecipe(CAESAR_SALAD));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void hasRecipe_recipeInRecipeBook_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        modelManager.addRecipe(CAESAR_SALAD);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertTrue(modelManager.hasRecipe(CAESAR_SALAD));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void getFilteredRecipeList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredRecipeList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        RecipeBook recipeBook \u003d new RecipeBookBuilder().withRecipe(CAESAR_SALAD).withRecipe(GRILLED_SANDWICH).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        RecipeBook differentRecipeBook \u003d new RecipeBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        modelManager \u003d new ModelManager(recipeBook, userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(recipeBook, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // different recipeBook -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentRecipeBook, userPrefs)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        String[] keywords \u003d CAESAR_SALAD.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        modelManager.updateFilteredRecipeList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(recipeBook, userPrefs)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        modelManager.updateFilteredRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        differentUserPrefs.setRecipeBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(recipeBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 20,
      "tharshita": 8,
      "-": 97,
      "beatricetay": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/model/RecipeBookTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GOAL_PROTEIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.CAESAR_SALAD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.exceptions.DuplicateRecipeException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class RecipeBookTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private final RecipeBook recipeBook \u003d new RecipeBook();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertEquals(Collections.emptyList(), recipeBook.getRecipeList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e recipeBook.resetData(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void resetData_withValidReadOnlyRecipeBook_replacesData() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        RecipeBook newData \u003d getTypicalRecipeBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        recipeBook.resetData(newData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertEquals(newData, recipeBook);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void resetData_withDuplicateRecipes_throwsDuplicateRecipeException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // Two recipes with the same identity fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Recipe editedAlice \u003d new RecipeBuilder(CAESAR_SALAD).withGoals(VALID_GOAL_PROTEIN)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        List\u003cRecipe\u003e newRecipes \u003d Arrays.asList(CAESAR_SALAD, editedAlice);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        RecipeBookStub newData \u003d new RecipeBookStub(newRecipes);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertThrows(DuplicateRecipeException.class, () -\u003e recipeBook.resetData(newData));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void hasRecipe_nullRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e recipeBook.hasRecipe(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void hasRecipe_recipeNotInRecipeBook_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(recipeBook.hasRecipe(CAESAR_SALAD));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void hasRecipe_recipeInRecipeBook_returnsTrue() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        recipeBook.addRecipe(CAESAR_SALAD);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertTrue(recipeBook.hasRecipe(CAESAR_SALAD));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void hasRecipe_recipeWithSameIdentityFieldsInRecipeBook_returnsTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        recipeBook.addRecipe(CAESAR_SALAD);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Recipe editedAlice \u003d new RecipeBuilder(CAESAR_SALAD).withGoals(VALID_GOAL_PROTEIN)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertTrue(recipeBook.hasRecipe(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void getRecipeList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e recipeBook.getRecipeList().remove(0));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * A stub ReadOnlyRecipeBook whose recipes list can violate interface constraints."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private static class RecipeBookStub implements ReadOnlyRecipeBook {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        private final ObservableList\u003cRecipe\u003e recipes \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        RecipeBookStub(Collection\u003cRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            this.recipes.setAll(recipes);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        public ObservableList\u003cRecipe\u003e getRecipeList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            return recipes;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 20,
      "tharshita": 11,
      "-": 61,
      "beatricetay": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void setRecipeBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setRecipeBookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/goal/GoalTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "package seedu.address.model.goal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class GoalTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Goal(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void constructor_invalidGoalName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        String invalidGoalName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Goal(invalidGoalName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void isValidGoalName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // null goal name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Goal.isValidGoalName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/model/recipe/AddressTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tharshita": 1,
      "-": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/recipe/NameContainsKeywordsPredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // different recipe -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertTrue(predicate.test(new RecipeBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertTrue(predicate.test(new RecipeBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertTrue(predicate.test(new RecipeBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertTrue(predicate.test(new RecipeBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertFalse(predicate.test(new RecipeBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertFalse(predicate.test(new RecipeBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // Keywords match time and step, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertFalse(predicate.test(new RecipeBuilder().withName(\"Alice\").withTime(\"12345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withSteps(\"Sample step\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 1,
      "tharshita": 11,
      "-": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/model/recipe/NameTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/recipe/RecipeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GOAL_PROTEIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_FISH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STEP_FISH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIME_FISH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.CAESAR_SALAD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.FISH;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class RecipeTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Recipe recipe \u003d new RecipeBuilder().build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e recipe.getGoals().remove(0));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void isSameRecipe() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertTrue(CAESAR_SALAD.isSameRecipe(CAESAR_SALAD));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(CAESAR_SALAD.isSameRecipe(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // different time and email -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Recipe editedCaesar \u003d new RecipeBuilder(CAESAR_SALAD)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                .withTime(VALID_TIME_FISH).withSteps(VALID_STEP_FISH).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(CAESAR_SALAD.isSameRecipe(editedCaesar));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        editedCaesar \u003d new RecipeBuilder(CAESAR_SALAD).withName(VALID_NAME_FISH).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(CAESAR_SALAD.isSameRecipe(editedCaesar));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // same name, same time, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        editedCaesar \u003d new RecipeBuilder(CAESAR_SALAD).withSteps(VALID_STEP_FISH)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                .withGoals(VALID_GOAL_PROTEIN).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertTrue(CAESAR_SALAD.isSameRecipe(editedCaesar));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        editedCaesar \u003d new RecipeBuilder(CAESAR_SALAD).withTime(VALID_TIME_FISH).withGoals(VALID_GOAL_PROTEIN).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertTrue(CAESAR_SALAD.isSameRecipe(editedCaesar));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // same name, same time, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        editedCaesar \u003d new RecipeBuilder(CAESAR_SALAD).withGoals(VALID_GOAL_PROTEIN).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertTrue(CAESAR_SALAD.isSameRecipe(editedCaesar));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Recipe aliceCopy \u003d new RecipeBuilder(CAESAR_SALAD).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertTrue(CAESAR_SALAD.equals(aliceCopy));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertTrue(CAESAR_SALAD.equals(CAESAR_SALAD));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(CAESAR_SALAD.equals(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(CAESAR_SALAD.equals(5));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // different recipe -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(CAESAR_SALAD.equals(FISH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Recipe editedCaesar \u003d new RecipeBuilder(CAESAR_SALAD).withName(VALID_NAME_FISH).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(CAESAR_SALAD.equals(editedCaesar));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        editedCaesar \u003d new RecipeBuilder(CAESAR_SALAD).withSteps(VALID_STEP_FISH).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(CAESAR_SALAD.equals(editedCaesar));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // different goals -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        editedCaesar \u003d new RecipeBuilder(CAESAR_SALAD).withGoals(VALID_GOAL_PROTEIN).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(CAESAR_SALAD.equals(editedCaesar));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 3,
      "tharshita": 11,
      "-": 44,
      "beatricetay": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/model/recipe/StepTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class StepTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Step(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void constructor_invalidStep_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        String invalidStep \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Step(invalidStep));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void isValidStep() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // null step"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Step.isValidStep(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // blank step"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertFalse(Step.isValidStep(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertFalse(Step.isValidStep(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertFalse(Step.isValidStep(\"           \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // valid step"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertTrue(Step.isValidStep(\"contact PeterJack_1190@example.com for recipe\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertTrue(Step.isValidStep(\"a\")); // minimal"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertTrue(Step.isValidStep(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertTrue(Step.isValidStep(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertTrue(Step.isValidStep(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertTrue(Step.isValidStep(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertTrue(Step.isValidStep(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertTrue(Step.isValidStep(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/model/recipe/TimeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class TimeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Time(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void constructor_invalidTime_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        String invalidTime \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Time(invalidTime));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void isValidTime() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // null time number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Time.isValidTime(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // invalid time numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertFalse(Time.isValidTime(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertFalse(Time.isValidTime(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertFalse(Time.isValidTime(\"time\")); // non-numeric"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertFalse(Time.isValidTime(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertFalse(Time.isValidTime(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        // valid time numbers"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertTrue(Time.isValidTime(\"0\")); // exactly 1 number"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertTrue(Time.isValidTime(\"91\")); // 2 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertTrue(Time.isValidTime(\"911\")); // 3 numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertTrue(Time.isValidTime(\"93121534\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertTrue(Time.isValidTime(\"124293842033123\")); // long time numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/recipe/UniqueRecipeListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GOAL_PROTEIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.CAESAR_SALAD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.FISH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.exceptions.DuplicateRecipeException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.exceptions.RecipeNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class UniqueRecipeListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private final UniqueRecipeList uniqueRecipeList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void contains_nullRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRecipeList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void contains_recipeNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertFalse(uniqueRecipeList.contains(CAESAR_SALAD));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void contains_recipeInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        uniqueRecipeList.add(CAESAR_SALAD);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertTrue(uniqueRecipeList.contains(CAESAR_SALAD));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void contains_recipeWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        uniqueRecipeList.add(CAESAR_SALAD);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Recipe editedAlice \u003d new RecipeBuilder(CAESAR_SALAD).withGoals(VALID_GOAL_PROTEIN)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertTrue(uniqueRecipeList.contains(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void add_nullRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRecipeList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void add_duplicateRecipe_throwsDuplicateRecipeException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        uniqueRecipeList.add(CAESAR_SALAD);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertThrows(DuplicateRecipeException.class, () -\u003e uniqueRecipeList.add(CAESAR_SALAD));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void setRecipe_nullTargetRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRecipeList.setRecipe(null, CAESAR_SALAD));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void setRecipe_nullEditedRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRecipeList.setRecipe(CAESAR_SALAD, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void setRecipe_targetRecipeNotInList_throwsRecipeNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertThrows(RecipeNotFoundException.class, () -\u003e uniqueRecipeList.setRecipe(CAESAR_SALAD, CAESAR_SALAD));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void setRecipe_editedRecipeIsSameRecipe_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        uniqueRecipeList.add(CAESAR_SALAD);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        uniqueRecipeList.setRecipe(CAESAR_SALAD, CAESAR_SALAD);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        UniqueRecipeList expectedUniqueRecipeList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        expectedUniqueRecipeList.add(CAESAR_SALAD);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertEquals(expectedUniqueRecipeList, uniqueRecipeList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void setRecipe_editedRecipeHasSameIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        uniqueRecipeList.add(CAESAR_SALAD);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        Recipe editedAlice \u003d new RecipeBuilder(CAESAR_SALAD).withGoals(VALID_GOAL_PROTEIN).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        uniqueRecipeList.setRecipe(CAESAR_SALAD, editedAlice);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        UniqueRecipeList expectedUniqueRecipeList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        expectedUniqueRecipeList.add(editedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertEquals(expectedUniqueRecipeList, uniqueRecipeList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void setRecipe_editedRecipeHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        uniqueRecipeList.add(CAESAR_SALAD);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        uniqueRecipeList.setRecipe(CAESAR_SALAD, FISH);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        UniqueRecipeList expectedUniqueRecipeList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        expectedUniqueRecipeList.add(FISH);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertEquals(expectedUniqueRecipeList, uniqueRecipeList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void setRecipe_editedRecipeHasNonUniqueIdentity_throwsDuplicateRecipeException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        uniqueRecipeList.add(CAESAR_SALAD);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        uniqueRecipeList.add(FISH);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertThrows(DuplicateRecipeException.class, () -\u003e uniqueRecipeList.setRecipe(CAESAR_SALAD, FISH));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void remove_nullRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRecipeList.remove(null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void remove_recipeDoesNotExist_throwsRecipeNotFoundException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertThrows(RecipeNotFoundException.class, () -\u003e uniqueRecipeList.remove(CAESAR_SALAD));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void remove_existingRecipe_removesRecipe() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        uniqueRecipeList.add(CAESAR_SALAD);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        uniqueRecipeList.remove(CAESAR_SALAD);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        UniqueRecipeList expectedUniqueRecipeList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertEquals(expectedUniqueRecipeList, uniqueRecipeList);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void setRecipes_nullUniqueRecipeList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRecipeList.setRecipes((UniqueRecipeList) null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void setRecipes_uniqueRecipeList_replacesOwnListWithProvidedUniqueRecipeList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        uniqueRecipeList.add(CAESAR_SALAD);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        UniqueRecipeList expectedUniqueRecipeList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        expectedUniqueRecipeList.add(FISH);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        uniqueRecipeList.setRecipes(expectedUniqueRecipeList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertEquals(expectedUniqueRecipeList, uniqueRecipeList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void setRecipes_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRecipeList.setRecipes((List\u003cRecipe\u003e) null));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void setRecipes_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        uniqueRecipeList.add(CAESAR_SALAD);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        List\u003cRecipe\u003e recipeList \u003d Collections.singletonList(FISH);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        uniqueRecipeList.setRecipes(recipeList);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        UniqueRecipeList expectedUniqueRecipeList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        expectedUniqueRecipeList.add(FISH);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertEquals(expectedUniqueRecipeList, uniqueRecipeList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void setRecipes_listWithDuplicateRecipes_throwsDuplicateRecipeException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        List\u003cRecipe\u003e listWithDuplicateRecipes \u003d Arrays.asList(CAESAR_SALAD, CAESAR_SALAD);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(DuplicateRecipeException.class, () -\u003e uniqueRecipeList.setRecipes(listWithDuplicateRecipes));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            -\u003e uniqueRecipeList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 134,
      "beatricetay": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedRecipeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.address.storage.JsonAdaptedRecipe.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.GRILLED_SANDWICH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Step;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Time;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class JsonAdaptedRecipeTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private static final String INVALID_TIME \u003d \"+651234\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private static final String INVALID_STEP \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private static final String INVALID_GOAL \u003d \"#friend\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private static final String VALID_NAME \u003d GRILLED_SANDWICH.getName().toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private static final String VALID_TIME \u003d GRILLED_SANDWICH.getTime().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private static final List\u003cJsonAdaptedIngredient\u003e VALID_INGREDIENTS \u003d GRILLED_SANDWICH.getIngredients().stream()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .map(JsonAdaptedIngredient::new)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private static final List\u003cJsonAdaptedStep\u003e VALID_STEP \u003d GRILLED_SANDWICH.getSteps().stream()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            .map(JsonAdaptedStep::new).collect(Collectors.toList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private static final List\u003cJsonAdaptedGoal\u003e VALID_GOALS \u003d GRILLED_SANDWICH.getGoals().stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            .map(JsonAdaptedGoal::new)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private static final List\u003cJsonAdaptedStep\u003e INVALID_STEPS \u003d new ArrayList\u003c\u003e(VALID_STEP);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private static final List\u003cJsonAdaptedGoal\u003e INVALID_GOALS \u003d new ArrayList\u003c\u003e(VALID_GOALS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private static final boolean IS_NOT_FAVOURITE \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private static final boolean IS_FAVOURITE \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void toModelType_validRecipeDetails_returnsRecipe() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d new JsonAdaptedRecipe(GRILLED_SANDWICH);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        assertEquals(GRILLED_SANDWICH, recipe.toModelType());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                new JsonAdaptedRecipe(INVALID_NAME, VALID_TIME, IS_NOT_FAVOURITE,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        VALID_INGREDIENTS, VALID_STEP, VALID_GOALS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d new JsonAdaptedRecipe(null, VALID_TIME, IS_NOT_FAVOURITE,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                VALID_INGREDIENTS, VALID_STEP, VALID_GOALS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void toModelType_invalidTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                new JsonAdaptedRecipe(VALID_NAME, INVALID_TIME, IS_NOT_FAVOURITE,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        VALID_INGREDIENTS, VALID_STEP, VALID_GOALS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        String expectedMessage \u003d Time.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void toModelType_nullTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d new JsonAdaptedRecipe(VALID_NAME, null, IS_NOT_FAVOURITE,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                VALID_INGREDIENTS, VALID_STEP, VALID_GOALS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Time.class.getSimpleName());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void toModelType_invalidStep_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        INVALID_STEPS.add(new JsonAdaptedStep(INVALID_STEP));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                new JsonAdaptedRecipe(VALID_NAME, VALID_TIME, IS_NOT_FAVOURITE,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        VALID_INGREDIENTS, INVALID_STEPS, VALID_GOALS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        String expectedMessage \u003d Step.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void toModelType_nullStep_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d new JsonAdaptedRecipe(VALID_NAME, VALID_TIME, IS_NOT_FAVOURITE,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                VALID_INGREDIENTS, null, VALID_GOALS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Step.class.getSimpleName());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void toModelType_invalidGoals_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        INVALID_GOALS.add(new JsonAdaptedGoal(INVALID_GOAL));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                new JsonAdaptedRecipe(VALID_NAME, VALID_TIME, IS_NOT_FAVOURITE,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                        VALID_INGREDIENTS, VALID_STEP, INVALID_GOALS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertThrows(IllegalValueException.class, recipe::toModelType);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 22,
      "tharshita": 30,
      "-": 45,
      "beatricetay": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonRecipeBookStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.CAESAR_SALAD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.FISH_TACO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.VEGETARIAN_PIZZA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.model.RecipeBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class JsonRecipeBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonRecipeBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void readRecipeBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readRecipeBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private java.util.Optional\u003cReadOnlyRecipeBook\u003e readRecipeBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return new JsonRecipeBookStorage(Paths.get(filePath)).readRecipeBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertFalse(readRecipeBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readRecipeBook(\"notJsonFormatRecipeBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void readRecipeBook_invalidRecipeRecipeBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readRecipeBook(\"invalidRecipeRecipeBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void readRecipeBook_invalidAndValidRecipeRecipeBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readRecipeBook(\"invalidAndValidRecipeBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void readAndSaveRecipeBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempRecipeBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        RecipeBook original \u003d getTypicalRecipeBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        JsonRecipeBookStorage jsonRecipeBookStorage \u003d new JsonRecipeBookStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        jsonRecipeBookStorage.saveRecipeBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        ReadOnlyRecipeBook readBack \u003d jsonRecipeBookStorage.readRecipeBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertEquals(original, new RecipeBook(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        original.addRecipe(FISH_TACO);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        original.removeRecipe(CAESAR_SALAD);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        jsonRecipeBookStorage.saveRecipeBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        readBack \u003d jsonRecipeBookStorage.readRecipeBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertEquals(original, new RecipeBook(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        original.addRecipe(VEGETARIAN_PIZZA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        jsonRecipeBookStorage.saveRecipeBook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        readBack \u003d jsonRecipeBookStorage.readRecipeBook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertEquals(original, new RecipeBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void saveRecipeBook_nullRecipeBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveRecipeBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Saves {@code recipeBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private void saveRecipeBook(ReadOnlyRecipeBook recipeBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            new JsonRecipeBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                    .saveRecipeBook(recipeBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void saveRecipeBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveRecipeBook(new RecipeBook(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 104,
      "beatricetay": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableRecipeBookTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.model.RecipeBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.testutil.TypicalRecipes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class JsonSerializableRecipeBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableRecipeBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private static final Path TYPICAL_RECIPES_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalRecipesRecipeBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private static final Path INVALID_RECIPE_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidRecipeRecipeBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private static final Path DUPLICATE_RECIPE_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateRecipeRecipeBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void toModelType_typicalRecipesFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        JsonSerializableRecipeBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_RECIPES_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                JsonSerializableRecipeBook.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        RecipeBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        RecipeBook typicalRecipesAddressBook \u003d TypicalRecipes.getTypicalRecipeBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        assertEquals(addressBookFromFile, typicalRecipesAddressBook);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void toModelType_invalidRecipeFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        JsonSerializableRecipeBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_RECIPE_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                JsonSerializableRecipeBook.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public void toModelType_duplicateRecipes_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        JsonSerializableRecipeBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_RECIPE_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                JsonSerializableRecipeBook.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertThrows(IllegalValueException.class,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                seedu.address.storage.JsonSerializableRecipeBook.MESSAGE_DUPLICATE_RECIPE,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 16,
      "tharshita": 7,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        userPrefs.setRecipeBookFilePath(Paths.get(\"data\" , \"addressbook.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 1,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.model.RecipeBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        JsonRecipeBookStorage recipeBookStorage \u003d new JsonRecipeBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        storageManager \u003d new StorageManager(recipeBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void recipeBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "         * {@link JsonRecipeBookStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonRecipeBookStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        RecipeBook original \u003d getTypicalRecipeBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        storageManager.saveRecipeBook(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        ReadOnlyRecipeBook retrieved \u003d storageManager.readRecipeBook().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertEquals(original, new RecipeBook(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public void getRecipeBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        assertNotNull(storageManager.getRecipeBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 14,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditRecipeDescriptorBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditRecipeDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.goal.Goal;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Step;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tharshita"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * A utility class to help with building EditRecipeDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tharshita"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class EditRecipeDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private EditRecipeDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public EditRecipeDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        descriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public EditRecipeDescriptorBuilder(EditRecipeDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.descriptor \u003d new EditRecipeDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns an {@code EditRecipeDescriptor} with fields containing {@code recipe}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public EditRecipeDescriptorBuilder(Recipe recipe) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        descriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        descriptor.setName(recipe.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        descriptor.setTime(recipe.getTime());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        descriptor.setSteps(recipe.getSteps());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        descriptor.setGoals(recipe.getGoals());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Sets the {@code Name} of the {@code EditRecipeDescriptor} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public EditRecipeDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Sets the {@code Time} of the {@code EditRecipeDescriptor} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public EditRecipeDescriptorBuilder withTime(String time) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        descriptor.setTime(new Time(time));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Sets the {@code Step} of the {@code EditRecipeDescriptor} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public EditRecipeDescriptorBuilder withSteps(String ... steps) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        List\u003cStep\u003e stepsList \u003d Stream.of(steps).map(Step::new).collect(Collectors.toList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        descriptor.setSteps(stepsList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Parses the {@code goals} into a {@code Set\u003cGoal\u003e} and set it to the {@code EditRecipeDescriptor}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public EditRecipeDescriptorBuilder withGoals(String... goals) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        Set\u003cGoal\u003e goalSet \u003d Stream.of(goals).map(Goal::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        descriptor.setGoals(goalSet);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public EditRecipeDescriptor build() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 5,
      "tharshita": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/RecipeBookBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.model.RecipeBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * A utility class to help with building RecipeBook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " *     {@code RecipeBook ab \u003d new RecipeBookBuilder().withRecipe(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "public class RecipeBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private RecipeBook recipeBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public RecipeBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        recipeBook \u003d new RecipeBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public RecipeBookBuilder(RecipeBook recipeBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.recipeBook \u003d recipeBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Adds a new {@code Recipe} to the {@code RecipeBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public RecipeBookBuilder withRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        recipeBook.addRecipe(recipe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public RecipeBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return recipeBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/RecipeBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tharshita"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.goal.Goal;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Step;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.address.model.recipe.ingredient.Ingredient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import seedu.address.model.recipe.ingredient.Vegetable;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * A utility class to help with building Recipe objects."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class RecipeBuilder {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Egg Tomato Stir Fry\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final String DEFAULT_TIME \u003d \"10\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final boolean DEFAULT_FAVOURITE \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static final Step DEFAULT_STEP \u003d new Step(\"Cut tomatoes into crescent shaped slices\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final Ingredient DEFAULT_INGREDIENT \u003d new Vegetable(\"Tomato\", 100);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private Time time;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private boolean isFavourite;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    private Set\u003cIngredient\u003e ingredients;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    private List\u003cStep\u003e steps;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private Set\u003cGoal\u003e goals;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public RecipeBuilder() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        time \u003d new Time(DEFAULT_TIME);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        isFavourite \u003d DEFAULT_FAVOURITE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        ingredients \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        ingredients.add(DEFAULT_INGREDIENT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        steps \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        steps.add(DEFAULT_STEP);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        goals \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Initializes the RecipeBuilder with the data of {@code recipeToCopy}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public RecipeBuilder(Recipe recipeToCopy) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        name \u003d recipeToCopy.getName();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        time \u003d recipeToCopy.getTime();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        isFavourite \u003d recipeToCopy.getFavouriteStatus();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        ingredients \u003d recipeToCopy.getIngredients();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        steps \u003d recipeToCopy.getSteps();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        goals \u003d new HashSet\u003c\u003e(recipeToCopy.getGoals());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Sets the {@code Name} of the {@code Recipe} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public RecipeBuilder withName(String name) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Parses the {@code goals} into a {@code Set\u003cGoal\u003e} and set it to the {@code Recipe} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public RecipeBuilder withGoals(String ... goals) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.goals \u003d SampleDataUtil.getGoalSet(goals);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Sets the {@code Time} of the {@code Recipe} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public RecipeBuilder withTime(String time) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        this.time \u003d new Time(time);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Sets the {@code Step} of the {@code Recipe} that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public RecipeBuilder withSteps(String ... steps) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        this.steps \u003d SampleDataUtil.getStepsList(steps);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     * Sets the {@code Ingredient} of the {@code Recipe} that we are building."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public RecipeBuilder withIngredients(String ... ingredients) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        this.ingredients \u003d SampleDataUtil.getIngredientSet(ingredients);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public Recipe build() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        return new Recipe(name, time, ingredients, steps, goals, isFavourite);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tharshita"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tharshita"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 16,
      "tharshita": 71,
      "beatricetay": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/RecipeUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GOAL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STEP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditRecipeDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.goal.Goal;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.model.recipe.Step;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * A utility class for Recipe."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class RecipeUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns an add command string for adding the {@code recipe}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static String getAddCommand(Recipe recipe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getRecipeDetails(recipe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns the part of command string for the given {@code recipe}\u0027s details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static String getRecipeDetails(Recipe recipe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        sb.append(PREFIX_NAME).append(recipe.getName().fullName).append(\" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        sb.append(PREFIX_TIME).append(recipe.getTime().value).append(\" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        //sb.append(PREFIX_INGREDIENT_GRAIN).append(recipe.getIngredients())"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        // TODO: reconsider saving each ingredient type as a separate recipe variable"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        recipe.getSteps().forEach(step -\u003e sb.append(PREFIX_STEP).append(step.value).append(\" \"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        recipe.getGoals().forEach(s -\u003e sb.append(PREFIX_GOAL).append(s.goalName).append(\" \"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns the part of command string for the given {@code EditRecipeDescriptor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static String getEditRecipeDescriptorDetails(EditRecipeDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        descriptor.getTime().ifPresent(time -\u003e sb.append(PREFIX_TIME).append(time.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        if (descriptor.getSteps().isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            List\u003cStep\u003e steps \u003d descriptor.getSteps().get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            if (steps.isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                sb.append(PREFIX_STEP);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "                steps.forEach(step -\u003e sb.append(PREFIX_STEP).append(step.value).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        if (descriptor.getGoals().isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            Set\u003cGoal\u003e goals \u003d descriptor.getGoals().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            if (goals.isEmpty()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                sb.append(PREFIX_GOAL);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tharshita"
        },
        "content": "                goals.forEach(s -\u003e sb.append(PREFIX_GOAL).append(s.goalName).append(\" \"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 14,
      "tharshita": 21,
      "-": 31,
      "beatricetay": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns the middle index of the recipe in the {@code model}\u0027s recipe list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return Index.fromOneBased(model.getFilteredRecipeList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns the last index of the recipe in the {@code model}\u0027s recipe list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return Index.fromOneBased(model.getFilteredRecipeList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tharshita"
        },
        "content": "     * Returns the recipe in the {@code model}\u0027s recipe list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static Recipe getRecipe(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        return model.getFilteredRecipeList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final Index INDEX_FIRST_RECIPE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final Index INDEX_SECOND_RECIPE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static final Index INDEX_THIRD_RECIPE \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tharshita": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalRecipes.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GOAL_GRAIN;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GOAL_PROTEIN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_FISH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_FISH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STEP_FISH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STEP_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIME_FISH;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIME_TURKEY_SANDWICH;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "import seedu.address.model.RecipeBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tharshita"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tharshita"
        },
        "content": " * A utility class containing a list of {@code Recipe} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tharshita"
        },
        "content": "public class TypicalRecipes {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final Recipe CAESAR_SALAD \u003d new RecipeBuilder().withName(\"Caesar Salad\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            .withTime(\"10\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withIngredients(\"Tomato, 100, vegetable\", \"Honeydew, 100, other\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withSteps(\"Cut tomatoes\", \"Remove honeydew skin\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withGoals(\"Herbivore\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final Recipe GRILLED_SANDWICH \u003d new RecipeBuilder().withName(\"Grilled Sandwich\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withTime(\"10\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withIngredients(\"Bread, 50, grain\", \"Cheese, 50, other\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withSteps(\"Spread butter on bread\", \"Heat pan to medium heat\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withGoals(\"Wholesome Wholemeal\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final Recipe BOILED_CHICKEN \u003d new RecipeBuilder().withName(\"Boiled Chicken\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withTime(\"10\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            .withIngredients(\"Chicken, 100, protein\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withSteps(\"Dice chicken\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withGoals(\"Bulk like the Hulk\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final Recipe CHOCOLATE_CAKE \u003d new RecipeBuilder().withName(\"Chocolate Cake\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withTime(\"120\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withIngredients(\"Sugar, 100, other\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            .withSteps(\"Caramelize sugar\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final Recipe OMELET \u003d new RecipeBuilder().withName(\"Omelet\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withTime(\"15\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withIngredients(\"Egg, 50, protein\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            .withSteps(\"Crack and beat eggs\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final Recipe STEAMED_EGG \u003d new RecipeBuilder().withName(\"Steamed Egg\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withTime(\"15\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withIngredients(\"Egg, 50, protein\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            .withSteps(\"Pour water into steamer and bring to a boil\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "beatricetay"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final Recipe TUNA_BREAD \u003d new RecipeBuilder().withName(\"Tuna Bread\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withTime(\"60\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withIngredients(\"Tuna, 100, protein\", \"Bread, 100, grain\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withGoals(\"Bulk like the Hulk\", \"Wholesome Wholemeal\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            .withSteps(\"Slice tuna\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final Recipe FISH_TACO \u003d new RecipeBuilder().withName(\"Fish Taco\").withTime(\"60\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withIngredients(\"Fish, 100, protein\", \"Taco, 50, grain\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            .withSteps(\"Grill fish until skin is slightly crispy and meat is opaque and flaky\").build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final Recipe VEGETARIAN_PIZZA \u003d new RecipeBuilder().withName(\"Vegetarian Pizza\").withTime(\"45\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withIngredients(\"Tomato sauce, 100, other\", \"Dough, 300, grain\", \"Capsicum, 100, vegetable\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            .withGoals(\"Herbivore\").withSteps(\"Roll dough until stretchy and thin\").build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    // Manually added - Recipe\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final Recipe TURKEY_SANDWICH \u003d new RecipeBuilder().withName(VALID_NAME_TURKEY_SANDWICH)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withTime(VALID_TIME_TURKEY_SANDWICH)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withIngredients(VALID_INGREDIENT_TURKEY_SANDWICH)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            .withGoals(VALID_GOAL_GRAIN).withSteps(VALID_STEP_TURKEY_SANDWICH).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "    public static final Recipe FISH \u003d new RecipeBuilder().withName(VALID_NAME_FISH).withTime(VALID_TIME_FISH)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "            .withIngredients(VALID_INGREDIENT_FISH)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "            .withGoals(VALID_GOAL_PROTEIN).withSteps(VALID_STEP_FISH).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    private TypicalRecipes() {} // prevents instantiation"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "     * Returns an {@code RecipeBook} with all the typical recipes."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "    public static RecipeBook getTypicalRecipeBook() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pekchinsiongbrian"
        },
        "content": "        RecipeBook ab \u003d new RecipeBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tharshita"
        },
        "content": "        for (Recipe recipe : getTypicalRecipes()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tharshita"
        },
        "content": "            ab.addRecipe(recipe);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tharshita"
        },
        "content": "    public static List\u003cRecipe\u003e getTypicalRecipes() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CAESAR_SALAD, GRILLED_SANDWICH, BOILED_CHICKEN, CHOCOLATE_CAKE,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "beatricetay"
        },
        "content": "                OMELET, STEAMED_EGG, TUNA_BREAD));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pekchinsiongbrian": 14,
      "tharshita": 7,
      "-": 26,
      "beatricetay": 54
    }
  }
]
