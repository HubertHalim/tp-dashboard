[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "mainClassName \u003d \u0027tatracker.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    archiveName \u003d \u0027taTracker.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        \u0027site-name\u0027: \u0027TA-Tracker\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S2-CS2103T-W17-4/main\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 1,
      "chuayijing": 1,
      "PotatoCombat": 2,
      "-": 151
    }
  },
  {
    "path": "src/main/java/tatracker/AppParameters.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/tatracker/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/tatracker/MainApp.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eclmist"
        },
        "content": "import tatracker.commons.core.Notification;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.core.Version;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.ReadOnlyTaTracker;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.TaTracker;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.storage.JsonTaTrackerStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.storage.TaTrackerStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.ui.Ui;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.ui.UiManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing TaTracker ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        TaTrackerStorage taTrackerStorage \u003d new JsonTaTrackerStorage(userPrefs.getTaTrackerFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        storage \u003d new StorageManager(taTrackerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s TA-Tracker and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * The data from the sample ta-tracker will be used instead if {@code storage}\u0027s ta-tracker is not found,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * or an empty ta-tracker will be used instead if errors occur when reading {@code storage}\u0027s ta-tracker."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        Optional\u003cReadOnlyTaTracker\u003e taTrackerOptional;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        ReadOnlyTaTracker initialData;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            taTrackerOptional \u003d storage.readTaTracker();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            if (!taTrackerOptional.isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample TaTracker\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            initialData \u003d taTrackerOptional.orElseGet(SampleDataUtil::getSampleTaTracker);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty TaTracker\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            initialData \u003d new TaTracker();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty TaTracker\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            initialData \u003d new TaTracker();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty TaTracker\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        logger.info(\"Starting TaTracker \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping TA-Tracker ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        // Dispose the system tray icon"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        Notification.dispose();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 43,
      "eclmist": 4,
      "-": 140
    }
  },
  {
    "path": "src/main/java/tatracker/commons/core/Config.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/tatracker/commons/core/GuiSettings.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/tatracker/commons/core/LogsCenter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private static final String LOG_FILE \u003d \"tatracker.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 2,
      "-": 110
    }
  },
  {
    "path": "src/main/java/tatracker/commons/core/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static final String MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX \u003d \"The student index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    public static final String MESSAGE_INVALID_SESSION_DISPLAYED_INDEX \u003d \"The session index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static final String MESSAGE_STUDENTS_LISTED_OVERVIEW \u003d \"%1$d students listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 1,
      "eclmist": 1,
      "fatin99": 2,
      "-": 10
    }
  },
  {
    "path": "src/main/java/tatracker/commons/core/Notification.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eclmist"
        },
        "content": "package tatracker.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eclmist"
        },
        "content": "import java.awt.AWTException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eclmist"
        },
        "content": "import java.awt.Image;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eclmist"
        },
        "content": "import java.awt.SystemTray;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eclmist"
        },
        "content": "import java.awt.Toolkit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eclmist"
        },
        "content": "import java.awt.TrayIcon;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eclmist"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eclmist"
        },
        "content": "import javax.imageio.ImageIO;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eclmist"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eclmist"
        },
        "content": " * A class that handles the displaying of System Notifications."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eclmist"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eclmist"
        },
        "content": "public class Notification {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static final String APPICON_PATH \u003d \"images/icon.png\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    private static Notification singleton;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    private final TrayIcon trayIcon;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    private Notification() throws AWTException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        SystemTray tray \u003d SystemTray.getSystemTray();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        Image trayImage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            trayImage \u003d ImageIO.read(getClass().getClassLoader().getResource(APPICON_PATH));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            System.err.println(\"Unable to load Application Icon for the System Tray!\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            trayImage \u003d Toolkit.getDefaultToolkit().createImage(\"placeholder-icon.png\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        trayIcon \u003d new TrayIcon(trayImage, \"TrayIcon\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        trayIcon.setImageAutoSize(true);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        trayIcon.setToolTip(\"TA Tracker\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        tray.add(trayIcon);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    private static Notification getInstance() throws AWTException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        if (singleton \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            singleton \u003d new Notification();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        return singleton;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    private void notify(String caption, String message, TrayIcon.MessageType type) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        trayIcon.displayMessage(caption, message, type);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     * Triggers a OS-level system notification."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     * @param caption The title displayed in the notification"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     * @param message The message displayed in the notification"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     * @param type    the type of notification (error, info, warning, etc.)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     * @throws AWTException if {@code SystemTray} is not supported on the current platform."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    public static void sendNotification(String caption, String message, TrayIcon.MessageType type) throws AWTException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        Notification.getInstance().notify(caption, message, type);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     * Immediately destroys the system tray icon"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    public static void dispose() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        if (singleton !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            SystemTray.getSystemTray().remove(singleton.trayIcon);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eclmist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eclmist": 68,
      "fatin99": 1
    }
  },
  {
    "path": "src/main/java/tatracker/commons/core/Version.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/tatracker/commons/core/index/Index.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/tatracker/commons/exceptions/DataConversionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/tatracker/commons/exceptions/IllegalValueException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/tatracker/commons/util/AppUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/tatracker/commons/util/CollectionUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/tatracker/commons/util/ConfigUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/tatracker/commons/util/FileUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/tatracker/commons/util/JsonUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/tatracker/commons/util/StringUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/tatracker/logic/Logic.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.ReadOnlyTaTracker;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.model.group.Group;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.model.module.Module;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.model.session.Session;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Student;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Returns the TaTracker."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * @see tatracker.model.Model#getTaTracker()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    ReadOnlyTaTracker getTaTracker();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Returns the user prefs\u0027 ta-tracker file path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    Path getTaTrackerFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of sessions. */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    ObservableList\u003cSession\u003e getFilteredSessionList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of done sessions. */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    ObservableList\u003cSession\u003e getFilteredDoneSessionList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of module. */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredModuleList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of module groups. */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    ObservableList\u003cGroup\u003e getFilteredGroupList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of students. */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ObservableList\u003cStudent\u003e getFilteredStudentList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 12,
      "PotatoCombat": 5,
      "fatin99": 14,
      "-": 35
    }
  },
  {
    "path": "src/main/java/tatracker/logic/LogicManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.parser.TaTrackerParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.ReadOnlyTaTracker;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.model.group.Group;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.model.module.Module;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.model.session.Session;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Student;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.storage.Storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private final TaTrackerParser taTrackerParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.taTrackerParser \u003d new TaTrackerParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Command command \u003d taTrackerParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            storage.saveTaTracker(model.getTaTracker());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public ReadOnlyTaTracker getTaTracker() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return model.getTaTracker();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public Path getTaTrackerFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return model.getTaTrackerFilePath();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public ObservableList\u003cSession\u003e getFilteredSessionList() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return model.getFilteredSessionList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public ObservableList\u003cSession\u003e getFilteredDoneSessionList() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return model.getFilteredDoneSessionList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return model.getFilteredModuleList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public ObservableList\u003cGroup\u003e getFilteredGroupList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return model.getFilteredGroupList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return model.getFilteredStudentList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 15,
      "PotatoCombat": 13,
      "fatin99": 26,
      "-": 48
    }
  },
  {
    "path": "src/main/java/tatracker/logic/commands/ClearCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.TaTracker;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * Clears the TA-Tracker."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"TA-Tracker has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        model.setTaTracker(new TaTracker());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 6,
      "-": 17
    }
  },
  {
    "path": "src/main/java/tatracker/logic/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/tatracker/logic/commands/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 1,
      "-": 70
    }
  },
  {
    "path": "src/main/java/tatracker/logic/commands/CommandWords.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": " * Contains a list of common command words in TA-Tracker."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "public final class CommandWords {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /* List of command words for each model in TA-Tracker. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final String STUDENT \u003d \"student\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final String MODULE \u003d \"module\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final String GROUP \u003d \"group\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final String SESSION \u003d \"session\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /* List of command words for commands that are common between TA-Tracker models. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final String ADD_MODEL \u003d \"add\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final String DELETE_MODEL \u003d \"delete\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final String EDIT_MODEL \u003d \"edit\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 1,
      "PotatoCombat": 17
    }
  },
  {
    "path": "src/main/java/tatracker/logic/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * Deletes a student identified using it\u0027s displayed index from the TA-Tracker."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            + \": Deletes the student identified by the index number used in the displayed student list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static final String MESSAGE_DELETE_STUDENT_SUCCESS \u003d \"Deleted Student: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Student studentToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        model.deleteStudent(studentToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_STUDENT_SUCCESS, studentToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 7,
      "fatin99": 7,
      "-": 39
    }
  },
  {
    "path": "src/main/java/tatracker/logic/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting TA-Tracker as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 3,
      "-": 16
    }
  },
  {
    "path": "src/main/java/tatracker/logic/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * Finds and lists all students in TA-Tracker whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all students whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        model.setFilteredStudentList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                String.format(Messages.MESSAGE_STUDENTS_LISTED_OVERVIEW, model.getFilteredStudentList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 6,
      "fatin99": 2,
      "-": 34
    }
  },
  {
    "path": "src/main/java/tatracker/logic/commands/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/tatracker/logic/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * Lists all students in the TA-Tracker to the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all students\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        //model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 4,
      "fatin99": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/tatracker/logic/commands/SortCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * Command to sort all students in all groups of all modules."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /* Example message usage. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sorts students in\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            + \"all groups of all modules in the TA-Tracker. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            + PREFIX_TYPE + \"SORT TYPE \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            + PREFIX_TYPE + \"alphabetically\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            + \"\\nOther variations include group code and module code.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"The modules have been sorted.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private static final int FIRST_MODULE_INDEX \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private static final int FIRST_GROUP_INDEX \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public SortCommand(String type) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        if (type.equalsIgnoreCase(\"alphabetically\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                || type.equalsIgnoreCase(\"alpha\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            model.sortModulesAlphabetically();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        } else if (type.equalsIgnoreCase(\"rating asc\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            model.sortModulesByRatingAscending();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            model.sortModulesByRatingDescending();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        if (model.getFilteredModuleList().isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            model.setFilteredGroupList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            model.setFilteredStudentList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            model.updateGroupList(FIRST_MODULE_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            if (model.getFilteredGroupList().isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                model.setFilteredStudentList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                model.updateStudentList(FIRST_GROUP_INDEX, FIRST_MODULE_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 62
    }
  },
  {
    "path": "src/main/java/tatracker/logic/commands/SortGroupCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_GROUP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.group.Group;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * Sorts all students in the group."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "public class SortGroupCommand extends SortCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /* Example message usage. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sorts students in the given group. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            + PREFIX_GROUP + \"GROUP CODE \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            + PREFIX_MODULE + \"MODULE CODE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            + PREFIX_TYPE + \"SORT TYPE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            + PREFIX_GROUP + \"G06 \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            + PREFIX_MODULE + \"CS2100 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            + PREFIX_TYPE + \"alphabetically\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Group %s has been sorted.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public static final String MESSAGE_INVALID_GROUP_CODE \u003d \"This group doesn\u0027t exist in the TA-Tracker\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public static final String MESSAGE_INVALID_MODULE_CODE \u003d \"There is no module with the given module code.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private final String groupCode;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private final String moduleCode;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public SortGroupCommand(String groupCode, String moduleCode, String type) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        super(type);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        this.groupCode \u003d groupCode;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        Module module \u003d new Module(moduleCode, \"\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        if (!model.hasModule(module)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_MODULE_CODE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        module \u003d model.getModule(module.getIdentifier());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        Group group \u003d new Group(groupCode, null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        if (!module.hasGroup(group)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_GROUP_CODE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        group \u003d module.getGroup(groupCode);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        if (type.equalsIgnoreCase(\"alphabetically\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                || type.equalsIgnoreCase(\"alpha\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            group.sortStudentsAlphabetically();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        } else if (type.equalsIgnoreCase(\"rating asc\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            group.sortStudentsByRatingAscending();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            group.sortStudentsByRatingDescending();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        if (model.getFilteredModuleList().isEmpty()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            model.setFilteredGroupList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            model.setFilteredStudentList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            model.updateFilteredGroupList(module.getIdentifier());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            if (model.getFilteredGroupList().isEmpty()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                model.setFilteredStudentList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                model.updateFilteredStudentList(group.getIdentifier(), module.getIdentifier());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, group));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 88
    }
  },
  {
    "path": "src/main/java/tatracker/logic/commands/SortModuleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.module.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * Sorts all students of all groups in a module."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "public class SortModuleCommand extends SortCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /* Example message usage. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sorts students in\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            + \"all groups of the given module. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            + PREFIX_MODULE + \"MODULE CODE \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            + PREFIX_TYPE + \"SORT TYPE \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            + PREFIX_MODULE + \"CS2100 \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            + PREFIX_TYPE + \"alphabetically\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Module %s has been sorted.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public static final String MESSAGE_INVALID_MODULE_CODE \u003d \"There is no module with the given module code.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public static final int FIRST_GROUP_INDEX \u003d 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private final String moduleCode;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public SortModuleCommand(String moduleCode, String type) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        super(type);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        Module module \u003d new Module(moduleCode, \"\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        if (!model.hasModule(module)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_MODULE_CODE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        module \u003d model.getModule(module.getIdentifier());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        if (type.equalsIgnoreCase(\"alphabetically\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                || type.equalsIgnoreCase(\"alpha\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            module.sortGroupsAlphabetically();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        } else if (type.equalsIgnoreCase(\"rating asc\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            module.sortGroupsByRatingAscending();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            module.sortGroupsByRatingDescending();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        if (model.getFilteredModuleList().isEmpty()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            model.setFilteredGroupList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            model.setFilteredStudentList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            model.updateFilteredGroupList(module.getIdentifier());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            if (model.getFilteredGroupList().isEmpty()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                model.setFilteredStudentList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                model.setFilteredStudentList(module.getIdentifier(), FIRST_GROUP_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, module));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 76
    }
  },
  {
    "path": "src/main/java/tatracker/logic/commands/exceptions/CommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "import tatracker.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuayijing"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command#execute }."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 1,
      "chuayijing": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/tatracker/logic/commands/group/AddGroupCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package tatracker.logic.commands.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.commands.CommandWords.ADD_MODEL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.commands.CommandWords.GROUP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_GROUP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.group.Group;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.module.Module;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * Adds a group to the TA-Tracker."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "public class AddGroupCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public static final String COMMAND_WORD \u003d GROUP + \" \" + ADD_MODEL;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /* Example message usage. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a group into TA-Tracker. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            + PREFIX_GROUP + \"GROUP CODE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            + PREFIX_MODULE + \"MODULE CODE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            + PREFIX_TYPE + \"GROUP TYPE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            + PREFIX_GROUP + \"G06 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            + PREFIX_MODULE + \"CS2100 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            + PREFIX_TYPE + \"lab\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New Group added: %s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_GROUP \u003d \"This group already exists in the TA-Tracker\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public static final String MESSAGE_INVALID_MODULE_CODE \u003d \"There is no module with the given module code.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private final Group toAdd;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private final Module targetModule;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    * Creates an addGroupCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public AddGroupCommand(Group group, Module module) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        requireNonNull(group);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        toAdd \u003d group;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        targetModule \u003d module;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!model.hasModule(targetModule)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_MODULE_CODE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Module actualModule \u003d model.getModule(targetModule.getIdentifier());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (actualModule.hasGroup(toAdd)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_GROUP);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        actualModule.addGroup(toAdd);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        model.updateFilteredGroupList(actualModule.getIdentifier());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        if (model.getFilteredGroupList().isEmpty()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            model.setFilteredStudentList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return true; // short circuit if same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!(other instanceof AddGroupCommand)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return false; // instanceof handles nulls"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        AddGroupCommand otherCommand \u003d (AddGroupCommand) other;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return toAdd.equals(otherCommand.toAdd)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                \u0026\u0026 targetModule.equals(otherCommand.targetModule);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 43,
      "PotatoCombat": 45,
      "fatin99": 3
    }
  },
  {
    "path": "src/main/java/tatracker/logic/commands/group/DeleteGroupCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package tatracker.logic.commands.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.commands.CommandWords.DELETE_MODEL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.commands.CommandWords.GROUP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_GROUP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.group.Group;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.module.Module;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * Deletes a group identified using it\u0027s group code."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "public class DeleteGroupCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public static final String COMMAND_WORD \u003d GROUP + \" \" + DELETE_MODEL;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            + \": Deletes the  group identified by the group code.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            + \"Parameters: \" + PREFIX_MODULE + \" MODULE_CODE \" + PREFIX_GROUP + \" GROUP_CODE\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            + PREFIX_TYPE + \" GROUP_TYPE\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_MODULE + \"CS2013T \" + PREFIX_GROUP + \"G03 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            + PREFIX_TYPE + \"lab\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public static final String MESSAGE_DELETE_GROUP_SUCCESS \u003d \"Deleted Group: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public static final String MESSAGE_INVALID_GROUP_CODE \u003d \"There is no group with the given group code.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public static final String MESSAGE_INVALID_MODULE_CODE \u003d \"There is no module with the given module code.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public static final int FIRST_GROUP_INDEX \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public static final int FIRST_MODULE_INDEX \u003d 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private final Group group;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private final Module targetModule;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public DeleteGroupCommand(Group group, Module module) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        this.group \u003d group;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.targetModule \u003d module;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!model.hasModule(targetModule)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_MODULE_CODE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Module actualModule \u003d model.getModule(targetModule.getIdentifier());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!actualModule.hasGroup(group)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_GROUP_CODE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Group deletedGroup \u003d actualModule.getGroup(group.getIdentifier());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        actualModule.deleteGroup(deletedGroup);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        if (model.getFilteredModuleList().isEmpty()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            model.setFilteredGroupList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            model.setFilteredStudentList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            model.updateGroupList(FIRST_MODULE_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            if (model.getFilteredGroupList().isEmpty()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                model.setFilteredStudentList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                model.updateStudentList(FIRST_GROUP_INDEX, FIRST_MODULE_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_GROUP_SUCCESS, deletedGroup));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return true; // short circuit if same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!(other instanceof DeleteGroupCommand)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return false; // instanceof handles nulls"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        DeleteGroupCommand otherCommand \u003d (DeleteGroupCommand) other;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return group.equals(otherCommand.group)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                \u0026\u0026 targetModule.equals(otherCommand.targetModule);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 69,
      "PotatoCombat": 19,
      "fatin99": 3
    }
  },
  {
    "path": "src/main/java/tatracker/logic/commands/module/AddModuleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package tatracker.logic.commands.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.commands.CommandWords;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * Adds a module to the TA-Tracker."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "public class AddModuleCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final String COMMAND_WORD \u003d CommandWords.MODULE + \" \" + CommandWords.ADD_MODEL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" : Adds a module to the TA-Tracker. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            + PREFIX_NAME + \"MODULE NAME \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            + PREFIX_MODULE + \"MODULE CODE \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            + PREFIX_NAME + \"Introduction to AI \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            + PREFIX_MODULE + \"CS3243 \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New Module added: %s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"This module already exists in the TA-Tracker\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public static final int FIRST_GROUP_INDEX \u003d 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private final Module toAdd;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Module}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public AddModuleCommand(Module module) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        toAdd \u003d module;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        if (model.hasModule(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        model.addModule(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        model.updateFilteredGroupList(toAdd.getIdentifier());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        if (model.getFilteredGroupList().isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            model.setFilteredStudentList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            model.setFilteredStudentList(toAdd.getIdentifier(), FIRST_GROUP_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                || (other instanceof AddModuleCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddModuleCommand) other).toAdd));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 59,
      "PotatoCombat": 3,
      "fatin99": 4
    }
  },
  {
    "path": "src/main/java/tatracker/logic/commands/module/DeleteModuleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package tatracker.logic.commands.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.commands.CommandWords.DELETE_MODEL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.commands.CommandWords.MODULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * Deletes a module identified using it\u0027s module code."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "public class DeleteModuleCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public static final String COMMAND_WORD \u003d MODULE + \" \" + DELETE_MODEL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            + \": Deletes the module identified by the module code.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            + \"Parameters: \" + PREFIX_MODULE + \" MODULE_CODE\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" CS2013T\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public static final String MESSAGE_DELETE_MODULE_SUCCESS \u003d \"Deleted Module: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public static final String MESSAGE_INVALID_MODULE_CODE \u003d \"There is no module with this module code.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public static final int FIRST_GROUP_INDEX \u003d 0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public static final int FIRST_MODULE_INDEX \u003d 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private final Module module;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public DeleteModuleCommand(Module module) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        if (!model.hasModule(module)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_MODULE_CODE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Module moduleToDelete \u003d model.getModule(module.getIdentifier());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        model.deleteModule(moduleToDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        if (model.getFilteredModuleList().isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            model.setFilteredGroupList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            model.setFilteredStudentList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            model.updateGroupList(FIRST_MODULE_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            if (model.getFilteredGroupList().isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                model.setFilteredStudentList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                model.updateStudentList(FIRST_GROUP_INDEX, FIRST_MODULE_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_MODULE_SUCCESS, moduleToDelete));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                || (other instanceof DeleteModuleCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                \u0026\u0026 module.equals(((DeleteModuleCommand) other).module)); // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 61,
      "PotatoCombat": 1,
      "fatin99": 6
    }
  },
  {
    "path": "src/main/java/tatracker/logic/commands/session/AddSessionCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package tatracker.logic.commands.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_ENDTIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_NOTES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_RECUR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_SESSION_TYPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_STARTTIME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.commands.CommandWords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.session.Session;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuayijing"
        },
        "content": " * Adds a session to the TATracker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuayijing"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "public class AddSessionCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final String COMMAND_WORD \u003d CommandWords.SESSION + \" \" + CommandWords.ADD_MODEL;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a session in TA-Tracker. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + \"[\" + PREFIX_STARTTIME + \"START] \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + \"[\" + PREFIX_ENDTIME + \"END] \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + \"[\" + PREFIX_RECUR + \"RECURS] \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + \"[\" + PREFIX_MODULE + \"MODULE CODE] \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + \"[\" + PREFIX_SESSION_TYPE + \"SESSION TYPE] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + \"[\" + PREFIX_NOTES + \"NOTES] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "            + PREFIX_STARTTIME + \"14:00 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + PREFIX_ENDTIME + \"16:00 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "            + PREFIX_DATE + \"19-02-2020 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + PREFIX_MODULE + \"CS2103T \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + PREFIX_SESSION_TYPE + \"tutorial \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + PREFIX_NOTES + \"Location: PLAB 04\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New session added: %1$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SESSION \u003d \"This session already exists in the TA-Tracker\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    private final Session toAdd;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "     * Creates an AddSessionCommand to add the specified {@code Session}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    public AddSessionCommand(Session session) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        requireNonNull(session);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        toAdd \u003d session;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        if (model.hasSession(toAdd)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_SESSION);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        model.addSession(toAdd);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "                || (other instanceof AddSessionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddSessionCommand) other).toAdd));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 9,
      "chuayijing": 46,
      "PotatoCombat": 14,
      "fatin99": 5
    }
  },
  {
    "path": "src/main/java/tatracker/logic/commands/session/DeleteSessionCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package tatracker.logic.commands.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.commands.CommandWords.DELETE_MODEL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.commands.CommandWords.SESSION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_ENDTIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_NOTES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_RECUR;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_SESSION_TYPE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_STARTTIME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.commands.Command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.session.Session;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuayijing"
        },
        "content": " * Deletes a session identified using it\u0027s index."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuayijing"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "public class DeleteSessionCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    public static final String COMMAND_WORD \u003d SESSION + \" \" + DELETE_MODEL;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "            + \": Deletes the session identified by its index.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "            + \"index\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "            + \"[\" + PREFIX_STARTTIME + \"START] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "            + \"[\" + PREFIX_ENDTIME + \"END] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "            + \"[\" + PREFIX_RECUR + \"] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "            + \"[\" + PREFIX_MODULE + \"MODULE] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "            + \"[\" + PREFIX_SESSION_TYPE + \"SESSION_TYPE] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "            + \"[\" + PREFIX_NOTES + \"NOTES] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 2\" + PREFIX_DATE + \"20-02-2020 \";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    public static final String MESSAGE_DELETE_SESSION_SUCCESS \u003d \"Deleted Session: %1$s\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index does not exists\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    public DeleteSessionCommand(Index index) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        List\u003cSession\u003e lastShownList \u003d model.getFilteredSessionList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SESSION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        Session sessionToDelete \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        model.deleteSession(sessionToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_SESSION_SUCCESS, sessionToDelete));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "                || (other instanceof DeleteSessionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "                \u0026\u0026 index.equals(((DeleteSessionCommand) other).index)); // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 14,
      "chuayijing": 58,
      "fatin99": 3
    }
  },
  {
    "path": "src/main/java/tatracker/logic/commands/session/DoneSessionCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eclmist"
        },
        "content": "package tatracker.logic.commands.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eclmist"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eclmist"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eclmist"
        },
        "content": "import tatracker.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eclmist"
        },
        "content": "import tatracker.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eclmist"
        },
        "content": "import tatracker.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eclmist"
        },
        "content": "import tatracker.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eclmist"
        },
        "content": "import tatracker.logic.commands.CommandWords;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eclmist"
        },
        "content": "import tatracker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eclmist"
        },
        "content": "import tatracker.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eclmist"
        },
        "content": "import tatracker.model.session.Session;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eclmist"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eclmist"
        },
        "content": " * Marks a session as done in TAT."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eclmist"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eclmist"
        },
        "content": "public class DoneSessionCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    public static final String COMMAND_WORD_DONE \u003d \"done\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    public static final String COMMAND_WORD \u003d String.format(\"%s %s\", CommandWords.SESSION, COMMAND_WORD_DONE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    /* Example message usage. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Marks a session as done in TA-Tracker. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Session completed: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index does not exists\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     * @param index of the session in the filtered session list to edit"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    public DoneSessionCommand(Index index) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        List\u003cSession\u003e lastShownList \u003d model.getFilteredSessionList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SESSION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        Session session \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        session.done();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        model.addDoneSession(session);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        model.updateFilteredDoneSessionList(Model.PREDICATE_SHOW_ALL_SESSIONS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        model.deleteSession(session);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        model.updateFilteredSessionList(Model.PREDICATE_SHOW_ALL_SESSIONS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, session));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        if (!(other instanceof DoneSessionCommand)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        DoneSessionCommand e \u003d (DoneSessionCommand) other;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        return index.equals(e.index);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eclmist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eclmist": 74,
      "fatin99": 3
    }
  },
  {
    "path": "src/main/java/tatracker/logic/commands/session/EditSessionCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package tatracker.logic.commands.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eclmist"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_ENDTIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_NOTES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_RECUR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_SESSION_TYPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_STARTTIME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eclmist"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eclmist"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eclmist"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eclmist"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.commands.Command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.commands.CommandWords;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.session.Session;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.model.session.SessionType;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eclmist"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eclmist"
        },
        "content": " * Edits the details of an existing session in TAT."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eclmist"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eclmist"
        },
        "content": "public class EditSessionCommand extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    public static final String COMMAND_WORD \u003d String.format(\"%s %s\", CommandWords.SESSION, CommandWords.EDIT_MODEL);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    /* Example message usage. */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits an existing session in TA-Tracker. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            + \"[\" + PREFIX_STARTTIME + \"START] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            + \"[\" + PREFIX_ENDTIME + \"END] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            + \"[\" + PREFIX_RECUR + \"] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + \"[\" + PREFIX_MODULE + \"MODULE CODE] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + \"[\" + PREFIX_SESSION_TYPE + \"SESSION TYPE] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            + \"[\" + PREFIX_NOTES + \"NOTES] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 2 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + PREFIX_DATE + \"20-02-2020 \";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Session updated: %1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    private final EditSessionCommand.EditSessionDescriptor editSessionDescriptor;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     * @param index                 of the session in the filtered session list to edit"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     * @param editSessionDescriptor details to edit the session with"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    public EditSessionCommand(Index index, EditSessionCommand.EditSessionDescriptor editSessionDescriptor) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        requireNonNull(editSessionDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        this.editSessionDescriptor \u003d new EditSessionCommand.EditSessionDescriptor(editSessionDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        List\u003cSession\u003e lastShownList \u003d model.getFilteredSessionList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SESSION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        Session sessionToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        Session editedSession \u003d createEditedSession(sessionToEdit, editSessionDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        // Session does not have an unique identifier like students/modules, and as such checking if"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        // the two objects are the same should not be done based on their field values."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        // In this case, it is probably best to ignore no-edits."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        if (!sessionToEdit.isSameStudent(editedStudent) \u0026\u0026 model.hasStudent(editedStudent)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        model.setSession(sessionToEdit, editedSession);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        model.updateFilteredSessionList(Model.PREDICATE_SHOW_ALL_SESSIONS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, editedSession));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     * Creates and returns a {@code Session} with the details of {@code sessionToEdit}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     * edited with {@code editSessionDescriptor}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    private static Session createEditedSession(Session sessionToEdit,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eclmist"
        },
        "content": "                                               EditSessionCommand.EditSessionDescriptor editSessionDescriptor) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        assert sessionToEdit !\u003d null;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        LocalDateTime startTime \u003d editSessionDescriptor.getStartTime().orElse(sessionToEdit.getStartDateTime());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        LocalDateTime endTime \u003d editSessionDescriptor.getEndTime().orElse(sessionToEdit.getEndDateTime());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        boolean isRecurring \u003d editSessionDescriptor.getIsRecurring();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        String moduleCode \u003d editSessionDescriptor.getModuleCode().orElse(sessionToEdit.getModuleCode());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        SessionType type \u003d editSessionDescriptor.getSessionType().orElse(sessionToEdit.getSessionType());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        String description \u003d editSessionDescriptor.getDescription().orElse(sessionToEdit.getDescription());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        // If date is not updated, reset the date to the original date."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        // We need to do this because EditSessionCommandParser is not able to know that is the original date"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        // to use as default value, so an arbitrary default date is used."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        if (!editSessionDescriptor.getIsDateChanged()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            LocalDate originalDate \u003d sessionToEdit.getDate();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            startTime \u003d LocalDateTime.of(originalDate.getYear(), originalDate.getMonth(), originalDate.getDayOfMonth(),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eclmist"
        },
        "content": "                    startTime.getHour(), startTime.getMinute(), startTime.getSecond());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            endTime \u003d LocalDateTime.of(originalDate.getYear(), originalDate.getMonth(), originalDate.getDayOfMonth(),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eclmist"
        },
        "content": "                    endTime.getHour(), endTime.getMinute(), endTime.getSecond());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        return new Session(startTime, endTime, type, isRecurring, moduleCode, description);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        if (!(other instanceof EditSessionCommand)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        EditSessionCommand e \u003d (EditSessionCommand) other;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "eclmist"
        },
        "content": "                \u0026\u0026 editSessionDescriptor.equals(e.editSessionDescriptor);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     * Stores the details to edit the student with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     * corresponding field value of the student."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    public static class EditSessionDescriptor {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        private LocalDateTime newStartTime;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        private LocalDateTime newEndTime;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        private boolean isDateChanged;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        private boolean isRecurring;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        private String moduleCode;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        private SessionType newSessionType;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        private String newDescription;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        public EditSessionDescriptor() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "eclmist"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "eclmist"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "eclmist"
        },
        "content": "         */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        public EditSessionDescriptor(EditSessionCommand.EditSessionDescriptor toCopy) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            setStartTime(toCopy.newStartTime);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            setEndTime(toCopy.newEndTime);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            setIsRecurring(toCopy.isRecurring);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            setModuleCode(toCopy.moduleCode);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            setSessionType(toCopy.newSessionType);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            setDescription(toCopy.newDescription);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            this.isDateChanged \u003d toCopy.isDateChanged;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "eclmist"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "eclmist"
        },
        "content": "         */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            return CollectionUtil.isAnyNonNull(newStartTime, newEndTime, newSessionType, newDescription);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        public void setStartTime(LocalDateTime startTime) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            this.newStartTime \u003d startTime;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        public Optional\u003cLocalDateTime\u003e getStartTime() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            return Optional.ofNullable(newStartTime);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        public void setEndTime(LocalDateTime endTime) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            this.newEndTime \u003d endTime;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        public Optional\u003cLocalDateTime\u003e getEndTime() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            return Optional.ofNullable(newEndTime);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        public void setIsRecurring(boolean isRecurring) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            this.isRecurring \u003d isRecurring;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        public boolean getIsRecurring() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            return this.isRecurring;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        public void setIsDateChanged(boolean isChanged) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            this.isDateChanged \u003d isChanged;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        public boolean getIsDateChanged() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            return this.isDateChanged;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        public void setModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        public Optional\u003cString\u003e getModuleCode() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            return Optional.ofNullable(moduleCode);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        public void setSessionType(SessionType sessionType) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            this.newSessionType \u003d sessionType;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        public Optional\u003cSessionType\u003e getSessionType() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            return Optional.ofNullable(newSessionType);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        public void setDescription(String description) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            this.newDescription \u003d description;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        public Optional\u003cString\u003e getDescription() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            return Optional.ofNullable(newDescription);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "eclmist"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            if (!(other instanceof EditSessionCommand.EditSessionDescriptor)) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "eclmist"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            EditSessionCommand.EditSessionDescriptor e \u003d (EditSessionCommand.EditSessionDescriptor) other;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            return getStartTime().equals(e.getStartTime())"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "eclmist"
        },
        "content": "                    \u0026\u0026 getEndTime().equals(e.getEndTime())"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "eclmist"
        },
        "content": "                    \u0026\u0026 getSessionType().equals(e.getSessionType())"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "eclmist"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "eclmist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 6,
      "eclmist": 226,
      "PotatoCombat": 7,
      "fatin99": 17
    }
  },
  {
    "path": "src/main/java/tatracker/logic/commands/student/AddStudentCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package tatracker.logic.commands.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_GROUP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_MATRIC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.commands.CommandWords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.group.Group;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.module.Module;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Student;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * Adds a student to the TA-Tracker."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "public class AddStudentCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final String COMMAND_WORD \u003d CommandWords.STUDENT + \" \" + CommandWords.ADD_MODEL;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + \": Adds a student to the into the given module group.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            + PREFIX_MATRIC + \"MATRIC \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + PREFIX_MODULE + \"MODULE \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + PREFIX_GROUP + \"GROUP \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + \"[\" + PREFIX_RATING + \"RATING] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            + PREFIX_MATRIC + \"A0181234G \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + PREFIX_MODULE + \"CS3243 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + PREFIX_GROUP + \"G06 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + PREFIX_RATING + \"3 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New student added: %s\\n To Module: %s\\n To Group: %s\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"This student already exists in the TA-Tracker\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final String MESSAGE_INVALID_MODULE_FORMAT \u003d \"There is no module with the given module code: %s\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final String MESSAGE_INVALID_GROUP_FORMAT \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            \"There is no group in the module (%s) with the given group code: %s\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private final Student toAdd;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private final Group targetGroup;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private final Module targetModule;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Creates an AddStudentCommand to add the specified {@code Student}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public AddStudentCommand(Student student, Group group, Module module) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        requireNonNull(group);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        toAdd \u003d student;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        targetGroup \u003d group;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        targetModule \u003d module;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!model.hasModule(targetModule)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_MODULE_FORMAT, targetModule.getIdentifier()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!model.hasGroup(targetGroup, targetModule)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_GROUP_FORMAT,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                            targetModule.getIdentifier(),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                            targetGroup.getIdentifier()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (model.hasStudent(toAdd, targetGroup, targetModule)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        model.addStudent(toAdd, targetGroup, targetModule);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        model.updateFilteredGroupList(targetModule.getIdentifier());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        model.updateFilteredStudentList(targetGroup.getIdentifier(), targetModule.getIdentifier());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd, targetModule, targetGroup));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return true; // short circuit if same object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!(other instanceof AddStudentCommand)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return false; // instanceof handles nulls"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        AddStudentCommand otherCommand \u003d (AddStudentCommand) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return toAdd.equals(otherCommand.toAdd)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                \u0026\u0026 targetGroup.equals(otherCommand.targetGroup)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                \u0026\u0026 targetModule.equals(otherCommand.targetModule);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 12,
      "PotatoCombat": 60,
      "fatin99": 12,
      "-": 32
    }
  },
  {
    "path": "src/main/java/tatracker/logic/commands/student/DeleteStudentCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.logic.commands.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_GROUP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_MATRIC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.CommandWords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.group.Group;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.student.Matric;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Student;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * Deletes a student identified using it\u0027s displayed index from the TA-Tracker."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": "public class DeleteStudentCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static final String COMMAND_WORD \u003d CommandWords.STUDENT + \" \" + CommandWords.DELETE_MODEL;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + \": Deletes the student with the given matric number from the given module group.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + PREFIX_MATRIC + \"MATRIC \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + PREFIX_MODULE + \"MODULE \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + PREFIX_GROUP + \"GROUP\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + PREFIX_MATRIC + \"A0181234G \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + PREFIX_MODULE + \"CS3243 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + PREFIX_GROUP + \"G06 \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static final String MESSAGE_DELETE_STUDENT_SUCCESS \u003d \"Deleted Student: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final String MESSAGE_INVALID_MODULE_FORMAT \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            \"There is no module with the given module code: %s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final String MESSAGE_INVALID_GROUP_FORMAT \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            \"There is no group in the module (%s) with the given group code: %s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final String MESSAGE_INVALID_STUDENT_FORMAT \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            \"There is no student in the (%s) group (%s) with the given matric number: %s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public static final int FIRST_GROUP_INDEX \u003d 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public static final int FIRST_MODULE_INDEX \u003d 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private final Matric toDelete;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private final Group targetGroup;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private final Module targetModule;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public DeleteStudentCommand(Matric matric, Group group, Module module) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        requireNonNull(matric);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        requireNonNull(group);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.toDelete \u003d matric;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.targetGroup \u003d group;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.targetModule \u003d module;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!model.hasModule(targetModule)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_MODULE_FORMAT, targetModule.getIdentifier()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!model.hasGroup(targetGroup, targetModule)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_GROUP_FORMAT,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                    targetModule.getIdentifier(),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                    targetGroup.getIdentifier()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Module actualModule \u003d model.getModule(targetModule.getIdentifier());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Group actualGroup \u003d actualModule.getGroup(targetGroup.getIdentifier());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Student studentToDelete \u003d actualGroup.getStudent(toDelete);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // TODO: consider replacing has methods with id instead of actual objects"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (studentToDelete \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_STUDENT_FORMAT,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                    targetModule.getIdentifier(),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                    targetGroup.getIdentifier(),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                    toDelete));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        model.deleteStudent(studentToDelete, targetGroup, targetModule);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        if (model.getFilteredModuleList().isEmpty()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            model.setFilteredGroupList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            model.setFilteredStudentList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            model.updateGroupList(FIRST_MODULE_INDEX);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            if (model.getFilteredGroupList().isEmpty()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                model.setFilteredStudentList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                model.updateStudentList(FIRST_GROUP_INDEX, FIRST_MODULE_INDEX);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_STUDENT_SUCCESS, studentToDelete));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return true; // short circuit if same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!(other instanceof DeleteStudentCommand)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return false; // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        DeleteStudentCommand otherCommand \u003d (DeleteStudentCommand) other;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return toDelete.equals(otherCommand.toDelete)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                \u0026\u0026 targetGroup.equals(otherCommand.targetGroup)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                \u0026\u0026 targetModule.equals(otherCommand.targetModule);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fatin99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 24,
      "PotatoCombat": 66,
      "fatin99": 30
    }
  },
  {
    "path": "src/main/java/tatracker/logic/commands/student/EditStudentCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package tatracker.logic.commands.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_MATRIC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.commands.Command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.commands.CommandWords;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Matric;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.student.Rating;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Student;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * Edits the details of an existing student in the TA-Tracker."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "public class EditStudentCommand extends Command {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final String COMMAND_WORD \u003d CommandWords.STUDENT + \" \" + CommandWords.EDIT_MODEL;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the student identified \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + \"by the index number used in the displayed student list. \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + \"[\" + PREFIX_MATRIC + \"MATRIC] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + \"[\" + PREFIX_RATING + \"RATING] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + PREFIX_MATRIC + \"A0181234J\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final String MESSAGE_EDIT_STUDENT_SUCCESS \u003d \"Edited Student: %1$s\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"This student already exists in the TA-Tracker.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private final EditStudentDescriptor editStudentDescriptor;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param index of the student in the filtered student list to edit"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param editStudentDescriptor details to edit the student with"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public EditStudentCommand(Index index, EditStudentDescriptor editStudentDescriptor) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        requireNonNull(editStudentDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.editStudentDescriptor \u003d new EditStudentDescriptor(editStudentDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Student studentToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Student editedStudent \u003d createEditedStudent(studentToEdit, editStudentDescriptor);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!studentToEdit.isSameStudent(editedStudent) \u0026\u0026 model.hasStudent(editedStudent)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        model.setStudent(studentToEdit, editedStudent);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Creates and returns a {@code Student} with the details of {@code studentToEdit}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * edited with {@code editStudentDescriptor}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private static Student createEditedStudent(Student studentToEdit, EditStudentDescriptor editStudentDescriptor) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        assert studentToEdit !\u003d null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Name updatedName \u003d editStudentDescriptor.getName().orElse(studentToEdit.getName());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Phone updatedPhone \u003d editStudentDescriptor.getPhone().orElse(studentToEdit.getPhone());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Email updatedEmail \u003d editStudentDescriptor.getEmail().orElse(studentToEdit.getEmail());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Matric updatedMatric \u003d editStudentDescriptor.getMatric().orElse(studentToEdit.getMatric());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Rating updatedRating \u003d editStudentDescriptor.getRating().orElse(studentToEdit.getRating());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editStudentDescriptor.getTags().orElse(studentToEdit.getTags());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return new Student(updatedMatric, updatedName, updatedPhone, updatedEmail, updatedRating, updatedTags);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!(other instanceof EditStudentCommand)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        EditStudentCommand e \u003d (EditStudentCommand) other;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                \u0026\u0026 editStudentDescriptor.equals(e.editStudentDescriptor);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Stores the details to edit the student with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * corresponding field value of the student."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static class EditStudentDescriptor {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        private Matric matric;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        private Rating rating;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        public EditStudentDescriptor() {}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "         */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        public EditStudentDescriptor(EditStudentDescriptor toCopy) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            setMatric(toCopy.matric);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            setRating(toCopy.rating);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "         */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, matric, rating, tags);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        public void setMatric(Matric matric) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            this.matric \u003d matric;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        public Optional\u003cMatric\u003e getMatric() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return Optional.ofNullable(matric);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        public void setRating(Rating rating) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            this.rating \u003d rating;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        public Optional\u003cRating\u003e getRating() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return Optional.ofNullable(rating);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "         */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "         */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            if (!(other instanceof EditStudentDescriptor)) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            EditStudentDescriptor e \u003d (EditStudentDescriptor) other;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                    \u0026\u0026 getMatric().equals(e.getMatric())"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                    \u0026\u0026 getRating().equals(e.getRating())"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 18,
      "PotatoCombat": 221,
      "fatin99": 6
    }
  },
  {
    "path": "src/main/java/tatracker/logic/parser/ArgumentMultimap.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/tatracker/logic/parser/ArgumentTokenizer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/tatracker/logic/parser/CliSyntax.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final Prefix PREFIX_MATRIC \u003d new Prefix(\"id/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final Prefix PREFIX_RATING \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    public static final Prefix PREFIX_STARTTIME \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    public static final Prefix PREFIX_ENDTIME \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final Prefix PREFIX_RECUR \u003d new Prefix(\"-r\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    public static final Prefix PREFIX_SESSION_TYPE \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    public static final Prefix PREFIX_NOTES \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public static final Prefix PREFIX_MODULE \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public static final Prefix PREFIX_GROUP \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public static final Prefix PREFIX_TYPE \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 4,
      "chuayijing": 5,
      "PotatoCombat": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/tatracker/logic/parser/DeleteCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 5,
      "-": 24
    }
  },
  {
    "path": "src/main/java/tatracker/logic/parser/FindCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 5,
      "-": 28
    }
  },
  {
    "path": "src/main/java/tatracker/logic/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/tatracker/logic/parser/ParserUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eclmist"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eclmist"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.model.group.GroupType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.model.session.SessionType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Matric;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.student.Rating;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private static final String MESSAGE_INVALID_DATE \u003d \"Dates should be in yyyy-MM-dd format\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private static final String MESSAGE_INVALID_TIME \u003d \"Times should be in HH:mm format\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Parses a {@code String matric} into an {@code Matric}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @throws ParseException if the given {@code matric} is invalid."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static Matric parseMatric(String matric) throws ParseException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        requireNonNull(matric);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        String trimmedMatric \u003d matric.trim();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        if (!Matric.isValidMatric(trimmedMatric)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            throw new ParseException(Matric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return new Matric(trimmedMatric);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Parses and returns the given value."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public static String parseValue(String value) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        String trimmedValue \u003d value.trim();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return trimmedValue;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     * Parses a {@code String date} into a {@code LocalDate}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static LocalDate parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            return LocalDate.parse(trimmedDate);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        } catch (DateTimeParseException dtpe) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     * Parses a {@code String time} into a {@code LocalTime}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @throws ParseException if the given {@code time} is invalid."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static LocalTime parseTime(String time) throws ParseException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        String trimmedTime \u003d time.trim();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            return LocalTime.parse(trimmedTime);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        } catch (DateTimeParseException dtpe) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_TIME);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Parses a {@code String sessionType} into a {@code SessionType}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static SessionType parseSessionType(String sessionType) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        requireNonNull(sessionType);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        String trimmedType \u003d sessionType.trim();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        assert (trimmedType.equals(trimmedType.toLowerCase()));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        switch (trimmedType) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        case \"tutorial\":"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            return SessionType.TUTORIAL;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        case \"lab\":"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            return SessionType.LAB;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        case \"consultation\":"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            return SessionType.CONSULTATION;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        case \"grading\":"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            return SessionType.GRADING;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        case \"preparation\":"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            return SessionType.PREPARATION;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            return SessionType.OTHER;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Parses and returns Group Type of group."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public static GroupType parseGroupType(String type) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        requireNonNull(type);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        String trimmedType \u003d type.trim();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        switch(trimmedType.toLowerCase()) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        case \"lab\":"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            return GroupType.LAB;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            return GroupType.TUTORIAL;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Parses a {@code String rating} into a {@code Rating}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static Rating parseRating(String rating) throws ParseException {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        requireNonNull(rating);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        String trimmedRating \u003d rating.trim();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedRating)) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new ParseException(Rating.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        int parsedRating \u003d Integer.parseUnsignedInt(trimmedRating);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!Rating.isValidRating(parsedRating)) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new ParseException(Rating.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return new Rating(parsedRating);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 39,
      "eclmist": 33,
      "PotatoCombat": 39,
      "fatin99": 25,
      "-": 94
    }
  },
  {
    "path": "src/main/java/tatracker/logic/parser/Prefix.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/tatracker/logic/parser/SortCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_GROUP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.SortGroupCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.SortModuleCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * Parses input arguments and creates a new SortCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "public class SortCommandParser implements Parser\u003cSortCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SortCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * and returns a SortCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public SortCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TYPE,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                PREFIX_MODULE, PREFIX_GROUP);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_TYPE).isPresent()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        String type \u003d ParserUtil.parseValue(argMultimap.getValue(PREFIX_TYPE).get());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MODULE).isPresent()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            String moduleCode \u003d ParserUtil.parseValue(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            if (argMultimap.getValue(PREFIX_GROUP).isPresent()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                String groupCode \u003d ParserUtil.parseValue(argMultimap.getValue(PREFIX_GROUP).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                return new SortGroupCommand(groupCode, moduleCode, type);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                return new SortModuleCommand(moduleCode, type);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            return new SortCommand(type);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 46
    }
  },
  {
    "path": "src/main/java/tatracker/logic/parser/TaTrackerParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.CommandWords;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "//import tatracker.logic.commands.student.EditStudentCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.parser.group.GroupCommandParser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.parser.module.ModuleCommandParser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eclmist"
        },
        "content": "import tatracker.logic.parser.session.SessionCommandParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "//import tatracker.logic.parser.student.EditStudentCommandParser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.parser.student.StudentCommandParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "public class TaTrackerParser {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        case CommandWords.STUDENT:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return new StudentCommandParser().parseCommand(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        case CommandWords.MODULE:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return new ModuleCommandParser().parseCommand(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        case CommandWords.GROUP:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return new GroupCommandParser().parseCommand(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        case CommandWords.SESSION:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return new SessionCommandParser().parseCommand(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 18,
      "eclmist": 1,
      "PotatoCombat": 14,
      "fatin99": 3,
      "-": 54
    }
  },
  {
    "path": "src/main/java/tatracker/logic/parser/exceptions/ParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/tatracker/logic/parser/group/AddGroupCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package tatracker.logic.parser.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_GROUP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.commands.group.AddGroupCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.parser.Prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.group.Group;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.model.group.GroupType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.module.Module;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * Parses input arguments and creates a new AddGroupCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "public class AddGroupCommandParser implements Parser\u003cAddGroupCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddGroupCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * and returns an AddGroupCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public AddGroupCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                         ArgumentTokenizer.tokenize(args, PREFIX_GROUP, PREFIX_MODULE, PREFIX_TYPE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_GROUP, PREFIX_MODULE, PREFIX_TYPE)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        String groupCode \u003d argMultimap.getValue(PREFIX_GROUP).get();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        String moduleCode \u003d argMultimap.getValue(PREFIX_MODULE).get();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        GroupType groupType \u003d ParserUtil.parseGroupType(argMultimap.getValue(PREFIX_TYPE).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        Group group \u003d new Group(groupCode, groupType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Module module \u003d new Module(moduleCode);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return new AddGroupCommand(group, module);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 44,
      "PotatoCombat": 5,
      "fatin99": 8
    }
  },
  {
    "path": "src/main/java/tatracker/logic/parser/group/DeleteGroupCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package tatracker.logic.parser.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_GROUP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.commands.group.DeleteGroupCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.parser.Prefix;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.group.Group;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.module.Module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * Parses input arguments and creates a new DeleteGroupCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "public class DeleteGroupCommandParser implements Parser\u003cDeleteGroupCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteGroupCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * and returns an DeleteGroupCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public DeleteGroupCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_GROUP, PREFIX_MODULE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_GROUP, PREFIX_MODULE)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                 || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        String groupCode \u003d argMultimap.getValue(PREFIX_GROUP).get();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        String moduleCode \u003d argMultimap.getValue(PREFIX_MODULE).get();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Group group \u003d new Group(groupCode);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Module module \u003d new Module(moduleCode);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return new DeleteGroupCommand(group, module);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 40,
      "PotatoCombat": 8,
      "fatin99": 6
    }
  },
  {
    "path": "src/main/java/tatracker/logic/parser/group/GroupCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package tatracker.logic.parser.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.CommandWords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": " * Parses user input into commands that interact with Group models."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "public class GroupCommandParser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private static final String UNIMPLEMENTED_CODE_FORMAT \u003d \"%s not yet implemented!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        case CommandWords.ADD_MODEL:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            return new AddGroupCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        case CommandWords.DELETE_MODEL:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            return new DeleteGroupCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        case CommandWords.EDIT_MODEL:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            // return new EditGroupCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new ParseException(String.format(UNIMPLEMENTED_CODE_FORMAT, \"Edit group commands\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 8,
      "PotatoCombat": 48,
      "fatin99": 1
    }
  },
  {
    "path": "src/main/java/tatracker/logic/parser/module/AddModuleCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package tatracker.logic.parser.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.commands.module.AddModuleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.parser.Prefix;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.module.Module;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * Parses input arguments and creates a new AddModuleCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "public class AddModuleCommandParser implements Parser\u003cAddModuleCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddModuleCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * and returns an AddModuleCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public AddModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE, PREFIX_NAME);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE, PREFIX_NAME)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // No need to parse trimmed strings"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        String moduleCode \u003d argMultimap.getValue(PREFIX_MODULE).get();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        String name \u003d argMultimap.getValue(PREFIX_NAME).get();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        Module module \u003d new Module(moduleCode, name);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return new AddModuleCommand(module);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 39,
      "PotatoCombat": 5,
      "fatin99": 9
    }
  },
  {
    "path": "src/main/java/tatracker/logic/parser/module/DeleteModuleCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package tatracker.logic.parser.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.commands.module.DeleteModuleCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.parser.Prefix;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * Parses input arguments and creates a new DeleteModuleCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "public class DeleteModuleCommandParser implements Parser\u003cDeleteModuleCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteModuleCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * and returns an DeleteModuleCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public DeleteModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        String moduleCode \u003d argMultimap.getValue(PREFIX_MODULE).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Module module \u003d new Module(moduleCode);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return new DeleteModuleCommand(module);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 41,
      "PotatoCombat": 2,
      "fatin99": 7
    }
  },
  {
    "path": "src/main/java/tatracker/logic/parser/module/ModuleCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package tatracker.logic.parser.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.CommandWords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * Parses user input into commands that interact with Module models."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "public class ModuleCommandParser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private static final String UNIMPLEMENTED_CODE_FORMAT \u003d \"%s not yet implemented!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        case CommandWords.ADD_MODEL:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            return new AddModuleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        case CommandWords.DELETE_MODEL:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            return new DeleteModuleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        case CommandWords.EDIT_MODEL:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            // return new EditGroupCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            throw new ParseException(String.format(UNIMPLEMENTED_CODE_FORMAT, \"Edit group commands\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 56,
      "fatin99": 1
    }
  },
  {
    "path": "src/main/java/tatracker/logic/parser/session/AddSessionCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.logic.parser.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_ENDTIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_NOTES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_RECUR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_SESSION_TYPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_STARTTIME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eclmist"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eclmist"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eclmist"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.commands.session.AddSessionCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.parser.Parser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.session.Session;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "/*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": " * \u003d\u003d\u003d BUGS \u003d\u003d\u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": " * TODO: No error when end time is after start time."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": " *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": " * TODO: Sessions cannot have dates that are earlier than the current date."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": " *        Earlier dates are replaced by the current date."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eclmist"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eclmist"
        },
        "content": " * Parses input arguments and creates a new AddSessionCommand object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eclmist"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eclmist"
        },
        "content": "public class AddSessionCommandParser implements Parser\u003cAddSessionCommand\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddSessionCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     * and returns an AddSessionCommand object for execution."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    public AddSessionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_STARTTIME, PREFIX_ENDTIME,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                PREFIX_DATE, PREFIX_RECUR, PREFIX_MODULE, PREFIX_SESSION_TYPE, PREFIX_NOTES);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddSessionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        LocalDate date \u003d LocalDate.now();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        Session sessionToAdd \u003d new Session();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        if (argMultimap.getValue(PREFIX_STARTTIME).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            LocalTime startTime \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_STARTTIME).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            sessionToAdd.setStartDateTime(LocalDateTime.of(date.getYear(), date.getMonth(), date.getDayOfMonth(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eclmist"
        },
        "content": "                    startTime.getHour(), startTime.getMinute(), startTime.getSecond()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ENDTIME).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            LocalTime endTime \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_ENDTIME).get());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            sessionToAdd.setEndDateTime(LocalDateTime.of(date.getYear(), date.getMonth(), date.getDayOfMonth(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eclmist"
        },
        "content": "                    endTime.getHour(), endTime.getMinute(), endTime.getSecond()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        if (argMultimap.getValue(PREFIX_RECUR).isPresent()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            sessionToAdd.setRecurring(argMultimap.getValue(PREFIX_RECUR).isPresent());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MODULE).isPresent()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            sessionToAdd.setModuleCode(ParserUtil.parseValue(argMultimap.getValue(PREFIX_MODULE).get()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SESSION_TYPE).isPresent()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            sessionToAdd.setType("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eclmist"
        },
        "content": "                    ParserUtil.parseSessionType(argMultimap.getValue(PREFIX_SESSION_TYPE).get()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NOTES).isPresent()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            sessionToAdd.setDescription(ParserUtil.parseValue(argMultimap.getValue(PREFIX_NOTES).get()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        return new AddSessionCommand(sessionToAdd);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eclmist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 14,
      "eclmist": 58,
      "PotatoCombat": 16,
      "fatin99": 1
    }
  },
  {
    "path": "src/main/java/tatracker/logic/parser/session/DeleteSessionCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.logic.parser.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.commands.session.DeleteSessionCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuayijing"
        },
        "content": " * Parses input arguments and creates a new DeleteSessionCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuayijing"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "public class DeleteSessionCommandParser implements Parser\u003cDeleteSessionCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteSessionCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "     * and returns an DeleteSessionCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    public DeleteSessionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "            return new DeleteSessionCommand(index);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteSessionCommand.MESSAGE_INVALID_INDEX), pe);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 6,
      "chuayijing": 25,
      "fatin99": 1
    }
  },
  {
    "path": "src/main/java/tatracker/logic/parser/session/DoneSessionCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eclmist"
        },
        "content": "package tatracker.logic.parser.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eclmist"
        },
        "content": "import static tatracker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eclmist"
        },
        "content": "import tatracker.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eclmist"
        },
        "content": "import tatracker.logic.commands.session.DoneSessionCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eclmist"
        },
        "content": "import tatracker.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eclmist"
        },
        "content": "import tatracker.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eclmist"
        },
        "content": "import tatracker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eclmist"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eclmist"
        },
        "content": " * Parses input arguments and creates a new DoneSessionCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eclmist"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eclmist"
        },
        "content": "public class DoneSessionCommandParser implements Parser\u003cDoneSessionCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DoneSessionCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     * and returns an DoneSessionCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    public DoneSessionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            return new DoneSessionCommand(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eclmist"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DoneSessionCommand.MESSAGE_INVALID_INDEX), pe);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eclmist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eclmist": 31
    }
  },
  {
    "path": "src/main/java/tatracker/logic/parser/session/EditSessionCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.logic.parser.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_ENDTIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_NOTES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_RECUR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_SESSION_TYPE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_STARTTIME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eclmist"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eclmist"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eclmist"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.commands.session.EditSessionCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.parser.Parser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "/*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": " * \u003d\u003d\u003d BUGS \u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": " * TODO: No error when end time is after start time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": " *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": " * TODO: Sessions cannot have dates that are earlier than the current date."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": " *        Earlier dates are replaced by the current date."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eclmist"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eclmist"
        },
        "content": " * Parses input arguments and creates a new EditSessionCommand object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eclmist"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eclmist"
        },
        "content": "public class EditSessionCommandParser implements Parser\u003cEditSessionCommand\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditSessionCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     * and returns an AddSessionCommand object for execution."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    public EditSessionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_STARTTIME, PREFIX_ENDTIME,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                PREFIX_DATE, PREFIX_RECUR, PREFIX_MODULE, PREFIX_SESSION_TYPE, PREFIX_NOTES);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditSessionCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                    pe);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        EditSessionCommand.EditSessionDescriptor editSessionDescriptor \u003d new EditSessionCommand.EditSessionDescriptor();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        LocalDate date \u003d LocalDate.now(); // Arbitrary default value. Will be overwritten by EditSessionCommand"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            editSessionDescriptor.setIsDateChanged(true);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        if (argMultimap.getValue(PREFIX_STARTTIME).isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            LocalTime startTime \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_STARTTIME).get());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            editSessionDescriptor.setStartTime(LocalDateTime.of(date.getYear(), date.getMonth(), date.getDayOfMonth(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eclmist"
        },
        "content": "                    startTime.getHour(), startTime.getMinute(), startTime.getSecond()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ENDTIME).isPresent()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            LocalTime endTime \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_ENDTIME).get());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            editSessionDescriptor.setEndTime(LocalDateTime.of(date.getYear(), date.getMonth(), date.getDayOfMonth(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eclmist"
        },
        "content": "                    endTime.getHour(), endTime.getMinute(), endTime.getSecond()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        if (argMultimap.getValue(PREFIX_RECUR).isPresent()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            editSessionDescriptor.setIsRecurring(argMultimap.getValue(PREFIX_RECUR).isPresent());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MODULE).isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            editSessionDescriptor.setModuleCode(ParserUtil.parseValue(argMultimap.getValue(PREFIX_MODULE).get()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SESSION_TYPE).isPresent()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            editSessionDescriptor.setSessionType("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eclmist"
        },
        "content": "                    ParserUtil.parseSessionType(argMultimap.getValue(PREFIX_SESSION_TYPE).get()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NOTES).isPresent()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            editSessionDescriptor.setDescription(ParserUtil.parseValue(argMultimap.getValue(PREFIX_NOTES).get()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // TODO: Check if editing should be allowed if there are no fields"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!editSessionDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new ParseException(EditSessionCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        return new EditSessionCommand(index, editSessionDescriptor);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eclmist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 8,
      "eclmist": 58,
      "PotatoCombat": 29,
      "fatin99": 7
    }
  },
  {
    "path": "src/main/java/tatracker/logic/parser/session/SessionCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.logic.parser.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eclmist"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eclmist"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.CommandWords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eclmist"
        },
        "content": "import tatracker.logic.commands.session.DoneSessionCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eclmist"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eclmist"
        },
        "content": " * Parses user input into commands that interact with Session model."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eclmist"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eclmist"
        },
        "content": "public class SessionCommandParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    private static final String UNIMPLEMENTED_CODE_FORMAT \u003d \"%s not yet implemented!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        case CommandWords.ADD_MODEL:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            return new AddSessionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        case CommandWords.DELETE_MODEL:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "            return new DeleteSessionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        case CommandWords.EDIT_MODEL:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            return new EditSessionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        case DoneSessionCommand.COMMAND_WORD_DONE:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            return new DoneSessionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eclmist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 7,
      "eclmist": 52,
      "chuayijing": 1
    }
  },
  {
    "path": "src/main/java/tatracker/logic/parser/student/AddStudentCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package tatracker.logic.parser.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_GROUP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_MATRIC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.commands.student.AddStudentCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.parser.Parser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.parser.Prefix;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.group.Group;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.module.Module;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Matric;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.student.Rating;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Student;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": " * Parses input arguments and creates a new AddStudentCommand object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "public class AddStudentCommandParser implements Parser\u003cAddStudentCommand\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddStudentCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * and returns an AddStudentCommand object for execution."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public AddStudentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MATRIC, PREFIX_MODULE, PREFIX_GROUP,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                        PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_RATING, PREFIX_TAG);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MATRIC, PREFIX_MODULE, PREFIX_GROUP, PREFIX_NAME)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddStudentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // \u003d\u003d\u003d\u003d Identity fields \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Matric matric \u003d ParserUtil.parseMatric(argMultimap.getValue(PREFIX_MATRIC).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Module module \u003d new Module(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Group group \u003d new Group(argMultimap.getValue(PREFIX_GROUP).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // \u003d\u003d\u003d\u003d Optional fields \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Phone phone \u003d new Phone();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Email email \u003d new Email();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Rating rating \u003d new Rating();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (argMultimap.getValue(PREFIX_RATING).isPresent()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            rating \u003d ParserUtil.parseRating(argMultimap.getValue(PREFIX_RATING).get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // \u003d\u003d\u003d\u003d Build Student  \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Student student \u003d new Student(matric, name, phone, email, rating, tagList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return new AddStudentCommand(student, group, module);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 13,
      "PotatoCombat": 41,
      "fatin99": 10,
      "-": 32
    }
  },
  {
    "path": "src/main/java/tatracker/logic/parser/student/DeleteStudentCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package tatracker.logic.parser.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_GROUP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_MATRIC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.student.DeleteStudentCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.logic.parser.Prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.group.Group;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.module.Module;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.student.Matric;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * Parses input arguments and creates a new DeleteStudentCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatin99"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatin99"
        },
        "content": "public class DeleteStudentCommandParser implements Parser\u003cDeleteStudentCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteStudentCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * and returns a DeleteStudentCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public DeleteStudentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MATRIC, PREFIX_GROUP, PREFIX_MODULE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MATRIC, PREFIX_GROUP, PREFIX_MODULE)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                    DeleteStudentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Matric matric \u003d ParserUtil.parseMatric(argMultimap.getValue(PREFIX_MATRIC).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        String groupCode \u003d argMultimap.getValue(PREFIX_GROUP).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        String moduleCode \u003d argMultimap.getValue(PREFIX_MODULE).get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Group group \u003d new Group(groupCode);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Module module \u003d new Module(moduleCode);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return new DeleteStudentCommand(matric, group, module);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fatin99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 3,
      "PotatoCombat": 36,
      "fatin99": 21
    }
  },
  {
    "path": "src/main/java/tatracker/logic/parser/student/EditStudentCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package tatracker.logic.parser.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_MATRIC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.commands.student.EditStudentCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.commands.student.EditStudentCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.parser.Parser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": " * Parses input arguments and creates a new EditStudentCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "public class EditStudentCommandParser implements Parser\u003cEditStudentCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditStudentCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * and returns an EditStudentCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public EditStudentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_MATRIC,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                        PREFIX_RATING, PREFIX_TAG);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditStudentCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                    pe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        EditStudentDescriptor editStudentDescriptor \u003d new EditStudentDescriptor();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            editStudentDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            editStudentDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            editStudentDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MATRIC).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            editStudentDescriptor.setMatric(ParserUtil.parseMatric(argMultimap.getValue(PREFIX_MATRIC).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (argMultimap.getValue(PREFIX_RATING).isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            editStudentDescriptor.setRating(ParserUtil.parseRating(argMultimap.getValue(PREFIX_RATING).get()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editStudentDescriptor::setTags);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        if (!editStudentDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new ParseException(EditStudentCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return new EditStudentCommand(index, editStudentDescriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 10,
      "PotatoCombat": 16,
      "fatin99": 16,
      "-": 51
    }
  },
  {
    "path": "src/main/java/tatracker/logic/parser/student/StudentCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package tatracker.logic.parser.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.CommandWords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": " * Parses user input into commands that interact with Student models."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "public class StudentCommandParser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private static final String UNIMPLEMENTED_CODE_FORMAT \u003d \"%s not yet implemented!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        case CommandWords.ADD_MODEL:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return new AddStudentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        case CommandWords.DELETE_MODEL:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return new DeleteStudentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        case CommandWords.EDIT_MODEL:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return new EditStudentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 6,
      "PotatoCombat": 49,
      "fatin99": 1
    }
  },
  {
    "path": "src/main/java/tatracker/model/Model.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.group.Group;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.session.Session;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // TODO: Remove interface constants (aim for pure interface)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    Predicate\u003cStudent\u003e PREDICATE_SHOW_ALL_STUDENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /** {@code Predicates} that always evaluate to true */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    Predicate\u003cModule\u003e PREDICATE_SHOW_ALL_MODULES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /** {@code Predicates} that always evaluate to true */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    Predicate\u003cSession\u003e PREDICATE_SHOW_ALL_SESSIONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TaTracker Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns the TaTracker."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ReadOnlyTaTracker getTaTracker();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Replaces TaTracker data with the data in {@code taTracker}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    void setTaTracker(ReadOnlyTaTracker taTracker);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d User Prefs Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns the User Prefs."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Replaces the data in User Prefs with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns the TaTracker file path in the User Prefs."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    Path getTaTrackerFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Replaces the TaTracker file path in the User Prefs."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    void setTaTrackerFilePath(Path taTrackerFilePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns the GUI settings in the User Prefs."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Replaces the GUI settings in the User Prefs."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Session Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns true if a given session with the same identity as {@code session}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * exists in TaTracker."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    boolean hasSession(Session session);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Adds the given session into the TaTracker."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param session session to add, which must not already exist in the TaTracker."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    void addSession(Session session);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Deletes the given session {@code target} from the TaTracker."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param target session to delete, which must exist in the TaTracker."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    void deleteSession(Session target);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Replaces the given session {@code target} in the TaTracker with {@code editedSession}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param target session to edit, which must exist in the TaTracker."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param editedSession the edited session {@code target}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *                      The identity of {@code editedSession} must be the same as {@code target}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    void setSession(Session target, Session editedSession);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    /** Returns an unmodifiable view of the filtered session list */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    ObservableList\u003cSession\u003e getFilteredSessionList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "     * Updates the filter of the filtered session list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    void updateFilteredSessionList(Predicate\u003cSession\u003e predicate);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Done Session Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Adds the given session to the list of completed sessions."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * The session must exist in the ta-tracker."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    void addDoneSession(Session session);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Module Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns the TaTracker module with the given module identifier."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    Module getModule(String moduleId);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /** Returns an unmodifiable view of the filtered done session list */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    ObservableList\u003cSession\u003e getFilteredDoneSessionList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Updates the filter of the filtered done session list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    void updateFilteredDoneSessionList(Predicate\u003cSession\u003e predicate);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns true if a given module with the same identity as {@code module}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * exists in TaTracker."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    boolean hasModule(Module module);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Adds the given module into the TaTracker."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param module module to add, which must not already exist in the TaTracker."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    void addModule(Module module);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Deletes the given module {@code target} from the TaTracker."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param target module to delete, which must exist in the TaTracker."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    void deleteModule(Module target);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Sorts the modules by rating in ascending order."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    void sortModulesByRatingAscending();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Sorts the modules by rating in descending order."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    void sortModulesByRatingDescending();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Sorts all the students of all groups in all the modules alphabetically."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    void sortModulesAlphabetically();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Replaces the given module {@code target} in the TaTracker with {@code editedModule}."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param target module to edit, which must exist in the TaTracker."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param editedModule the edited module {@code target}."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *                     The identity of {@code editedModule} must be the same as {@code target}."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    void setModule(Module target, Module editedModule);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /** Returns an unmodifiable view of the filtered module list */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredModuleList();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Updates the filter of the filtered module list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    void updateFilteredModuleList(Predicate\u003cModule\u003e predicate);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Group Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns true if a given group with the same identity as {@code group}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * exists in a module that is in TaTracker."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param targetModule module that contains {@code group}."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    boolean hasGroup(Group group, Module targetModule);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Adds the given group into a module that is in TaTracker."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param group group to add, which must not already exist in the TaTracker module."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param targetModule module to add {@code group} into, which must exist in the TaTracker."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    void addGroup(Group group, Module targetModule);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Deletes the given group {@code target} from a module that is in TaTracker."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param target group to delete, which must exist in the TaTracker module."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param targetModule module to delete group {@code target} from, which must exist in the TaTracker."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    void deleteGroup(Group target, Module targetModule);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Replaces the given group {@code target} in a TaTracker module with {@code editedGroup}."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param target group to edit, which must exist in the TaTracker module."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param editedGroup the edited group {@code target}."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *                    The identity of {@code editedGroup} must be the same as {@code target}."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param targetModule module with the group to edit, which must exist in the TaTracker."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    void setGroup(Group target, Group editedGroup, Module targetModule);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /** Returns an unmodifiable view of the filtered group list */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    ObservableList\u003cGroup\u003e getFilteredGroupList();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Updates the filtered group list to show the groups in module with the given"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * module code."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    void updateFilteredGroupList(String moduleCode);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Sets the filtered group list to be an empty list."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    void setFilteredGroupList();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Updates the group list to show the groups in the module with the given index."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    void updateGroupList(int index);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Student Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns true if a student with the same identity as {@code student} exists in the TaTracker."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    boolean hasStudent(Student student);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns true if a given student with the same identity as {@code student}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * exists in a module group that is in TaTracker."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param targetGroup group to check if {@code student} is enrolled in."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param targetModule module that contains {@code group}."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    boolean hasStudent(Student student, Group targetGroup, Module targetModule);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Adds the given student."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * {@code student} must not already exist in the ta-tracker."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    void addStudent(Student student);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Adds the given student into a module group that is in TaTracker."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param student student to add, which must not already exist in the TaTracker module group."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param targetGroup group to add {@code student} into, which must exist in the TaTracker module."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param targetModule module to add {@code student} into, which must exist in the TaTracker."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    void addStudent(Student student, Group targetGroup, Module targetModule);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Deletes the given student."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * The student must exist in the ta-tracker."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    void deleteStudent(Student target);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Deletes the given student {@code target} from a module group that is in TaTracker."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param target student to delete, which must exist in the TaTracker module group."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param targetGroup group to delete student {@code target} from, which must exist in the TaTracker module."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param targetModule module to delete student {@code target} from, which must exist in the TaTracker."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    void deleteStudent(Student target, Group targetGroup, Module targetModule);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Replaces the given student {@code target} with {@code editedStudent}."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * {@code target} must exist in the ta-tracker."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * The student identity of {@code editedStudent} must not be the same as another existing student in the tracker."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    void setStudent(Student target, Student editedStudent);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Replaces the given student {@code target} in a TaTracker module group with {@code editedStudent}."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param target student to edit, which must exist in the TaTracker module group."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param editedStudent the edited student {@code target}."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *                      The identity of {@code editedStudent} must be the same as {@code target}."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param targetGroup group with the student to edit, which must exist in the TaTracker module."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param targetModule module with the student to edit, which must exist in the TaTracker."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    void setStudent(Student target, Student editedStudent, Group targetGroup, Module targetModule);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Sets the student list to be of group of index groupIndex in the module of index moduleIndex."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    void updateStudentList(int moduleIndex, int groupIndex);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // TODO: Student filter methods. Javadoc comments should mention students are inside group -\u003e inside module"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /** Returns an unmodifiable view of the filtered student list */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ObservableList\u003cStudent\u003e getFilteredStudentList();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Updates the currently shown student list to show students of the given group"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * from the given module."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    void updateFilteredStudentList(String groupCode, String moduleCode);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Sets the filtered student list to be an empty list."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    void setFilteredStudentList();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Sets the filtered student list to be an that of given index group in given module."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    void setFilteredStudentList(String moduleCode, int groupIndex);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 79,
      "chuayijing": 34,
      "PotatoCombat": 147,
      "fatin99": 22,
      "-": 40
    }
  },
  {
    "path": "src/main/java/tatracker/model/ModelManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.group.Group;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.module.Module;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.session.Session;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Student;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * Represents the in-memory model of the ta-tracker data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private final TaTracker taTracker;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    private final FilteredList\u003cSession\u003e filteredSessions;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private final FilteredList\u003cSession\u003e filteredDoneSessions;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private final FilteredList\u003cModule\u003e filteredModules;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private long totalHours \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private int rate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private long totalEarnings;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Initializes a ModelManager with the given taTracker and userPrefs."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public ModelManager(ReadOnlyTaTracker taTracker, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        super(); // TODO: Super gets interface constants."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        requireAllNonNull(taTracker, userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        logger.fine(\"Initializing with ta-tracker: \" + taTracker + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        this.taTracker \u003d new TaTracker(taTracker);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        filteredSessions \u003d new FilteredList\u003c\u003e(this.taTracker.getSessionList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        filteredDoneSessions \u003d new FilteredList\u003c\u003e(this.taTracker.getDoneSessionList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        filteredModules \u003d new FilteredList\u003c\u003e(this.taTracker.getModuleList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        this(new TaTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TaTracker \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public ReadOnlyTaTracker getTaTracker() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return taTracker;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void setTaTracker(ReadOnlyTaTracker taTracker) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.taTracker.resetData(taTracker);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public Path getTaTrackerFilePath() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return userPrefs.getTaTrackerFilePath();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void setTaTrackerFilePath(Path taTrackerFilePath) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        requireNonNull(taTrackerFilePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        userPrefs.setTaTrackerFilePath(taTrackerFilePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Session Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public boolean hasSession(Session session) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        requireNonNull(session);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return taTracker.hasSession(session);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void addSession(Session session) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        taTracker.addSession(session);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        updateFilteredSessionList(PREDICATE_SHOW_ALL_SESSIONS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void deleteSession(Session target) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        taTracker.removeSession(target);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void setSession(Session target, Session editedSession) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        requireAllNonNull(target, editedSession);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        taTracker.setSession(target, editedSession);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public ObservableList\u003cSession\u003e getFilteredSessionList() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return filteredSessions;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void updateFilteredSessionList(Predicate\u003cSession\u003e predicate) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        filteredSessions.setPredicate(predicate);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Done Session Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void addDoneSession(Session session) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        taTracker.addDoneSession(session);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        totalHours +\u003d Math.ceil(Duration.between"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                (session.getEndDateTime(), session.getStartDateTime())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                .toHours());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        updateFilteredDoneSessionList(PREDICATE_SHOW_ALL_SESSIONS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Session} backed by the internal list of"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * {@code versionedTaTracker}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public ObservableList\u003cSession\u003e getFilteredDoneSessionList() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return filteredDoneSessions;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void updateFilteredDoneSessionList(Predicate\u003cSession\u003e predicate) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        filteredDoneSessions.setPredicate(predicate);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Module Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public Module getModule(String code) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        requireNonNull(code);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return taTracker.getModule(code);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return taTracker.hasModule(module);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void addModule(Module module) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        taTracker.addModule(module);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void deleteModule(Module module) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        taTracker.deleteModule(module);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        requireAllNonNull(target, editedModule);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        taTracker.setModule(target, editedModule);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void sortModulesAlphabetically() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        taTracker.sortModulesAlphabetically();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void sortModulesByRatingAscending() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        taTracker.sortModulesByRatingAscending();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void sortModulesByRatingDescending() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        taTracker.sortModulesByRatingDescending();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return filteredModules;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        filteredModules.setPredicate(predicate);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Group Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public boolean hasGroup(Group group, Module targetModule) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        requireNonNull(group);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return taTracker.hasGroup(group, targetModule);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Student List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Student} backed by the internal list of"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * {@code versionedTaTracker}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void addGroup(Group group, Module targetModule) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        requireNonNull(group);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        taTracker.addGroup(group, targetModule);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void deleteGroup(Group target, Module targetModule) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        requireNonNull(target);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        taTracker.removeGroup(target, targetModule);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void setGroup(Group target, Group editedGroup, Module targetModule) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        requireAllNonNull(target, editedGroup);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        taTracker.setGroup(target, editedGroup, targetModule);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public ObservableList\u003cGroup\u003e getFilteredGroupList() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return taTracker.getCurrentlyShownGroupList();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void updateFilteredGroupList(String moduleCode) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        taTracker.updateCurrentlyShownGroups(moduleCode);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void setFilteredGroupList() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        taTracker.setCurrentlyShownGroups(new ArrayList\u003cGroup\u003e());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void updateGroupList(int moduleIndex) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        taTracker.setCurrentlyShownGroups(moduleIndex);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Student Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return taTracker.hasStudent(student);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public boolean hasStudent(Student student, Group targetGroup, Module targetModule) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return taTracker.hasStudent(student, targetGroup, targetModule);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void addStudent(Student student) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        taTracker.addStudent(student);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void addStudent(Student student, Group targetGroup, Module targetModule) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        taTracker.addStudent(student, targetGroup, targetModule);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void deleteStudent(Student target) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        taTracker.removeStudent(target);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void deleteStudent(Student target, Group targetGroup, Module targetModule) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        requireNonNull(target);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        taTracker.deleteStudent(target, targetGroup, targetModule);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        requireAllNonNull(target, editedStudent);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        taTracker.setStudent(target, editedStudent);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void setStudent(Student target, Student editedStudent, Group targetGroup, Module targetModule) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        requireAllNonNull(target, editedStudent);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        taTracker.setStudent(target, editedStudent, targetGroup, targetModule);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void updateStudentList(int moduleIndex, int groupIndex) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        taTracker.setCurrentlyShownStudents(moduleIndex, groupIndex);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * TODO: Review filter functions."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return taTracker.getCurrentlyShownStudentList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void setFilteredStudentList() {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        taTracker.setCurrentlyShownStudents(new ArrayList\u003cStudent\u003e());"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void setFilteredStudentList(String moduleCode, int groupIndex) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        taTracker.setCurrentlyShownStudents(moduleCode, groupIndex);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void updateFilteredStudentList(String groupCode, String moduleCode) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        taTracker.updateCurrentlyShownStudents(groupCode, moduleCode);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Others Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return taTracker.equals(other.taTracker)"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                \u0026\u0026 filteredSessions.equals(other.filteredSessions)"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                \u0026\u0026 filteredModules.equals(other.filteredModules);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 103,
      "chuayijing": 36,
      "PotatoCombat": 114,
      "fatin99": 28,
      "-": 96
    }
  },
  {
    "path": "src/main/java/tatracker/model/ReadOnlyTaTracker.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.model.group.Group;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.module.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.session.Session;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Student;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * Unmodifiable view of a ta-tracker."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "public interface ReadOnlyTaTracker {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Returns an unmodifiable view of the student list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * This list will not contain any duplicate student."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    ObservableList\u003cStudent\u003e getCurrentlyShownStudentList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Returns an unmodifiable view of the modules list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * This list will not contain any duplicate modules."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    ObservableList\u003cModule\u003e getModuleList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Returns an unmodifiable view of the groups list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * This list will not contain any duplicate groups."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    ObservableList\u003cGroup\u003e getCurrentlyShownGroupList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Returns an unmodifiable view of the sessions list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * This list will not contain any duplicate sessions."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    ObservableList\u003cSession\u003e getSessionList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Returns an unmodifiable view of the done sessions list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * This list will not contain any duplicate sessions."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    ObservableList\u003cSession\u003e getDoneSessionList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 15,
      "chuayijing": 3,
      "fatin99": 14,
      "-": 11
    }
  },
  {
    "path": "src/main/java/tatracker/model/ReadOnlyUserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    Path getTaTrackerFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/tatracker/model/TaTracker.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.model.group.Group;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.group.GroupNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.model.group.UniqueGroupList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.module.ModuleNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.session.Session;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.model.session.UniqueDoneSessionList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.model.session.UniqueSessionList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Student;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.UniqueStudentList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * Wraps all data at the ta-tracker level"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuayijing"
        },
        "content": " * Duplicates are not allowed (by .isSameSession comparison)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * Duplicates are not allowed (by .isSameStudent comparison)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "public class TaTracker implements ReadOnlyTaTracker {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    private final UniqueSessionList sessions;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private final UniqueDoneSessionList doneSessions;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private final UniqueModuleList modules;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private final UniqueGroupList currentlyShownGroups;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private final UniqueStudentList currentlyShownStudents;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public TaTracker() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        sessions \u003d new UniqueSessionList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        doneSessions \u003d new UniqueDoneSessionList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        modules \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        currentlyShownGroups \u003d new UniqueGroupList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        currentlyShownStudents \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Creates a TaTracker using the Students in the {@code toBeCopied}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public TaTracker(ReadOnlyTaTracker toBeCopied) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Resets the existing data of this {@code TaTracker} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void resetData(ReadOnlyTaTracker newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        setSessions(newData.getSessionList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        setDoneSessions(newData.getDoneSessionList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        setModules(newData.getModuleList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        setCurrentlyShownGroups(newData.getCurrentlyShownGroupList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        setCurrentlyShownStudents(newData.getCurrentlyShownStudentList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Session Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Returns true if a session with the same identity as {@code session} exists in the ta-tracker."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    public boolean hasSession(Session session) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        requireNonNull(session);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        return sessions.contains(session);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Adds a session to the ta-tracker."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * The session must not already exist in the ta-tracker."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    public void addSession(Session s) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        sessions.add(s);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns true if a session with the same identity as {@code session} exists in the ta-tracker."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Removes {@code session} from this {@code TaTracker}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * {@code session} must exist in the ta-tracker."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void removeSession(Session session) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        sessions.remove(session);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "     * Replaces the given session {@code target} in the list with {@code editedSession}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * {@code target} must exist in the ta-tracker."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "     * The session identity of {@code editedSession} must not be the same as another"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * existing session in the ta-tracker."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    public void setSession(Session target, Session editedSession) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        requireNonNull(editedSession);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        sessions.setSession(target, editedSession);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Replaces the contents of the session list with {@code sessions}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * {@code sessions} must not contain duplicate sessions."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void setSessions(List\u003cSession\u003e sessions) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.sessions.setSessions(sessions);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public ObservableList\u003cSession\u003e getSessionList() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return sessions.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Done Session Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void addDoneSession(Session s) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        doneSessions.add(s);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Replaces the contents of the donesession list with {@code donesessions}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * {@code donesessions} must not contain duplicate donesessions."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void setDoneSessions(List\u003cSession\u003e donesessions) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.doneSessions.setSessions(donesessions);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public ObservableList\u003cSession\u003e getDoneSessionList() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return doneSessions.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Module Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns module from TATracker."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public Module getModule(String moduleId) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return modules.getModule(moduleId);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Returns true if a module with the same module code exists in the TATracker."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return modules.contains(module);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Adds a module to the TATracker."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void addModule(Module module) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        modules.add(module);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Removes module with same module code from TA-Tracker."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void deleteModule(Module module) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        for (Session session : sessions) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            if (session.getModuleCode().equals(module.getIdentifier())) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                sessions.remove(session);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        modules.remove(module);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Removes {@code key} from this {@code TaTracker}."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * {@code key} must exist in the ta-tracker."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void removeModule(Module key) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        modules.remove(key);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Replaces the given module {@code target} in the list with {@code editedModule}."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * {@code target} must exist in the ta-tracker."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another existing module in the tracker."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        requireNonNull(editedModule);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        modules.setModule(target, editedModule);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Sorts modules alphabetically."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void sortModulesAlphabetically() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        for (int i \u003d 0; i \u003c modules.size(); ++i) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            modules.get(i).sortGroupsAlphabetically();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Sorts modules by rating in ascending order."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void sortModulesByRatingAscending() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        for (int i \u003d 0; i \u003c modules.size(); ++i) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            modules.get(i).sortGroupsByRatingAscending();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Sorts modules alphabetically."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void sortModulesByRatingDescending() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        for (int i \u003d 0; i \u003c modules.size(); ++i) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            modules.get(i).sortGroupsByRatingDescending();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Replaces the contents of the modules list with {@code modules}."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * {@code modules} must not contain duplicate modules."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void setModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.modules.setModules(modules);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public ObservableList\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return modules.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Group Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns true if a group with the same group code exists in the TATracker."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public boolean hasGroup(Group group, Module targetModule) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        requireNonNull(group);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!hasModule(targetModule)) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Module module \u003d getModule(targetModule.getIdentifier());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return module.hasGroup(group);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Adds a group to the TATracker."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void addGroup(Group group, Module targetModule) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!hasModule(targetModule)) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Module module \u003d getModule(targetModule.getIdentifier());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        module.addGroup(group);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Removes {@code key} from this {@code TaTracker}."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * {@code key} must exist in the ta-tracker."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void removeGroup(Group group, Module targetModule) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!hasModule(targetModule)) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Module module \u003d getModule(targetModule.getIdentifier());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        module.deleteGroup(group);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Replaces the given group {@code target} in the list with {@code editedGroup}."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * {@code target} must exist in the ta-tracker."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * The group identity of {@code editedGroup} must not be the same as another existing group in the tracker."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void setGroup(Group target, Group editedGroup, Module targetModule) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        requireNonNull(editedGroup);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!hasModule(targetModule)) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Module module \u003d getModule(targetModule.getIdentifier());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        module.setGroup(target, editedGroup);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Replaces the contents of the group list with {@code groups}."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * {@code groups} must not contain duplicate groups."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void setCurrentlyShownGroups(List\u003cGroup\u003e groups) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        this.currentlyShownGroups.setGroups(groups);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Replaces the contents of the group list with the groups at the given"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * module index."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void setCurrentlyShownGroups(int n) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        setCurrentlyShownGroups(((modules.get(n)).getGroupList()));"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Updates the currently shown groups to be that of the currently shown module"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * code."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void updateCurrentlyShownGroups(String moduleCode) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        setCurrentlyShownGroups((modules.getModule(moduleCode)).getGroupList());"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public ObservableList\u003cGroup\u003e getCurrentlyShownGroupList() {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return currentlyShownGroups.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Student Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns true if a given student with the same identity as {@code student}"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * exists in a module group that is in TaTracker."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param targetGroup group to check if {@code student} is enrolled in."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param targetModule module that contains {@code group}."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public boolean hasStudent(Student student, Group targetGroup, Module targetModule) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!hasGroup(targetGroup, targetModule)) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Module module \u003d getModule(targetModule.getIdentifier());"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Group group \u003d module.getGroup(targetGroup.getIdentifier());"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return group.hasStudent(student);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns true if a student with the same identity as {@code student} exists in the ta-tracker."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return currentlyShownStudents.contains(student);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Adds the given student into a module group that is in TaTracker."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param student student to add, which must not already exist in the TaTracker module group."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param targetGroup group to add {@code student} into, which must exist in the TaTracker module."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param targetModule module to add {@code student} into, which must exist in the TaTracker."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void addStudent(Student student, Group targetGroup, Module targetModule) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!hasModule(targetModule)) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!hasGroup(targetGroup, targetModule)) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new GroupNotFoundException();"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Module module \u003d getModule(targetModule.getIdentifier());"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Group group \u003d module.getGroup(targetGroup.getIdentifier());"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        group.addStudent(student);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Adds a student to the ta-tracker."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * The student must not already exist in the ta-tracker."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void addStudent(Student p) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        currentlyShownStudents.add(p);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Deletes the given student {@code target} from a module group that is in TaTracker."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param target student to delete, which must exist in the TaTracker module group."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param targetGroup group to delete student {@code target} from, which must exist in the TaTracker module."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param targetModule module to delete student {@code target} from, which must exist in the TaTracker."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void deleteStudent(Student target, Group targetGroup, Module targetModule) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!hasModule(targetModule)) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!hasGroup(targetGroup, targetModule)) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new GroupNotFoundException();"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Module module \u003d getModule(targetModule.getIdentifier());"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Group group \u003d module.getGroup(targetGroup.getIdentifier());"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        group.deleteStudent(target);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Removes {@code key} from this {@code TaTracker}."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * {@code key} must exist in the ta-tracker."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void removeStudent(Student key) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        currentlyShownStudents.remove(key);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Replaces the given student {@code target} in a TaTracker module group with {@code editedStudent}."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param target student to edit, which must exist in the TaTracker module group."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param editedStudent the edited student {@code target}."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *                      The identity of {@code editedStudent} must be the same as {@code target}."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param targetGroup group with the student to edit, which must exist in the TaTracker module."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param targetModule module with the student to edit, which must exist in the TaTracker."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void setStudent(Student target, Student editedStudent, Group targetGroup, Module targetModule) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!hasModule(targetModule)) {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!hasGroup(targetGroup, targetModule)) {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new GroupNotFoundException();"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Module module \u003d getModule(targetModule.getIdentifier());"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Group group \u003d module.getGroup(targetGroup.getIdentifier());"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        group.setStudent(target, editedStudent);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Replaces the given student {@code target} in the list with {@code editedStudent}."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * {@code target} must exist in the ta-tracker."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * The student identity of {@code editedStudent} must not be the same as another existing student in the tracker."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        requireNonNull(editedStudent);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        currentlyShownStudents.setStudent(target, editedStudent);"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Replaces the contents of the student list with {@code students}."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * {@code students} must not contain duplicate students."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void setCurrentlyShownStudents(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        this.currentlyShownStudents.setStudents(students);"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Replaces the contents of the student list with the students at the given"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * group index of the given module."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void setCurrentlyShownStudents(String moduleCode, int n) {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        setCurrentlyShownStudents(((modules.getModule(moduleCode).get(n)).getStudentList()));"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Replaces the contents of the student list with the students at the given"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * group index of the given module."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void setCurrentlyShownStudents(int i, int n) {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        setCurrentlyShownStudents(((modules.get(i).get(n)).getStudentList()));"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Updates the currently shown groups to be that of the currently shown module"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * code."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void updateCurrentlyShownStudents(String groupCode, String moduleCode) {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        setCurrentlyShownStudents(((modules.getModule(moduleCode)).getGroup(groupCode)).getStudentList());"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public ObservableList\u003cStudent\u003e getCurrentlyShownStudentList() {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return currentlyShownStudents.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Utility Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return modules.hashCode();"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                || (other instanceof TaTracker // instanceof handles nulls"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                \u0026\u0026 modules.equals(((TaTracker) other).modules));"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return modules.asUnmodifiableObservableList().size() + \" students\";"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 154,
      "eclmist": 2,
      "chuayijing": 34,
      "PotatoCombat": 238,
      "fatin99": 12,
      "-": 46
    }
  },
  {
    "path": "src/main/java/tatracker/model/UserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private Path taTrackerFilePath \u003d Paths.get(\"data\" , \"tatracker.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        setTaTrackerFilePath(newUserPrefs.getTaTrackerFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public Path getTaTrackerFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return taTrackerFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void setTaTrackerFilePath(Path taTrackerFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        requireNonNull(taTrackerFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        this.taTrackerFilePath \u003d taTrackerFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                \u0026\u0026 taTrackerFilePath.equals(o.taTrackerFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return Objects.hash(guiSettings, taTrackerFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + taTrackerFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 12,
      "-": 75
    }
  },
  {
    "path": "src/main/java/tatracker/model/group/DuplicateGroupException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * Signals that the operation will result in duplicate Groups"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * (Groups are considered duplicates if they have the same"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * identifiers)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "public class DuplicateGroupException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public DuplicateGroupException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        super(\"Operation would result in duplicate groups\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 12
    }
  },
  {
    "path": "src/main/java/tatracker/model/group/Group.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.student.Matric;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Student;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.UniqueStudentList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * Represents a group in TAT."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * A group is anything that would include a"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * group of students such as a lab or tutorial."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "public class Group {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private static final GroupType DEFAULT_GROUP_TYPE \u003d GroupType.TUTORIAL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private final String identifier;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private final GroupType groupType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private final UniqueStudentList students;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Constructs a group object with a default group type."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public Group(String identifier) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this(identifier, DEFAULT_GROUP_TYPE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Constructs a group object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param identifier identifies the group."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *                   For example, the tutorial code for a tutorial, etc."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public Group(String identifier, GroupType groupType) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        this.identifier \u003d identifier;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        this.groupType \u003d groupType;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.students \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Sorts students alphabetically."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void sortStudentsAlphabetically() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        students.sortAlphabetically();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Sorts students by rating in ascending order."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void sortStudentsByRatingAscending() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        students.sortByRatingAscending();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Sorts students by rating in descending order."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void sortStudentsByRatingDescending() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        students.sortByRatingDescending();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns the group identifier."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public String getIdentifier() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return identifier;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns the group type of this group."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * For example, if it is a tutorial or lab."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public GroupType getGroupType() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return groupType;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns the student list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public ObservableList\u003cStudent\u003e getStudentList() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return students.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return students.contains(student);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns the student enrolled in this module with the given"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * matriculation number (the student id)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns null if no such student exists."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public Student getStudent(Matric studentId) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return students.get(studentId);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Adds a student to the list of enrolled students."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void addStudent(Student student) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        students.add(student);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Deletes the given student from the list of enrolled students,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * if it exists."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void deleteStudent(Student student) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        students.remove(student);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Replaces the given student {@code target} in the list with {@code editedStudent}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * {@code target} must exist in the list of enrolled students."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * The student identity of {@code editedStudent} must not be the same as another existing student in the group."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        requireNonNull(editedStudent);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        students.setStudent(target, editedStudent);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Returns true if both groups have the same identifiers."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        if (!(other instanceof Group)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        Group otherGroup \u003d (Group) other;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return this.identifier.equals(otherGroup.identifier);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return Objects.hash(identifier);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    //TODO: edit once Student is made"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return String.format(\"%s\", identifier);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 82,
      "PotatoCombat": 70,
      "fatin99": 1
    }
  },
  {
    "path": "src/main/java/tatracker/model/group/GroupNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * Signals that the operation is unable to find the specified group."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "public class GroupNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 6
    }
  },
  {
    "path": "src/main/java/tatracker/model/group/GroupType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package tatracker.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * Represents a group type."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * Can be a lab or a tutorial."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": "public enum GroupType {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    LAB(\"Lab\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    TUTORIAL(\"Tutorial\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    RECITATION(\"Recitation\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    OTHER(\"Other\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private String typeName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    GroupType(String typeName) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        this.typeName \u003d typeName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return typeName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatin99": 22
    }
  },
  {
    "path": "src/main/java/tatracker/model/group/UniqueGroupList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * A list of groups that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * A group is considered unique by comparing using {@code Group#equals(Object)}. As such, adding and updating of"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * groups uses Group#equals(Object) for equality so as to ensure that the group being added or updated is"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * unique in terms of identity in the UniqueGroupList."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * @see Group#equals(Object)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "public class UniqueGroupList implements Iterable\u003cGroup\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private final ObservableList\u003cGroup\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private final ObservableList\u003cGroup\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Returns true if the list contains an equivalent group as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public boolean contains(Group toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public Group get(int n) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return internalList.get(n);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns the group in this list with the given group id."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns null if no such group exists."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public Group get(String groupId) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        for (Group group : internalList) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            if (group.getIdentifier().equals(groupId)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                return group;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return null; // Did not find a group with the given group id"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Adds a group to the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * The group must not already exist in the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void add(Group toAdd) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            throw new DuplicateGroupException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Removes the equivalent group from the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * The group must exist in the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void remove(Group toRemove) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new GroupNotFoundException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Replaces the group {@code target} in the list with {@code editedGroup}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * The group identity of {@code editedGroup} must not be the same as another existing group in the list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void setGroup(Group target, Group editedGroup) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        requireAllNonNull(target, editedGroup);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            throw new GroupNotFoundException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        if (!target.equals(editedGroup) \u0026\u0026 contains(editedGroup)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            throw new DuplicateGroupException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        internalList.set(index, editedGroup);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void setGroups(UniqueGroupList replacement) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Replaces the contents of this list with {@code groups}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * {@code groups} must not contain duplicate groups."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void setGroups(List\u003cGroup\u003e groups) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        requireAllNonNull(groups);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        if (!groupsAreUnique(groups)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            throw new DuplicateGroupException();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        internalList.setAll(groups);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public ObservableList\u003cGroup\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public Iterator\u003cGroup\u003e iterator() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                || (other instanceof UniqueGroupList // instanceof handles nulls"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueGroupList) other).internalList));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Returns true if {@code students} contains only unique students."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private boolean groupsAreUnique(List\u003cGroup\u003e groups) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        for (int i \u003d 0; i \u003c groups.size() - 1; i++) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            for (int j \u003d i + 1; j \u003c groups.size(); j++) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                if (groups.get(i).equals(groups.get(j))) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 126,
      "PotatoCombat": 28,
      "fatin99": 1
    }
  },
  {
    "path": "src/main/java/tatracker/model/module/DuplicateModuleException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * Signals that the operation will result in duplicate Modules"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * (Modules are considered duplicates if they have the same"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * identifiers)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "public class DuplicateModuleException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public DuplicateModuleException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        super(\"Operation would result in duplicate modules\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 12
    }
  },
  {
    "path": "src/main/java/tatracker/model/module/Module.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.group.Group;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.group.UniqueGroupList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.session.Session;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.session.UniqueSessionList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * Represents a module in the TAT."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "public class Module {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private static final String DEFAULT_NAME \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private final String identifier;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private final UniqueGroupList groups;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private final UniqueSessionList doneSessions;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Constructs a module object with no name."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public Module(String identifier) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this(identifier, DEFAULT_NAME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Constructs a module object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param identifier identifies the module."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *                   Usually equal to the module code."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * @param name the name of the module."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public Module(String identifier, String name) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        this.identifier \u003d identifier;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.groups \u003d new UniqueGroupList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.doneSessions \u003d new UniqueSessionList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns the module identifier."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public String getIdentifier() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return identifier;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns module name."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Returns module at index n."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public Group get(int n) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return groups.get(n);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns the group list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public ObservableList\u003cGroup\u003e getGroupList() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return groups.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Returns the unique group list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public UniqueGroupList getUniqueGroupList() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return groups;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns the session list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public ObservableList\u003cSession\u003e getSessionList() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return doneSessions.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public boolean hasGroup(Group group) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return groups.contains(group);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Adds a group to the list of module groups."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void addGroup(Group group) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        groups.add(group);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns the group in this module with the given group id."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns null if no such group exists."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public Group getGroup(String groupId) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return groups.get(groupId);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Deletes the given group from the list of module groups,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * if it exists."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void deleteGroup(Group group) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        groups.remove(group);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Replaces the given group {@code target} in the list with {@code editedGroup}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * {@code target} must exist in the list of groups."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * The group identity of {@code editedGroup} must not be the same as another existing group in the module."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void setGroup(Group target, Group editedGroup) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        groups.setGroup(target, editedGroup);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public boolean hasDoneSession(Session session) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return doneSessions.contains(session);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Sorts students in the groups alphabetically."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void sortGroupsAlphabetically() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        for (int i \u003d 0; i \u003c groups.size(); ++i) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            groups.get(i).sortStudentsAlphabetically();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Sorts the students in the groups by rating in ascending order."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void sortGroupsByRatingAscending() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        for (int i \u003d 0; i \u003c groups.size(); ++i) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            groups.get(i).sortStudentsByRatingAscending();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Sorts the students in the groups by rating in descending order."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void sortGroupsByRatingDescending() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        for (int i \u003d 0; i \u003c groups.size(); ++i) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            groups.get(i).sortStudentsByRatingDescending();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Adds a done session to the list of done sessions for this module."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void addDoneSession(Session session) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        doneSessions.add(session);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Returns true if both modules have the same identifiers."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        if (!(other instanceof Module)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        Module otherModule \u003d (Module) other;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return this.identifier.equals(otherModule.identifier);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return Objects.hash(identifier);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return String.format(\"%s (%s)\", name, identifier);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 132,
      "PotatoCombat": 56
    }
  },
  {
    "path": "src/main/java/tatracker/model/module/ModuleNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * Signals that the operation is unable to find the specified module."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "public class ModuleNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 6
    }
  },
  {
    "path": "src/main/java/tatracker/model/module/UniqueModuleList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * A list of modules that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * A module is considered unique by comparing using {@code Module#equals(Object)}. As such, adding and updating of"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * groups uses Module#equals(Object) for equality so as to ensure that the module being added or updated is"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * unique in terms of identity in the UniqueModuleList."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * @see Module#equals(Object)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "public class UniqueModuleList implements Iterable\u003cModule\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private final ObservableList\u003cModule\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private final ObservableList\u003cModule\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Returns true if the list contains an equivalent module as the given argument."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public boolean contains(Module toCheck) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public Module get(int n) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return internalList.get(n);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Adds a module to the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * The module must not already exist in the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void add(Module toAdd) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Replaces the module {@code target} in the list with {@code editedModule}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another existing module in the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        requireAllNonNull(target, editedModule);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        if (!target.equals(editedModule) \u0026\u0026 contains(editedModule)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        internalList.set(index, editedModule);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    public Module getModule(Module module) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        for (int i \u003d 0; i \u003c internalList.size(); i++) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "            if (module.getIdentifier().equals(internalList.get(i).getIdentifier())) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "                return internalList.get(i);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Gets module with given module code."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Returns null if no such module exists."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public Module getModule(String code) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        Module module \u003d null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        for (int i \u003d 0; i \u003c this.size(); ++i) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            module \u003d this.get(i);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            if (module.getIdentifier().equals(code)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            module \u003d null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return module;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Removes the equivalent module from the list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * The module must exist in the list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void remove(Module toRemove) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void setModules(UniqueModuleList replacement) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Replaces the contents of this list with {@code modules}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * {@code modules} must not contain duplicate modules."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void setModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        requireAllNonNull(modules);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        if (!modulesAreUnique(modules)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        internalList.setAll(modules);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public ObservableList\u003cModule\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public Iterator\u003cModule\u003e iterator() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                || (other instanceof UniqueModuleList // instanceof handles nulls"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueModuleList) other).internalList));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Returns true if {@code students} contains only unique students."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private boolean modulesAreUnique(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        for (int i \u003d 0; i \u003c modules.size() - 1; i++) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            for (int j \u003d i + 1; j \u003c modules.size(); j++) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                if (modules.get(i).equals(modules.get(j))) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 157,
      "chuayijing": 9,
      "fatin99": 1
    }
  },
  {
    "path": "src/main/java/tatracker/model/session/Session.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eclmist"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eclmist"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eclmist"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eclmist"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eclmist"
        },
        "content": " * Represents a session in TAT."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eclmist"
        },
        "content": " * A session is any claimable duty that has a start and end time."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eclmist"
        },
        "content": " * Guarantees: Date, Start Time and End Time are not null."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eclmist"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "public class Session implements Comparable\u003cSession\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /** For converting date times to strings. Example: \"2020-03-03 14:00\" */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private static final DateTimeFormatter FORMAT_DATE_TIME \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    private LocalDateTime startDateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    private LocalDateTime endDateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    private SessionType type;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    private boolean isRecurring;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     * Default Constructor for Session."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     * Creates a session object with default values."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    public Session() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        this.startDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        this.endDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        this.isRecurring \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        this.moduleCode \u003d \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.type \u003d SessionType.OTHER;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        this.description \u003d \"Default Session\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     * Constructs a Session object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     * The session\u0027s end time should be strictly after the session\u0027s start time."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    public Session(LocalDateTime start, LocalDateTime end, SessionType type, boolean isRecurring, String moduleCode,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eclmist"
        },
        "content": "                   String description) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        if (start.compareTo(end) \u003e 0) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            throw new IllegalArgumentException(\"[Session] Start time is set to after end time!\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        this.startDateTime \u003d start;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        this.endDateTime \u003d end;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        this.isRecurring \u003d isRecurring;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "     * Returns true if both sessions of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "     * This defines a weaker notion of equality between two sessions."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    public boolean isSameSession(Session s) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     * Returns the date when the session will take place."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        return this.startDateTime.toLocalDate();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     * Returns the start time of the session."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    public LocalDateTime getStartDateTime() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        return this.startDateTime;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     * Sets the start time of the session."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    public void setStartDateTime(LocalDateTime startDateTime) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     * Returns the end time of the session."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    public LocalDateTime getEndDateTime() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        return this.endDateTime;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     * Sets the end time of the session."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    public void setEndDateTime(LocalDateTime endDateTime) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     * Returns true if session will recur every week; false otherwise."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    public boolean getIsRecurring() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        return this.isRecurring;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     * Returns true if session is already completed; false otherwise."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     * Marks the session as done."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    public void done() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     * Sets whether the session is a recurring session."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    public void setRecurring(boolean recurring) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        isRecurring \u003d recurring;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     * Returns the module code associated with this session."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        return this.moduleCode;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     * Sets the module code associated with this session."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    public void setModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     * Returns the type of session."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    public SessionType getSessionType() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        return this.type;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     * Sets the type of session."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    public void setType(SessionType type) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     * Returns the description of the session."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     * Sets the description of the session."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     * Returns the duration of the session."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "eclmist"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    public Duration getSessionDuration() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        return Duration.between(this.startDateTime, this.endDateTime);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        builder.append(\"Type: \").append(type)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(\" Start: \").append(startDateTime.format(FORMAT_DATE_TIME))"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(\" End: \").append(endDateTime.format(FORMAT_DATE_TIME))"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(\" Module Code: \").append(moduleCode)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(\" Description: \").append(description)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(\" Recurs: \").append(isRecurring);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "     * Returns true if both sessions have the same identity and data fields."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        if (!(other instanceof Session)) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "eclmist"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        Session otherSession \u003d (Session) other;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        return isSameSession(otherSession);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "     * Compare Sessions based on the session that will occur first."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    public int compareTo(Session other) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        return getDate().compareTo(other.getDate());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "eclmist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 1,
      "eclmist": 174,
      "chuayijing": 24,
      "PotatoCombat": 17
    }
  },
  {
    "path": "src/main/java/tatracker/model/session/SessionType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package tatracker.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * Represents a session type. Session types follows the same specifications as the TSS."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * Example session types include: Tutorial, Grading, Consultation, etc."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": "public enum SessionType {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    TUTORIAL (\"Tutorial\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    LAB (\"Lab\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    CONSULTATION (\"Consultation\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    GRADING (\"Grading\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    PREPARATION (\"Preparation\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    OTHER (\"Other\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private String typeName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    SessionType(String typeName) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        this.typeName \u003d typeName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return typeName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatin99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatin99": 24
    }
  },
  {
    "path": "src/main/java/tatracker/model/session/UniqueDoneSessionList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package tatracker.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.model.session.exceptions.DuplicateSessionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.model.session.exceptions.SessionNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * A list of done sessions that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * A done session is considered unique by comparing using {@code Session#isSameSession(Session)}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatin99"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * @see Session#isSameSession(Session)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatin99"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatin99"
        },
        "content": "public class UniqueDoneSessionList implements Iterable\u003cSession\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private final ObservableList\u003cSession\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private final ObservableList\u003cSession\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Returns true if the list contains an equivalent session as the given argument."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public boolean contains(Session toCheck) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameSession);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Returns the size of the UniqueDoneSessionList."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Returns the session at the given index."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public Session get(int n) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return internalList.get(n);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Adds a session to the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * The session must not already exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void add(Session toAdd) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            throw new DuplicateSessionException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Replaces the session {@code target} in the list with {@code editedSession}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * The session identity of {@code editedSession} must not be the same as another existing session in the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void setSession(Session target, Session editedSession) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        requireAllNonNull(target, editedSession);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            throw new SessionNotFoundException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        if (!target.isSameSession(editedSession) \u0026\u0026 contains(editedSession)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            throw new DuplicateSessionException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        internalList.set(index, editedSession);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Removes the equivalent session from the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * The session must exist in the list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void remove(Session toRemove) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            throw new SessionNotFoundException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Removes the session of the given index from the list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * The session must exist in the list."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void remove(int n) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        requireNonNull(n);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        if (n \u003c 0 || n \u003e internalList.size()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            throw new SessionNotFoundException();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        internalList.remove(n);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void setSessions(UniqueDoneSessionList replacement) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Replaces the contents of this list with {@code sessions}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * {@code sessions} must not contain duplicate sessions."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void setSessions(List\u003cSession\u003e sessions) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        requireAllNonNull(sessions);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        if (!sessionsAreUnique(sessions)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            throw new DuplicateSessionException();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        internalList.setAll(sessions);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Returns the session list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public ObservableList\u003cSession\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        FXCollections.sort(internalList, Comparator.comparing(Session::getDate)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                .thenComparing(Session::getStartDateTime)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                .thenComparing(Session::getEndDateTime));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public Iterator\u003cSession\u003e iterator() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                || (other instanceof UniqueDoneSessionList // instanceof handles nulls"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueDoneSessionList) other).internalList));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Returns true if {@code sessions} contains only unique sessions."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private boolean sessionsAreUnique(List\u003cSession\u003e sessions) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        for (int i \u003d 0; i \u003c sessions.size() - 1; i++) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            for (int j \u003d i + 1; j \u003c sessions.size(); j++) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                if (sessions.get(i).isSameSession(sessions.get(j))) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "fatin99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatin99": 167
    }
  },
  {
    "path": "src/main/java/tatracker/model/session/UniqueSessionList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.session.exceptions.DuplicateSessionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.session.exceptions.SessionNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuayijing"
        },
        "content": " * A list of sessions that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuayijing"
        },
        "content": " * A session is considered unique by comparing using {@code Session#isSameSession(Session)}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuayijing"
        },
        "content": " * As such, adding and updating of sessions uses Session#isSameSession(Session)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuayijing"
        },
        "content": " * for equality so as to ensure that the session being added or updated is"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuayijing"
        },
        "content": " * unique in terms of identity in the UniqueSessionList. However,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuayijing"
        },
        "content": " * the removal of a session uses Session#equals(Object) so as to ensure that"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuayijing"
        },
        "content": " * the session with exactly the same fields will be removed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuayijing"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuayijing"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuayijing"
        },
        "content": " *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuayijing"
        },
        "content": " * @see Session#isSameSession(Session)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuayijing"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "public class UniqueSessionList implements Iterable\u003cSession\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    private final ObservableList\u003cSession\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    private final ObservableList\u003cSession\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "     * Returns true if the list contains an equivalent session as the given argument."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    public boolean contains(Session toCheck) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameSession);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Returns the size of the UniqueSessionList."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Returns the session at the given index."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public Session get(int n) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return internalList.get(n);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "     * Adds a session to the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "     * The session must not already exist in the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    public void add(Session toAdd) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "            throw new DuplicateSessionException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "     * Replaces the session {@code target} in the list with {@code editedSession}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "     * The session identity of {@code editedSession} must not be the same as another existing session in the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    public void setSession(Session target, Session editedSession) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        requireAllNonNull(target, editedSession);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "            throw new SessionNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        if (!target.isSameSession(editedSession) \u0026\u0026 contains(editedSession)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "            throw new DuplicateSessionException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        internalList.set(index, editedSession);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "     * Removes the equivalent session from the list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "     * The session must exist in the list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    public void remove(Session toRemove) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "            throw new SessionNotFoundException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Removes the session of the given index from the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * The session must exist in the list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void remove(int n) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        requireNonNull(n);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        if (n \u003c 0 || n \u003e internalList.size()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            throw new SessionNotFoundException();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        internalList.remove(n);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    public void setSessions(UniqueSessionList replacement) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "     * Replaces the contents of this list with {@code sessions}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "     * {@code sessions} must not contain duplicate sessions."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    public void setSessions(List\u003cSession\u003e sessions) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        requireAllNonNull(sessions);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        if (!sessionsAreUnique(sessions)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "            throw new DuplicateSessionException();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        internalList.setAll(sessions);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "     * Returns the session list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    public ObservableList\u003cSession\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        FXCollections.sort(internalList, Comparator.comparing(Session::getDate)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "                                                    .thenComparing(Session::getStartDateTime)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "                                                    .thenComparing(Session::getEndDateTime));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    public Iterator\u003cSession\u003e iterator() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "                || (other instanceof UniqueSessionList // instanceof handles nulls"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueSessionList) other).internalList));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "     * Returns true if {@code sessions} contains only unique sessions."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    private boolean sessionsAreUnique(List\u003cSession\u003e sessions) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        for (int i \u003d 0; i \u003c sessions.size() - 1; i++) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "            for (int j \u003d i + 1; j \u003c sessions.size(); j++) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "                if (sessions.get(i).isSameSession(sessions.get(j))) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "                }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 31,
      "chuayijing": 141
    }
  },
  {
    "path": "src/main/java/tatracker/model/session/exceptions/DuplicateSessionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.model.session.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuayijing"
        },
        "content": " * Signals that the operation will result in duplicate {@code Session}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuayijing"
        },
        "content": " * (Session are considered duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuayijing"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "public class DuplicateSessionException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    public DuplicateSessionException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        super(\"Operation would result in duplicate session\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 1,
      "chuayijing": 10
    }
  },
  {
    "path": "src/main/java/tatracker/model/session/exceptions/SessionNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.model.session.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuayijing"
        },
        "content": " * Signals that the operation is unable to find the specified {@code Session}."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuayijing"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "public class SessionNotFoundException extends RuntimeException {}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 1,
      "chuayijing": 7
    }
  },
  {
    "path": "src/main/java/tatracker/model/student/Email.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * Represents a Student\u0027s email in the TA-Tracker."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private static final String DEFAULT_VALUE \u003d \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Constructs an empty {@code Email}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public Email() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this(DEFAULT_VALUE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return test.isEmpty() || test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 3,
      "PotatoCombat": 10,
      "-": 63
    }
  },
  {
    "path": "src/main/java/tatracker/model/student/Matric.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * Represents a Student\u0027s matric number in the TA-Tracker."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidMatric(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": "public class Matric {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            \"Matric numbers should start with an \\\"A\\\" followed by 7 digits and one final capital letter,\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                    + \"and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * matric number must start with an \"A\" followed by 7 digits and one final capital letter"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"A\" + \"\\\\d{7}\" + \"[A-Z]\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Constructs a {@code Matric}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @param matric A valid matric."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public Matric(String matric) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        requireNonNull(matric);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        checkArgument(isValidMatric(matric), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        value \u003d matric;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Returns true if a given string is a valid matric number."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static boolean isValidMatric(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                || (other instanceof Matric // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                \u0026\u0026 value.equals(((Matric) other).value)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fatin99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 3,
      "fatin99": 56
    }
  },
  {
    "path": "src/main/java/tatracker/model/student/Name.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * Represents a Student\u0027s name in the TA-Tracker."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * The first character of the name must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 3,
      "fatin99": 1,
      "-": 55
    }
  },
  {
    "path": "src/main/java/tatracker/model/student/NameContainsKeywordsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * Tests that a {@code Student}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cStudent\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public boolean test(Student student) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(student.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 2,
      "fatin99": 4,
      "-": 25
    }
  },
  {
    "path": "src/main/java/tatracker/model/student/Phone.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * Represents a Student\u0027s phone number in the TA-Tracker."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private static final String DEFAULT_VALUE \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Constructs an empty {@code Phone}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public Phone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this(DEFAULT_VALUE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return test.isEmpty() || test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 3,
      "PotatoCombat": 11,
      "-": 48
    }
  },
  {
    "path": "src/main/java/tatracker/model/student/Rating.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "package tatracker.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static tatracker.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": " * Represents a Rating in the TA-Tracker. A Rating is an integer on a scale from 1 - 5,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": " * where 1 represents the poorest rating, and 5 represents the best rating."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": " * Guarantees: immutable; rating is valid as declared in {@link #isValidRating(int)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "public class Rating {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Ratings should be a number\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + \" between 1 (POOR) to 5 (EXCELLENT) inclusive\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private static final int DEFAULT_VALUE \u003d 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private static final int MIN_RATING \u003d 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private static final int MAX_RATING \u003d 5;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public final int value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Constructs a default {@code Rating} (The default rating is 3 for AVERAGE)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public Rating() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.value \u003d DEFAULT_VALUE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Constructs a {@code Rating}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param value A valid rating on a scale from 1 (POOR) to 5 (EXCELLENT)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public Rating(int value) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        checkArgument(isValidRating(value), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns true if a given number is a valid rating."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static boolean isValidRating(int test) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return MIN_RATING \u003c\u003d test \u0026\u0026 test \u003c\u003d MAX_RATING;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                || (other instanceof Rating // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                \u0026\u0026 value \u003d\u003d ((Rating) other).value); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return Integer.hashCode(value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return String.format(\"%d\", value);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PotatoCombat": 66
    }
  },
  {
    "path": "src/main/java/tatracker/model/student/Student.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * Represents a Student in the Ta-Tracker."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": "public class Student {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private final Matric matric;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // Optional fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private final Rating rating;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private final Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public Student(Matric matric, Name name, Phone phone, Email email, Rating rating, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        requireAllNonNull(matric, name, phone, email, rating, tags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.matric \u003d matric;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public Matric getMatric() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return matric;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public Rating getRating() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return rating;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Returns true if both students of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * This defines a weaker notion of equality between two students."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public boolean isSameStudent(Student otherStudent) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        if (otherStudent \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return otherStudent !\u003d null"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                \u0026\u0026 otherStudent.getName().equals(getName())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                \u0026\u0026 otherStudent.getMatric().equals(getMatric());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Returns true if both students have the same identity and data fields."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * This defines a stronger notion of equality between two students."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        if (!(other instanceof Student)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Student otherStudent \u003d (Student) other;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return otherStudent.getName().equals(getName())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                \u0026\u0026 otherStudent.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                \u0026\u0026 otherStudent.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                \u0026\u0026 otherStudent.getMatric().equals(getMatric())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                \u0026\u0026 otherStudent.getRating().equals(getRating())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                \u0026\u0026 otherStudent.getTags().equals(getTags());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return Objects.hash(name, phone, email, matric, rating, tags);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // Append identity fields"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                .append(\" Matric: \")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(getMatric());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // Append optional fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        builder.append(\" Rating: \")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(getRating());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // Append Tags"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        builder.append(\" Tags: \");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 4,
      "PotatoCombat": 31,
      "fatin99": 21,
      "-": 81
    }
  },
  {
    "path": "src/main/java/tatracker/model/student/UniqueStudentList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.exceptions.DuplicateStudentException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.exceptions.StudentNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * A list of students that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * A student is considered unique by comparing using {@code Student#isSameStudent(Student)}. As such, adding and"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * updating of students uses Student#isSameStudent(Student) for equality so as to ensure that the student being added or"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * updated is unique in terms of identity in the UniqueStudentList. However, the removal of a student uses"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * Student#equals(Object) so as to ensure that the student with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * @see Student#isSameStudent(Student)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatin99"
        },
        "content": "public class UniqueStudentList implements Iterable\u003cStudent\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private final ObservableList\u003cStudent\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private final ObservableList\u003cStudent\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private Comparator\u003cStudent\u003e alphabetically \u003d new Comparator\u003cStudent\u003e() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        public int compare(Student student, Student other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            return (student.getName().toString()).compareTo(other.getName().toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    };"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private Comparator\u003cStudent\u003e ratingAscending \u003d new Comparator\u003cStudent\u003e() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        public int compare(Student student, Student other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            return (student.getRating().toString()).compareTo(other.getRating().toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    };"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private Comparator\u003cStudent\u003e ratingDescending \u003d new Comparator\u003cStudent\u003e() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        public int compare(Student student, Student other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            return (-1) * (student.getRating().toString()).compareTo(other.getRating().toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    };"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Returns true if the list contains an equivalent student as the given argument."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public boolean contains(Student toCheck) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameStudent);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public Student get(int n) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return internalList.get(n);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns the student in this list with the given student"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * matriculation number (the student id)."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns null if no such student exists."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public Student get(Matric studentId) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        for (Student student : internalList) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            if (student.getMatric().equals(studentId)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                return student;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return null; // Did not find a student with the given student id"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Adds a student to the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * The student must not already exist in the list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void add(Student toAdd) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Removes the equivalent student from the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * The student must exist in the list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void remove(Student toRemove) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new StudentNotFoundException();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Replaces the student {@code target} in the list with {@code editedStudent}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * The student identity of {@code editedStudent} must not be the same as another existing student in the list."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        requireAllNonNull(target, editedStudent);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            throw new StudentNotFoundException();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        if (!target.isSameStudent(editedStudent) \u0026\u0026 contains(editedStudent)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        internalList.set(index, editedStudent);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void setStudents(UniqueStudentList replacement) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Replaces the contents of this list with {@code students}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * {@code students} must not contain duplicate students."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void setStudents(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        requireAllNonNull(students);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        if (!studentsAreUnique(students)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        internalList.setAll(students);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * returns alphabetical comparator."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public Comparator\u003cStudent\u003e getAlphabetically() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return alphabetically;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Sorts the students alphabetically."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void sortAlphabetically() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        FXCollections.sort(internalList, alphabetically);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Sorts the students by rating in ascending order."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void sortByRatingAscending() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        FXCollections.sort(internalList, ratingAscending);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Sorts the students by rating in descending order."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void sortByRatingDescending() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        FXCollections.sort(internalList, ratingDescending);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public ObservableList\u003cStudent\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public Iterator\u003cStudent\u003e iterator() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                || (other instanceof UniqueStudentList // instanceof handles nulls"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueStudentList) other).internalList));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Returns true if {@code students} contains only unique students."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private boolean studentsAreUnique(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        for (int i \u003d 0; i \u003c students.size() - 1; i++) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            for (int j \u003d i + 1; j \u003c students.size(); j++) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                if (students.get(i).isSameStudent(students.get(j))) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 56,
      "PotatoCombat": 30,
      "fatin99": 41,
      "-": 81
    }
  },
  {
    "path": "src/main/java/tatracker/model/student/exceptions/DuplicateStudentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.model.student.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * Signals that the operation will result in duplicate Student (Student are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": "public class DuplicateStudentException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public DuplicateStudentException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        super(\"Operation would result in duplicate students\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 1,
      "fatin99": 10
    }
  },
  {
    "path": "src/main/java/tatracker/model/student/exceptions/StudentNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.model.student.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * Signals that the operation is unable to find the specified student."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": "public class StudentNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 1,
      "fatin99": 5
    }
  },
  {
    "path": "src/main/java/tatracker/model/tag/Tag.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * Represents a Tag in the TA-Tracker."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 3,
      "-": 51
    }
  },
  {
    "path": "src/main/java/tatracker/model/util/SampleDataUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.ReadOnlyTaTracker;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.TaTracker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Matric;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.student.Rating;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Student;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * Contains utility methods for populating {@code TaTracker} with sample data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static Student[] getSampleStudents() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return new Student[] {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            new Student(new Matric(\"A0187945J\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                    new Name(\"Alex Yeoh\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                    new Phone(\"87438807\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                    new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                    new Rating(4),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            new Student(new Matric(\"A0181137L\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                    new Name(\"Bernice Yu\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                    new Phone(\"99272758\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                    new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                    new Rating(1),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            new Student(new Matric(\"A0187565N\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                    new Name(\"Charlotte Oliveiro\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                    new Phone(\"93210283\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                    new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                    new Rating(5),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            new Student(new Matric(\"A0186153P\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                    new Name(\"David Li\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                    new Phone(\"91031282\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                    new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                    new Rating(3),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"family\")),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            new Student(new Matric(\"A0180474R\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                    new Name(\"Irfan Ibrahim\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                    new Phone(\"92492021\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                    new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                    new Rating(2),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            new Student(new Matric(\"A0187613T\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                    new Name(\"Roy Balakrishnan\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                    new Phone(\"92624417\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                    new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                    new Rating(4),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"colleagues\")),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            new Student(new Matric(\"A0195558H\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                    new Name(\"Jeffry Lum\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                    new Phone(\"65162727\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                    new Email(\"Jeffry@u.nus.edu\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                    new Rating(5),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"tutors\"))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public static ReadOnlyTaTracker getSampleTaTracker() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        TaTracker sampleAb \u003d new TaTracker();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        for (Student sampleStudent : getSampleStudents()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            sampleAb.addStudent(sampleStudent);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 12,
      "PotatoCombat": 36,
      "fatin99": 4,
      "-": 33
    }
  },
  {
    "path": "src/main/java/tatracker/storage/JsonAdaptedGroup.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "package tatracker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.group.Group;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.group.GroupType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": " * Jackson-friendly version of {@link Group}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "class JsonAdaptedGroup {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Group\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDENTS \u003d \"Student list contains duplicate student(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private final String id;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private final List\u003cJsonAdaptedStudent\u003e students \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Constructs a {@code JsonAdaptedGroup} with the given group details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public JsonAdaptedGroup(@JsonProperty(\"id\") String id,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                            @JsonProperty(\"type\") String type,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                            @JsonProperty(\"students\") List\u003cJsonAdaptedStudent\u003e students) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (students !\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            this.students.addAll(students);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Converts a given {@code Group} into this class for Jackson use."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public JsonAdaptedGroup(Group source) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        id \u003d source.getIdentifier();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        type \u003d source.getGroupType().name();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        students.addAll(source.getStudentList()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .map(JsonAdaptedStudent::new)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Converts this Jackson-friendly adapted group object into the model\u0027s {@code Group} object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted group."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public Group toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // \u003d\u003d\u003d\u003d ID \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (id \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Group id\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // \u003d\u003d\u003d\u003d Type \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (type \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Group type\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // TODO: is valid group type"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        final GroupType modelGroupType \u003d GroupType.valueOf(type);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // \u003d\u003d\u003d\u003d Students \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        final List\u003cStudent\u003e modelStudents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        for (JsonAdaptedStudent jsonAdaptedStudent : students) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            Student student \u003d jsonAdaptedStudent.toModelType();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            if (modelStudents.contains(student)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                throw new IllegalArgumentException(MESSAGE_DUPLICATE_STUDENTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            modelStudents.add(student);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // \u003d\u003d\u003d\u003d Build \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Group group \u003d new Group(id, modelGroupType);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        modelStudents.forEach(group::addStudent);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return group;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PotatoCombat": 88
    }
  },
  {
    "path": "src/main/java/tatracker/storage/JsonAdaptedModule.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "package tatracker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.group.Group;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.session.Session;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": " * Jackson-friendly version of {@link Module}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "class JsonAdaptedModule {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Module\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SESSIONS \u003d \"Session list contains duplicate session(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_GROUPS \u003d \"Group list contains duplicate group(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private final String id;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private final List\u003cJsonAdaptedSession\u003e sessions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private final List\u003cJsonAdaptedGroup\u003e groups \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Constructs a {@code JsonAdaptedModule} with the given module details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public JsonAdaptedModule(@JsonProperty(\"id\") String id,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                             @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                             @JsonProperty(\"sessions\") List\u003cJsonAdaptedSession\u003e sessions,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                             @JsonProperty(\"groups\") List\u003cJsonAdaptedGroup\u003e groups) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (sessions !\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            this.sessions.addAll(sessions);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (groups !\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            this.groups.addAll(groups);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Converts a given {@code Module} into this class for Jackson use."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public JsonAdaptedModule(Module source) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        id \u003d source.getIdentifier();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        name \u003d source.getName();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        sessions.addAll(source.getSessionList().stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .map(JsonAdaptedSession::new)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        groups.addAll(source.getGroupList().stream()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .map(JsonAdaptedGroup::new)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Converts this Jackson-friendly adapted module object into the model\u0027s {@code Module} object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted module."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public Module toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // \u003d\u003d\u003d\u003d ID \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (id \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Module id\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // \u003d\u003d\u003d\u003d Name \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Module name\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // \u003d\u003d\u003d\u003d Done Sessions \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        final List\u003cSession\u003e modelDoneSessions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        for (JsonAdaptedSession jsonAdaptedSession : sessions) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            Session doneSession \u003d jsonAdaptedSession.toModelType();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            if (modelDoneSessions.contains(doneSession)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                throw new IllegalArgumentException(MESSAGE_DUPLICATE_SESSIONS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            modelDoneSessions.add(doneSession);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // \u003d\u003d\u003d\u003d Groups \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        final List\u003cGroup\u003e modelGroups \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        for (JsonAdaptedGroup jsonAdaptedGroup : groups) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            Group group \u003d jsonAdaptedGroup.toModelType();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            if (modelGroups.contains(group)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                throw new IllegalArgumentException(MESSAGE_DUPLICATE_GROUPS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            modelGroups.add(group);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // \u003d\u003d\u003d\u003d Build \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Module module \u003d new Module(id, name);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        modelDoneSessions.forEach(module::addDoneSession);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        modelGroups.forEach(module::addGroup);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return module;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PotatoCombat": 105
    }
  },
  {
    "path": "src/main/java/tatracker/storage/JsonAdaptedSession.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "package tatracker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.session.Session;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.session.SessionType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": " * Jackson-friendly version of {@link Session}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "class JsonAdaptedSession {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Session\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private static final String MESSAGE_INVALID_DATE \u003d \"Dates should be in yyyy-MM-dd format\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private static final String MESSAGE_INVALID_TIME \u003d \"Times should be in HH:mm format\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private static final String MESSAGE_INVALID_DATE_TIME \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            \"Session\u0027s %s date time is invalid!\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + MESSAGE_INVALID_DATE + \"\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + MESSAGE_INVALID_TIME;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private String startDateTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private String endDateTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private String moduleId;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private boolean isRecurring;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Constructs a {@code JsonAdaptedModule} with the given module details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public JsonAdaptedSession(@JsonProperty(\"start\") String startDateTime,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                              @JsonProperty(\"end\") String endDateTime,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                              @JsonProperty(\"type\") String type,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                              @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                              @JsonProperty(\"moduleId\") String moduleId,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                              @JsonProperty(\"isDone\") boolean isDone,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                              @JsonProperty(\"isRecurring\") boolean isRecurring) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.moduleId \u003d moduleId;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.isRecurring \u003d isRecurring;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Converts a given {@code Module} into this class for Jackson use."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public JsonAdaptedSession(Session source) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        startDateTime \u003d source.getStartDateTime().toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        endDateTime \u003d source.getEndDateTime().toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        type \u003d source.getSessionType().name();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        description \u003d source.getDescription();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        moduleId \u003d source.getModuleCode();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        isDone \u003d source.getIsDone();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        isRecurring \u003d source.getIsRecurring();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Converts this Jackson-friendly adapted module object into the model\u0027s {@code Module} object."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted module."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public Session toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // \u003d\u003d\u003d\u003d Start Date Time \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (startDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"start date time\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        final LocalDateTime modelStartDateTime;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            modelStartDateTime \u003d LocalDateTime.parse(startDateTime);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        } catch (DateTimeParseException dtpe) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new IllegalValueException(String.format(MESSAGE_INVALID_DATE_TIME, \"start\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // \u003d\u003d\u003d\u003d End Date Time \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (endDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"end date time\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        final LocalDateTime modelEndDateTime;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            modelEndDateTime \u003d LocalDateTime.parse(endDateTime);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        } catch (DateTimeParseException dtpe) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new IllegalValueException(String.format(MESSAGE_INVALID_DATE_TIME, \"end\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // \u003d\u003d\u003d\u003d Type \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (type \u003d\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Session type\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        final SessionType modelSessionType \u003d SessionType.valueOf(type);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // \u003d\u003d\u003d\u003d Description \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"description\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // \u003d\u003d\u003d\u003d Module Id \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (moduleId \u003d\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Module id\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Session session \u003d new Session(modelStartDateTime, modelEndDateTime, modelSessionType,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                isRecurring, moduleId, description);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            session.done();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return session;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PotatoCombat": 128
    }
  },
  {
    "path": "src/main/java/tatracker/storage/JsonAdaptedStudent.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Matric;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.student.Rating;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Student;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * Jackson-friendly version of {@link Student}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatin99"
        },
        "content": "class JsonAdaptedStudent {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Student\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private final String matric;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private final int rating;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Constructs a {@code JsonAdaptedStudent} with the given student details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public JsonAdaptedStudent(@JsonProperty(\"matric\") String matric,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                              @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                              @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                              @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                              @JsonProperty(\"rating\") int rating,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                              @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.matric \u003d matric;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Converts a given {@code Student} into this class for Jackson use."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public JsonAdaptedStudent(Student source) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        matric \u003d source.getMatric().value;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        rating \u003d source.getRating().value;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Converts this Jackson-friendly adapted student object into the model\u0027s {@code Student} object."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted student."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public Student toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // \u003d\u003d\u003d\u003d Matric \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (matric \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Matric.class.getSimpleName()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!Matric.isValidMatric(matric)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new IllegalValueException(Matric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        final Matric modelMatric \u003d new Matric(matric);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // \u003d\u003d\u003d\u003d Name \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // \u003d\u003d\u003d\u003d Phone \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // \u003d\u003d\u003d\u003d Email \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // \u003d\u003d\u003d\u003d Rating \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!Rating.isValidRating(rating)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new IllegalValueException(Rating.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        final Rating modelRating \u003d new Rating(rating);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // \u003d\u003d\u003d\u003d Tags \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            modelTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return new Student(modelMatric, modelName, modelPhone, modelEmail, modelRating, modelTags);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 8,
      "PotatoCombat": 35,
      "fatin99": 10,
      "-": 73
    }
  },
  {
    "path": "src/main/java/tatracker/storage/JsonAdaptedTag.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/tatracker/storage/JsonSerializableTaTracker.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.ReadOnlyTaTracker;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.TaTracker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.session.Session;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * An Immutable TaTracker that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "@JsonRootName(value \u003d \"tatracker\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "class JsonSerializableTaTracker {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SESSIONS \u003d \"Session list contains duplicate session(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULES \u003d \"Module list contains duplicate module(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private final List\u003cJsonAdaptedSession\u003e sessions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private final List\u003cJsonAdaptedModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Constructs a {@code JsonSerializableTaTracker} with the given lists."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public JsonSerializableTaTracker(@JsonProperty(\"sessions\") List\u003cJsonAdaptedSession\u003e sessions,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                                     @JsonProperty(\"modules\") List\u003cJsonAdaptedModule\u003e modules) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.sessions.addAll(sessions);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.modules.addAll(modules);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Converts a given {@code ReadOnlyTaTracker} into this class for Jackson use."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableTaTracker}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public JsonSerializableTaTracker(ReadOnlyTaTracker source) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        sessions.addAll(source.getSessionList()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .map(JsonAdaptedSession::new)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        modules.addAll(source.getModuleList()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .map(JsonAdaptedModule::new)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Converts this Ta Tracker into the model\u0027s {@code TaTracker} object."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public TaTracker toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // \u003d\u003d\u003d\u003d Sessions \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        final List\u003cSession\u003e modelSessions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        for (JsonAdaptedSession jsonAdaptedSession : sessions) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            Session session \u003d jsonAdaptedSession.toModelType();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            if (modelSessions.contains(session)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                throw new IllegalArgumentException(MESSAGE_DUPLICATE_SESSIONS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            modelSessions.add(session);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // \u003d\u003d\u003d\u003d Modules \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        final List\u003cModule\u003e modelModules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        for (JsonAdaptedModule jsonAdaptedModule : modules) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            Module module \u003d jsonAdaptedModule.toModelType();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            if (modelModules.contains(module)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                throw new IllegalArgumentException(MESSAGE_DUPLICATE_MODULES);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            modelModules.add(module);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // \u003d\u003d\u003d\u003d Build \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        TaTracker taTracker \u003d new TaTracker();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        modelSessions.forEach(taTracker::addSession);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        modelModules.forEach(taTracker::addModule);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return taTracker;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 12,
      "PotatoCombat": 44,
      "-": 33
    }
  },
  {
    "path": "src/main/java/tatracker/storage/JsonTaTrackerStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.ReadOnlyTaTracker;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * A class to access TaTracker data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "public class JsonTaTrackerStorage implements TaTrackerStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonTaTrackerStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public JsonTaTrackerStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public Path getTaTrackerFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public Optional\u003cReadOnlyTaTracker\u003e readTaTracker() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return readTaTracker(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Similar to {@link #readTaTracker()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public Optional\u003cReadOnlyTaTracker\u003e readTaTracker(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        Optional\u003cJsonSerializableTaTracker\u003e jsonTaTracker \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                filePath, JsonSerializableTaTracker.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        if (!jsonTaTracker.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            return Optional.of(jsonTaTracker.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void saveTaTracker(ReadOnlyTaTracker taTracker) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        saveTaTracker(taTracker, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Similar to {@link #saveTaTracker(ReadOnlyTaTracker)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void saveTaTracker(ReadOnlyTaTracker taTracker, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        requireNonNull(taTracker);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableTaTracker(taTracker), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 26,
      "-": 54
    }
  },
  {
    "path": "src/main/java/tatracker/storage/JsonUserPrefsStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/tatracker/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.ReadOnlyTaTracker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "public interface Storage extends TaTrackerStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    Path getTaTrackerFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    Optional\u003cReadOnlyTaTracker\u003e readTaTracker() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    void saveTaTracker(ReadOnlyTaTracker taTracker) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 9,
      "-": 23
    }
  },
  {
    "path": "src/main/java/tatracker/storage/StorageManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.ReadOnlyTaTracker;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * Manages storage of TaTracker data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private TaTrackerStorage taTrackerStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public StorageManager(TaTrackerStorage taTrackerStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        this.taTrackerStorage \u003d taTrackerStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TaTracker methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public Path getTaTrackerFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return taTrackerStorage.getTaTrackerFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public Optional\u003cReadOnlyTaTracker\u003e readTaTracker() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return readTaTracker(taTrackerStorage.getTaTrackerFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public Optional\u003cReadOnlyTaTracker\u003e readTaTracker(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return taTrackerStorage.readTaTracker(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void saveTaTracker(ReadOnlyTaTracker taTracker) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        saveTaTracker(taTracker, taTrackerStorage.getTaTrackerFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void saveTaTracker(ReadOnlyTaTracker taTracker, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        taTrackerStorage.saveTaTracker(taTracker, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 21,
      "-": 56
    }
  },
  {
    "path": "src/main/java/tatracker/storage/TaTrackerStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.ReadOnlyTaTracker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.TaTracker;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * Represents a storage for {@link TaTracker}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "public interface TaTrackerStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    Path getTaTrackerFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Returns TaTracker data as a {@link ReadOnlyTaTracker}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    Optional\u003cReadOnlyTaTracker\u003e readTaTracker() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * @see #getTaTrackerFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    Optional\u003cReadOnlyTaTracker\u003e readTaTracker(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Saves the given {@link ReadOnlyTaTracker} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * @param taTracker cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    void saveTaTracker(ReadOnlyTaTracker taTracker) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * @see #saveTaTracker(ReadOnlyTaTracker)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    void saveTaTracker(ReadOnlyTaTracker taTracker, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 16,
      "-": 30
    }
  },
  {
    "path": "src/main/java/tatracker/storage/UserPrefsStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * Represents a storage for {@link tatracker.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Saves the given {@link tatracker.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/tatracker/ui/ClaimsListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package tatracker.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.model.session.Session;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatin99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * Panel containing the list of sessions."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatin99"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": "public class ClaimsListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private static final String FXML \u003d \"ClaimsListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ClaimsListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private ListView\u003cSession\u003e claimsListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public ClaimsListPanel(ObservableList\u003cSession\u003e claimsList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        claimsListView.setItems(claimsList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        claimsListView.setCellFactory(listView -\u003e new ClaimsListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Session} using a {@code ClaimsCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    class ClaimsListViewCell extends ListCell\u003cSession\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        protected void updateItem(Session claims, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            super.updateItem(claims, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            if (empty || claims \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                setGraphic(new SessionCard(claims, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatin99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatin99": 45
    }
  },
  {
    "path": "src/main/java/tatracker/ui/CommandBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "         * @see tatracker.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 5,
      "-": 72
    }
  },
  {
    "path": "src/main/java/tatracker/ui/GroupCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package tatracker.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.model.group.Group;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * An UI component that displays information of a {@code Group}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": "public class GroupCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private static final String FXML \u003d \"GroupListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public final Group group;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private Label type;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public GroupCard(Group group, int displayedIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        this.group \u003d group;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        name.setText(group.getIdentifier());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        type.setText(group.getGroupType().toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        if (!(other instanceof GroupCard)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        GroupCard card \u003d (GroupCard) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                \u0026\u0026 group.equals(card.group);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fatin99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatin99": 60
    }
  },
  {
    "path": "src/main/java/tatracker/ui/GroupListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package tatracker.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.model.group.Group;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatin99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * Panel containing the list of groups."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatin99"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": "public class GroupListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private static final String FXML \u003d \"GroupListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(GroupListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private ListView\u003cGroup\u003e groupListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public GroupListPanel(ObservableList\u003cGroup\u003e groupList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        groupListView.setItems(groupList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        groupListView.setCellFactory(listView -\u003e new GroupListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Group} using a {@code GroupCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    class GroupListViewCell extends ListCell\u003cGroup\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        protected void updateItem(Group group, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            super.updateItem(group, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            if (empty || group \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                setGraphic(new GroupCard(group, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatin99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatin99": 45
    }
  },
  {
    "path": "src/main/java/tatracker/ui/HelpWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s2-cs2103t-w17-4.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 3,
      "-": 99
    }
  },
  {
    "path": "src/main/java/tatracker/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private StudentListPanel studentListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private GroupListPanel groupListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private ModuleListPanel moduleListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private ModuleListPanelCopy moduleListPanelCopy;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private SessionListPanel sessionListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private ClaimsListPanel claimsListPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private StackPane studentListPanelPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private StackPane groupListPanelPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private StackPane moduleListPanelPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private StackPane moduleListPanelPlaceholderCopy;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private StackPane sessionListPanelPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private StackPane claimsListPanelPlaceholder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        studentListPanel \u003d new StudentListPanel(logic.getFilteredStudentList());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        studentListPanelPlaceholder.getChildren().add(studentListPanel.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        groupListPanel \u003d new GroupListPanel(logic.getFilteredGroupList());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        groupListPanelPlaceholder.getChildren().add(groupListPanel.getRoot());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        moduleListPanel \u003d new ModuleListPanel(logic.getFilteredModuleList());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        moduleListPanelPlaceholder.getChildren().add(moduleListPanel.getRoot());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        moduleListPanelCopy \u003d new ModuleListPanelCopy(logic.getFilteredModuleList());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        moduleListPanelPlaceholderCopy.getChildren().add(moduleListPanelCopy.getRoot());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        sessionListPanel \u003d new SessionListPanel(logic.getFilteredSessionList());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        sessionListPanelPlaceholder.getChildren().add(sessionListPanel.getRoot());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        claimsListPanel \u003d new ClaimsListPanel(logic.getFilteredDoneSessionList());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        claimsListPanelPlaceholder.getChildren().add(claimsListPanel.getRoot());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getTaTrackerFilePath());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public StudentListPanel getStudentListPanel() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return studentListPanel;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public GroupListPanel getGroupListPanel() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return groupListPanel;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public ModuleListPanel getModuleListPanel() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return moduleListPanel;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public ModuleListPanelCopy getModuleListPanelCopy() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return moduleListPanelCopy;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public SessionListPanel getSessionListPanel() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return sessionListPanel;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public ClaimsListPanel getClaimsListPanel() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return claimsListPanel;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * @see tatracker.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 9,
      "fatin99": 57,
      "-": 182
    }
  },
  {
    "path": "src/main/java/tatracker/ui/ModuleCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package tatracker.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * An UI component that displays information of a {@code Module}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": "public class ModuleCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private static final String FXML \u003d \"ModuleListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public final Module module;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private Label identifier;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public ModuleCard(Module module, int displayedIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        name.setText(module.getName());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        identifier.setText(module.getIdentifier());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        if (!(other instanceof ModuleCard)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        ModuleCard card \u003d (ModuleCard) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                \u0026\u0026 module.equals(card.module);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fatin99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatin99": 60
    }
  },
  {
    "path": "src/main/java/tatracker/ui/ModuleListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package tatracker.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatin99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * Panel containing the list of modules."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatin99"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": "public class ModuleListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private static final String FXML \u003d \"ModuleListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ModuleListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private ListView\u003cModule\u003e moduleListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public ModuleListPanel(ObservableList\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        moduleListView.setItems(moduleList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        moduleListView.setCellFactory(listView -\u003e new ModuleListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Module} using a {@code ModuleCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    class ModuleListViewCell extends ListCell\u003cModule\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        protected void updateItem(Module module, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            super.updateItem(module, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            if (empty || module \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                setGraphic(new ModuleCard(module, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatin99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatin99": 46
    }
  },
  {
    "path": "src/main/java/tatracker/ui/ModuleListPanelCopy.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package tatracker.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatin99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * Panel containing the list of modules."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatin99"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": "public class ModuleListPanelCopy extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private static final String FXML \u003d \"ModuleListPanelCopy.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ModuleListPanelCopy.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private ListView\u003cModule\u003e moduleListViewCopy;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public ModuleListPanelCopy(ObservableList\u003cModule\u003e moduleListCopy) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        moduleListViewCopy.setItems(moduleListCopy);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        moduleListViewCopy.setCellFactory(listView -\u003e new ModuleListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Module} using a {@code ModuleCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    class ModuleListViewCell extends ListCell\u003cModule\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        protected void updateItem(Module module, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            super.updateItem(module, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            if (empty || module \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                setGraphic(new ModuleCard(module, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatin99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatin99": 46
    }
  },
  {
    "path": "src/main/java/tatracker/ui/ResultDisplay.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/tatracker/ui/SessionCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package tatracker.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.model.session.Session;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * An UI component that displays information of a {@code Session}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatin99"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": "public class SessionCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private static final String FXML \u003d \"SessionListCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public final Session session;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private Label type;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private Label time;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private Label module;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private final DateTimeFormatter timeFormat \u003d DateTimeFormatter.ofPattern(\"hh:mma\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private final DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"MMM d\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public SessionCard(Session session, int displayedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        this.session \u003d session;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        type.setText(session.getSessionType().toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        date.setText(session.getStartDateTime().format(dateFormat));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        time.setText(session.getStartDateTime().format(timeFormat) + \" - \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                + session.getEndDateTime().format(timeFormat));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        module.setText(session.getModuleCode());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        description.setText(session.getDescription());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        if (!(other instanceof SessionCard)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        SessionCard card \u003d (SessionCard) other;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                \u0026\u0026 session.equals(card.session);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fatin99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatin99": 75
    }
  },
  {
    "path": "src/main/java/tatracker/ui/SessionListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package tatracker.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.model.session.Session;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatin99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * Panel containing the list of sessions."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatin99"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": "public class SessionListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private static final String FXML \u003d \"SessionListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(SessionListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private ListView\u003cSession\u003e sessionListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public SessionListPanel(ObservableList\u003cSession\u003e sessionList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        sessionListView.setItems(sessionList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        sessionListView.setCellFactory(listView -\u003e new SessionListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Session} using a {@code SessionCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    class SessionListViewCell extends ListCell\u003cSession\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        protected void updateItem(Session session, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            super.updateItem(session, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            if (empty || session \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                setGraphic(new SessionCard(session, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatin99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatin99": 45
    }
  },
  {
    "path": "src/main/java/tatracker/ui/StatusBarFooter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/tatracker/ui/StudentCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Student;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * An UI component that displays information of a {@code Student}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatin99"
        },
        "content": "public class StudentCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private static final String FXML \u003d \"StudentListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public final Student student;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private Label matric;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public StudentCard(Student student, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        this.student \u003d student;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        name.setText(student.getName().fullName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        phone.setText(student.getPhone().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        email.setText(student.getEmail().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        matric.setText(student.getMatric().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        student.getTags().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        if (!(other instanceof StudentCard)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        StudentCard card \u003d (StudentCard) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                \u0026\u0026 student.equals(card.student);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 2,
      "fatin99": 16,
      "-": 56
    }
  },
  {
    "path": "src/main/java/tatracker/ui/StudentListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * Panel containing the list of students."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": "public class StudentListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private static final String FXML \u003d \"StudentListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(StudentListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private ListView\u003cStudent\u003e studentListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public StudentListPanel(ObservableList\u003cStudent\u003e studentList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        studentListView.setItems(studentList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        studentListView.setCellFactory(listView -\u003e new StudentListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Student} using a {@code StudentCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    class StudentListViewCell extends ListCell\u003cStudent\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        protected void updateItem(Student student, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            super.updateItem(student, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            if (empty || student \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                setGraphic(new StudentCard(student, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 3,
      "fatin99": 14,
      "-": 29
    }
  },
  {
    "path": "src/main/java/tatracker/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/tatracker/ui/UiManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/icon.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 5,
      "fatin99": 1,
      "-": 80
    }
  },
  {
    "path": "src/main/java/tatracker/ui/UiPart.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/resources/view/ClaimsListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    \u003cListView fx:id\u003d\"claimsListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c/VBox\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "fatin99": 9
    }
  },
  {
    "path": "src/main/resources/view/GroupListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"50\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            \u003cLabel fx:id\u003d\"type\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$type\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "fatin99": 32
    }
  },
  {
    "path": "src/main/resources/view/GroupListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    \u003cListView fx:id\u003d\"groupListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "fatin99": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": "         title\u003d\"TA-Tracker App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e  \u003cicons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    \u003cImage url\u003d\"@/images/icon.png\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatin99"
        },
        "content": "               \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Statistics\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                  \u003citems\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                     \u003cMenuItem fx:id\u003d\"helpMenuItem1\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Statistics\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                  \u003c/items\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatin99"
        },
        "content": "               \u003c/Menu\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        \u003cTabPane prefHeight\u003d\"300.0\" prefWidth\u003d\"200.0\" tabClosingPolicy\u003d\"UNAVAILABLE\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatin99"
        },
        "content": "          \u003ctabs\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            \u003cTab fx:id\u003d\"studentListTab\" text\u003d\"Students\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fatin99"
        },
        "content": "              \u003ccontent\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                \u003cSplitPane dividerPositions\u003d\"0.6, 0.8\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                  \u003citems\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"moduleListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"groupListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"studentListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                  \u003c/items\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fatin99"
        },
        "content": "              \u003c/content\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            \u003c/Tab\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            \u003cTab fx:id\u003d\"sessionListTab\" text\u003d\"Sessions\"\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fatin99"
        },
        "content": "              \u003ccontent\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                \u003cStackPane fx:id\u003d\"sessionListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fatin99"
        },
        "content": "              \u003c/content\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            \u003c/Tab\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            \u003cTab fx:id\u003d\"claimsListTab\" text\u003d\"Claims\"\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fatin99"
        },
        "content": "               \u003ccontent\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                 \u003cSplitPane dividerPositions\u003d\"0.8\"\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                   \u003citems\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                     \u003cStackPane fx:id\u003d\"claimsListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                     \u003cStackPane fx:id\u003d\"moduleListPanelPlaceholderCopy\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                   \u003c/items\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                 \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fatin99"
        },
        "content": "               \u003c/content\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            \u003c/Tab\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fatin99"
        },
        "content": "          \u003c/tabs\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 1,
      "fatin99": 45,
      "-": 45
    }
  },
  {
    "path": "src/main/resources/view/ModuleListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"50\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            \u003cLabel fx:id\u003d\"identifier\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$identifier\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "fatin99": 32
    }
  },
  {
    "path": "src/main/resources/view/ModuleListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    \u003cListView fx:id\u003d\"moduleListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "fatin99": 8
    }
  },
  {
    "path": "src/main/resources/view/ModuleListPanelCopy.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    \u003cListView fx:id\u003d\"moduleListViewCopy\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "fatin99": 8
    }
  },
  {
    "path": "src/main/resources/view/SessionListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                \u003cLabel fx:id\u003d\"type\" text\u003d\"\\$type\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            \u003cLabel fx:id\u003d\"time\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$time\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            \u003cLabel fx:id\u003d\"module\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$module\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "fatin99": 35
    }
  },
  {
    "path": "src/main/resources/view/SessionListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    \u003cListView fx:id\u003d\"sessionListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "fatin99": 8
    }
  },
  {
    "path": "src/main/resources/view/StudentListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatin99"
        },
        "content": "      \u003cLabel fx:id\u003d\"matric\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$matric\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "fatin99": 1,
      "-": 35
    }
  },
  {
    "path": "src/main/resources/view/StudentListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": "  \u003cListView fx:id\u003d\"studentListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "fatin99": 1,
      "-": 7
    }
  },
  {
    "path": "src/test/java/tatracker/AppParametersTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/tatracker/commons/core/ConfigTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/tatracker/commons/core/VersionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/tatracker/commons/core/index/IndexTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        final Index fifthStudentIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertTrue(fifthStudentIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertTrue(fifthStudentIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertTrue(fifthStudentIndex.equals(fifthStudentIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertFalse(fifthStudentIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertFalse(fifthStudentIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertFalse(fifthStudentIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 2,
      "fatin99": 7,
      "-": 51
    }
  },
  {
    "path": "src/test/java/tatracker/commons/util/AppUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/icon.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 2,
      "fatin99": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/tatracker/commons/util/CollectionUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/tatracker/commons/util/ConfigUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/tatracker/commons/util/FileUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/tatracker/commons/util/JsonUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/tatracker/commons/util/StringUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/tatracker/logic/LogicManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.GROUP_DESC_T04;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.MATRIC_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.MODULE_DESC_CS2030;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.VALID_GROUP_T04;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.VALID_MODULE_CS2030;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.testutil.TypicalStudents.AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.commands.student.AddStudentCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.Model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.ModelManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.ReadOnlyTaTracker;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.UserPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.group.Group;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.module.Module;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Student;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.storage.JsonTaTrackerStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.storage.StorageManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private Module module;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private Group group;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        JsonTaTrackerStorage taTrackerStorage \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                new JsonTaTrackerStorage(temporaryFolder.resolve(\"tatracker.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        StorageManager storage \u003d new StorageManager(taTrackerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        module \u003d new Module(VALID_MODULE_CS2030);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        group \u003d new Group(VALID_GROUP_T04);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        module.addGroup(group);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        model.addModule(module);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // Setup LogicManager with JsonTaTrackerIoExceptionThrowingStub"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        JsonTaTrackerStorage taTrackerStorage \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                new JsonTaTrackerIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionTaTracker.json\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        StorageManager storage \u003d new StorageManager(taTrackerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // Setup Model"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Module expectedModule \u003d new Module(VALID_MODULE_CS2030);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Group expectedGroup \u003d new Group(VALID_GROUP_T04);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        expectedModule.addGroup(expectedGroup);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        expectedModel.addModule(expectedModule);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        String addCommand \u003d AddStudentCommand.COMMAND_WORD + MATRIC_DESC_AMY + MODULE_DESC_CS2030 + GROUP_DESC_T04"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        expectedModel.addStudent(expectedStudent, expectedGroup, expectedModule);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void getFilteredStudentList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredStudentList().remove(0));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTaTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private static class JsonTaTrackerIoExceptionThrowingStub extends JsonTaTrackerStorage {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        private JsonTaTrackerIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        public void saveTaTracker(ReadOnlyTaTracker taTracker, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 33,
      "PotatoCombat": 32,
      "fatin99": 5,
      "-": 120
    }
  },
  {
    "path": "src/test/java/tatracker/logic/commands/ClearCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.testutil.TypicalStudents.getTypicalTaTracker;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.TaTracker;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void execute_emptyTaTracker_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void execute_nonEmptyTaTracker_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalTaTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalTaTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        expectedModel.setTaTracker(new TaTracker());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 12,
      "-": 20
    }
  },
  {
    "path": "src/test/java/tatracker/logic/commands/CommandResultTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 1,
      "-": 53
    }
  },
  {
    "path": "src/test/java/tatracker/logic/commands/CommandTestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_GROUP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_MATRIC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.commands.student.EditStudentCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.TaTracker;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Student;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static final String VALID_MATRIC_AMY \u003d \"A0123456J\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static final String VALID_MATRIC_BOB \u003d \"A0987654K\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final int VALID_RATING_AMY \u003d 5;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final int VALID_RATING_BOB \u003d 2;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final String VALID_MODULE_CS2030 \u003d \"CS2030\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final String VALID_MODULE_CS2040 \u003d \"CS2040\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final String VALID_GROUP_T04 \u003d \"T04\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final String VALID_GROUP_L08 \u003d \"L08\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static final String MATRIC_DESC_AMY \u003d \" \" + PREFIX_MATRIC + VALID_MATRIC_AMY;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static final String MATRIC_DESC_BOB \u003d \" \" + PREFIX_MATRIC + VALID_MATRIC_BOB;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final String RATING_DESC_AMY \u003d \" \" + PREFIX_RATING + VALID_MATRIC_AMY;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final String RATING_DESC_BOB \u003d \" \" + PREFIX_RATING + VALID_MATRIC_BOB;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final String MODULE_DESC_CS2030 \u003d \" \" + PREFIX_MODULE + VALID_MODULE_CS2030;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final String MODULE_DESC_CS2040 \u003d \" \" + PREFIX_MODULE + VALID_MODULE_CS2040;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final String GROUP_DESC_T04 \u003d \" \" + PREFIX_GROUP + VALID_GROUP_T04;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final String GROUP_DESC_L08 \u003d \" \" + PREFIX_GROUP + VALID_GROUP_L08;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static final String INVALID_MATRIC_DESC \u003d \" \" + PREFIX_MATRIC + \"!0123456\u0026\"; // \u0027\u0026\u0027 not allow in matrics"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final String INVALID_RATING_DESC \u003d \" \" + PREFIX_RATING + \"!0123456\u0026\"; // rating"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final EditStudentCommand.EditStudentDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final EditStudentCommand.EditStudentDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        DESC_AMY \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                .withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                .withMatric(VALID_MATRIC_AMY)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        DESC_BOB \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                .withMatric(VALID_MATRIC_BOB)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * - the ta-tracker, filtered student list and selected student in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        TaTracker expectedTaTracker \u003d new TaTracker(actualModel.getTaTracker());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        List\u003cStudent\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredStudentList());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        assertEquals(expectedTaTracker, actualModel.getTaTracker());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredStudentList());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the student at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * {@code model}\u0027s ta-tracker."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static void showStudentAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Student student \u003d model.getFilteredStudentList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        final String[] splitName \u003d student.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        //model.updateFilteredStudentList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertEquals(1, model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 18,
      "PotatoCombat": 20,
      "fatin99": 22,
      "-": 89
    }
  },
  {
    "path": "src/test/java/tatracker/logic/commands/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import static tatracker.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import static tatracker.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import static tatracker.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import static tatracker.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import static tatracker.testutil.TypicalStudents.getTypicalTaTracker;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import tatracker.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import tatracker.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import tatracker.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import tatracker.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import tatracker.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import tatracker.model.student.Student;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // private Model model \u003d new ModelManager(getTypicalTaTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     Student studentToDelete \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_STUDENT_SUCCESS, studentToDelete);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     ModelManager expectedModel \u003d new ModelManager(model.getTaTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     expectedModel.deleteStudent(studentToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // /*"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     Student studentToDelete \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_STUDENT_SUCCESS, studentToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     Model expectedModel \u003d new ModelManager(model.getTaTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     expectedModel.deleteStudent(studentToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     //showNoStudent(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // }*/"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // /*"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     Index outOfBoundIndex \u003d INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     // ensures that outOfBoundIndex is still in bounds of ta-tracker list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTaTracker().getStudentList().size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // }*/"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // public void equals() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_STUDENT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     // different student -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //  * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //  *//*"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // private void showNoStudent(Model model) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     model.updateFilteredStudentList(p -\u003e false);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     assertTrue(model.getFilteredStudentList().isEmpty());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // }*/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 1,
      "PotatoCombat": 100,
      "-": 9
    }
  },
  {
    "path": "src/test/java/tatracker/logic/commands/ExitCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/tatracker/logic/commands/FindCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.testutil.TypicalStudents.getTypicalTaTracker;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTaTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalTaTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void execute_zeroKeywords_noStudentFound() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_STUDENTS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        expectedModel.updateFilteredStudentList(predicate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredStudentList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void execute_multipleKeywords_multipleStudentsFound() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_STUDENTS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        expectedModel.updateFilteredStudentList(predicate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredStudentList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 12,
      "fatin99": 9,
      "-": 58
    }
  },
  {
    "path": "src/test/java/tatracker/logic/commands/HelpCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/tatracker/logic/commands/ListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.testutil.TypicalStudents.getTypicalTaTracker;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        model \u003d new ModelManager(getTypicalTaTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getTaTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 10,
      "fatin99": 1,
      "-": 27
    }
  },
  {
    "path": "src/test/java/tatracker/logic/commands/student/AddStudentCommandIntegrationTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package tatracker.logic.commands.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.VALID_GROUP_T04;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.VALID_MODULE_CS2030;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.testutil.TypicalStudents.getTypicalTaTracker;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.group.Group;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.module.Module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Student;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddStudentCommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "public class AddStudentCommandIntegrationTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private Group testGroup;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private Module testModule;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        model \u003d new ModelManager(getTypicalTaTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        testModule \u003d new Module(VALID_MODULE_CS2030);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        testGroup \u003d new Group(VALID_GROUP_T04);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        testModule.addGroup(testGroup);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        model.addModule(testModule);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void execute_newStudent_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Student validStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // TODO: Fix Immutability of modules list when using copy constructor [ModelManager]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalTaTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Module expectedModule \u003d new Module(VALID_MODULE_CS2030);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Group expectedGroup \u003d new Group(VALID_GROUP_T04);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        expectedModule.addGroup(expectedGroup);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        expectedModel.addModule(expectedModule);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        expectedModel.addStudent(validStudent, expectedGroup, expectedModule);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        assertCommandSuccess(new AddStudentCommand(validStudent, testGroup, testModule), model,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                String.format(AddStudentCommand.MESSAGE_SUCCESS, validStudent, testModule, testGroup), expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void execute_duplicateStudent_throwsCommandException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Student student \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        model.addStudent(student, testGroup, testModule);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        assertCommandFailure(new AddStudentCommand(student, testGroup, testModule),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                model, AddStudentCommand.MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 7,
      "PotatoCombat": 32,
      "fatin99": 7,
      "-": 24
    }
  },
  {
    "path": "src/test/java/tatracker/logic/commands/student/AddStudentCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package tatracker.logic.commands.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.ModelStub;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.ModelStub.ModelStubWithStudent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.group.Group;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.module.Module;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Student;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "public class AddStudentCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private Student testStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private Group testGroup \u003d new Group(\"W17-4\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private Module testModule \u003d new Module(\"CS2103T\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void constructor_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddStudentCommand(null, testGroup, testModule));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void constructor_nullGroup_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddStudentCommand(testStudent, null, testModule));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void constructor_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddStudentCommand(testStudent, testGroup, null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void execute_studentAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        ModelStubAcceptingStudentAdded modelStub \u003d new ModelStubAcceptingStudentAdded();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Student validStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        CommandResult commandResult \u003d new AddStudentCommand(validStudent, testGroup, testModule).execute(modelStub);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        assertEquals(String.format(AddStudentCommand.MESSAGE_SUCCESS, validStudent, testModule, testGroup),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertEquals(Arrays.asList(validStudent), modelStub.studentsAdded);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void execute_duplicateStudent_throwsCommandException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Student validStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        AddStudentCommand addStudentCommand \u003d new AddStudentCommand(validStudent, testGroup, testModule);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithStudent(validStudent);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertThrows(CommandException.class, AddStudentCommand.MESSAGE_DUPLICATE_STUDENT, ()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            -\u003e addStudentCommand.execute(modelStub));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Student alice \u003d new StudentBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Student bob \u003d new StudentBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        AddStudentCommand addAliceCommand \u003d new AddStudentCommand(alice, testGroup, testModule);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        AddStudentCommand addBobCommand \u003d new AddStudentCommand(bob, testGroup, testModule);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        AddStudentCommand addAliceCommandCopy \u003d new AddStudentCommand(alice, testGroup, testModule);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 6,
      "PotatoCombat": 27,
      "fatin99": 14,
      "-": 37
    }
  },
  {
    "path": "src/test/java/tatracker/logic/commands/student/DeleteStudentCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.logic.commands.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import static tatracker.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import static tatracker.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import static tatracker.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import static tatracker.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import static tatracker.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import tatracker.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import tatracker.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import tatracker.model.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.testutil.TypicalStudents.getTypicalTaTracker;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * {@code DeleteStudentCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatin99"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatin99"
        },
        "content": "public class DeleteStudentCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTaTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     Student studentToDelete \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     DeleteStudentCommand deleteStudentCommand \u003d new DeleteStudentCommand(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     String expectedMessage \u003d String.format(DeleteStudentCommand.MESSAGE_DELETE_STUDENT_SUCCESS, studentToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     ModelManager expectedModel \u003d new ModelManager(model.getTaTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     expectedModel.deleteStudent(studentToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     assertCommandSuccess(deleteStudentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     DeleteStudentCommand deleteStudentCommand \u003d new DeleteStudentCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     assertCommandFailure(deleteStudentCommand,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     Student studentToDelete \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     DeleteStudentCommand deleteStudentCommand \u003d new DeleteStudentCommand(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     String expectedMessage \u003d String.format(DeleteStudentCommand.MESSAGE_DELETE_STUDENT_SUCCESS, studentToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     Model expectedModel \u003d new ModelManager(model.getTaTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     expectedModel.deleteStudent(studentToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     showNoStudent(expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     assertCommandSuccess(deleteStudentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     Index outOfBoundIndex \u003d INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     // ensures that outOfBoundIndex is still in bounds of ta-tracker list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTaTracker().getStudentList().size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     DeleteStudentCommand deleteStudentCommand \u003d new DeleteStudentCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     assertCommandFailure(deleteStudentCommand, model,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     DeleteStudentCommand deleteFirstCommand \u003d new DeleteStudentCommand(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     DeleteStudentCommand deleteSecondCommand \u003d new DeleteStudentCommand(INDEX_SECOND_STUDENT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     // same object -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     // same values -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     DeleteStudentCommand deleteFirstCommandCopy \u003d new DeleteStudentCommand(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     // different types -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     // null -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     // different student -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //  * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //  */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // private void showNoStudent(Model model) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     model.updateFilteredStudentList(p -\u003e false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     assertTrue(model.getFilteredStudentList().isEmpty());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fatin99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 4,
      "PotatoCombat": 93,
      "fatin99": 14
    }
  },
  {
    "path": "src/test/java/tatracker/logic/commands/student/EditStudentCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package tatracker.logic.commands.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import static tatracker.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import static tatracker.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import static tatracker.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import static tatracker.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import static tatracker.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import static tatracker.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import static tatracker.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import static tatracker.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import static tatracker.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import static tatracker.testutil.TypicalStudents.getTypicalTaTracker;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import tatracker.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import tatracker.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import tatracker.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import tatracker.logic.commands.student.EditStudentCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import tatracker.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import tatracker.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import tatracker.model.TaTracker;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import tatracker.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import tatracker.model.student.Student;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import tatracker.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import tatracker.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": " * and unit tests for EditStudentCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "public class EditStudentCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // private Model model \u003d new ModelManager(getTypicalTaTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     Student editedStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(editedStudent).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     EditStudentCommand editStudentCommand \u003d new EditStudentCommand(INDEX_FIRST_STUDENT, descriptor);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     String expectedMessage \u003d String.format(EditStudentCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     Model expectedModel \u003d new ModelManager(new TaTracker(model.getTaTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     expectedModel.setStudent(model.getFilteredStudentList().get(0), editedStudent);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     assertCommandSuccess(editStudentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     Index indexLastStudent \u003d Index.fromOneBased(model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     Student lastStudent \u003d model.getFilteredStudentList().get(indexLastStudent.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     StudentBuilder studentInList \u003d new StudentBuilder(lastStudent);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     Student editedStudent \u003d studentInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     EditStudentCommand editStudentCommand \u003d new EditStudentCommand(indexLastStudent, descriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     String expectedMessage \u003d String.format(EditStudentCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     Model expectedModel \u003d new ModelManager(new TaTracker(model.getTaTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     expectedModel.setStudent(lastStudent, editedStudent);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     assertCommandSuccess(editStudentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     EditStudentCommand editStudentCommand \u003d new EditStudentCommand(INDEX_FIRST_STUDENT,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             new EditStudentDescriptor());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     Student editedStudent \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     String expectedMessage \u003d String.format(EditStudentCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     Model expectedModel \u003d new ModelManager(new TaTracker(model.getTaTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     assertCommandSuccess(editStudentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Student studentInFilteredList \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Student editedStudent \u003d new StudentBuilder(studentInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        EditStudentCommand editStudentCommand \u003d new EditStudentCommand(INDEX_FIRST_STUDENT,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        String expectedMessage \u003d String.format(EditStudentCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TaTracker(model.getTaTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        expectedModel.setStudent(model.getFilteredStudentList().get(0), editedStudent);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        assertCommandSuccess(editStudentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // public void execute_duplicateStudentUnfilteredList_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     Student firstStudent \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(firstStudent).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     EditStudentCommand editStudentCommand \u003d new EditStudentCommand(INDEX_SECOND_STUDENT, descriptor);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     assertCommandFailure(editStudentCommand, model, EditStudentCommand.MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void execute_duplicateStudentFilteredList_failure() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        // edit student in filtered list into a duplicate in TA-Tracker"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        //Student studentInList \u003d model.getTaTracker().getStudentList().get(INDEX_SECOND_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        EditStudentCommand editStudentCommand \u003d new EditStudentCommand(INDEX_FIRST_STUDENT,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                new EditStudentDescriptorBuilder(studentInList).build());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        assertCommandFailure(editStudentCommand, model, EditStudentCommand.MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // public void execute_invalidStudentIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     EditStudentCommand editStudentCommand \u003d new EditStudentCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     assertCommandFailure(editStudentCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //  * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //  * but smaller than size of TA-Tracker"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //  */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // public void execute_invalidStudentIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     Index outOfBoundIndex \u003d INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     // ensures that outOfBoundIndex is still in bounds of TA-Tracker list"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTaTracker().getStudentList().size());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     EditStudentCommand editStudentCommand \u003d new EditStudentCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     assertCommandFailure(editStudentCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // public void equals() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     final EditStudentCommand standardCommand \u003d new EditStudentCommand(INDEX_FIRST_STUDENT, DESC_AMY);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     // same values -\u003e returns true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     EditStudentDescriptor copyDescriptor \u003d new EditStudentDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     EditStudentCommand commandWithSameValues \u003d new EditStudentCommand(INDEX_FIRST_STUDENT, copyDescriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     // same object -\u003e returns true"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     // null -\u003e returns false"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     // different types -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     // different index -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     assertFalse(standardCommand.equals(new EditStudentCommand(INDEX_SECOND_STUDENT, DESC_AMY)));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     assertFalse(standardCommand.equals(new EditStudentCommand(INDEX_FIRST_STUDENT, DESC_BOB)));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 6,
      "PotatoCombat": 141,
      "fatin99": 10,
      "-": 20
    }
  },
  {
    "path": "src/test/java/tatracker/logic/commands/student/EditStudentDescriptorTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package tatracker.logic.commands.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.VALID_MATRIC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.commands.student.EditStudentCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "public class EditStudentDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        EditStudentDescriptor descriptorWithSameValues \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                new EditStudentCommand.EditStudentDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Assertions.assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Assertions.assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Assertions.assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Assertions.assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Assertions.assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        EditStudentCommand.EditStudentDescriptor editedAmy \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                new EditStudentDescriptorBuilder(DESC_AMY)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                        .withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Assertions.assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Assertions.assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Assertions.assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // different matric -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                .withMatric(VALID_MATRIC_BOB).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Assertions.assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Assertions.assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 32,
      "fatin99": 32
    }
  },
  {
    "path": "src/test/java/tatracker/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/tatracker/logic/parser/CommandParserTestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/tatracker/logic/parser/DeleteCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                \"1\", new DeleteCommand(INDEX_FIRST_STUDENT));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                        DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 7,
      "fatin99": 4,
      "-": 24
    }
  },
  {
    "path": "src/test/java/tatracker/logic/parser/FindCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                        FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 6,
      "fatin99": 3,
      "-": 27
    }
  },
  {
    "path": "src/test/java/tatracker/logic/parser/ParserUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Matric;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.student.Rating;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private static final String INVALID_MATRIC \u003d \"!0123456\u0026\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private static final String VALID_MATRIC \u003d \"A0123456J\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertEquals(INDEX_FIRST_STUDENT, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertEquals(INDEX_FIRST_STUDENT, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void parseMatric_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseMatric((String) null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void parseMatric_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseMatric(INVALID_MATRIC));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void parseMatric_validValueWithoutWhitespace_returnsMatric() throws Exception {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Matric expectedMatric \u003d new Matric(VALID_MATRIC);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertEquals(expectedMatric, ParserUtil.parseMatric(VALID_MATRIC));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void parseM_validValueWithWhitespace_returnsTrimmedMatric() throws Exception {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        String matricWithWhitespace \u003d WHITESPACE + VALID_MATRIC + WHITESPACE;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Matric expectedMatric \u003d new Matric(VALID_MATRIC);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertEquals(expectedMatric, ParserUtil.parseMatric(matricWithWhitespace));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void parseRating_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseRating(null));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void parseRating_signedValue_throwsParseException() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // Cannot have \u0027+\u0027 or \u0027-\u0027 symbol when parsing"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseRating(\"-1\"));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseRating(\"+3\"));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void parseRating_zeroValue_throwsParseException() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseRating(\"0\"));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void parseRating_outOfRangeValue_throwsParseException() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // rating is not between 1 - 5"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseRating(\"6\"));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void parseRating_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // trailing characters"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseRating(\"3 3333\"));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // non-numeric"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseRating(\"3potato\"));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // symbols"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseRating(\"4+-\"));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void parseRating_validValueWithoutWhitespace_returnsRating() throws Exception {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Rating expectedRating \u003d new Rating(3);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        assertEquals(expectedRating, ParserUtil.parseRating(\"3\"));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void parseRating_validValueWithWhitespace_returnsTrimmedRating() throws Exception {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        String ratingWithWhitespace \u003d WHITESPACE + \"3\" + WHITESPACE;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Rating expectedRating \u003d new Rating(3);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        assertEquals(expectedRating, ParserUtil.parseRating(ratingWithWhitespace));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 10,
      "PotatoCombat": 49,
      "fatin99": 15,
      "-": 171
    }
  },
  {
    "path": "src/test/java/tatracker/logic/parser/TaTrackerParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.commands.student.EditStudentCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.commands.student.EditStudentCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.group.Group;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.module.Module;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Student;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.testutil.StudentUtil;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "public class TaTrackerParserTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private final TaTrackerParser parser \u003d new TaTrackerParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private final Group testGroup \u003d new Group(\"W17-4\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private final Module testModule \u003d new Module(\"CS2103T\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     Student student \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     AddStudentCommand command \u003d (AddStudentCommand) parser.parseCommand(StudentUtil.getAddCommand(student));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     assertEquals(new AddStudentCommand(student, testGroup, testModule), command);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_STUDENT.getOneBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_STUDENT), command);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Student student \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(student).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        EditStudentCommand command \u003d (EditStudentCommand) parser.parseCommand(EditStudentCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                + INDEX_FIRST_STUDENT.getOneBased() + \" \" + StudentUtil.getEditStudentDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        assertEquals(new EditStudentCommand(INDEX_FIRST_STUDENT, descriptor), command);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 15,
      "PotatoCombat": 15,
      "fatin99": 9,
      "-": 66
    }
  },
  {
    "path": "src/test/java/tatracker/logic/parser/student/AddStudentCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package tatracker.logic.parser.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.GROUP_DESC_T04;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.INVALID_MATRIC_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.MATRIC_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.MODULE_DESC_CS2030;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.VALID_GROUP_T04;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.VALID_MATRIC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.VALID_MODULE_CS2030;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.commands.student.AddStudentCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.group.Group;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.module.Module;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Matric;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.tag.Tag;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "public class AddStudentCommandParserTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private static final Module MODULE \u003d new Module(VALID_MODULE_CS2030);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private static final Group GROUP \u003d new Group(VALID_GROUP_T04);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private AddStudentCommandParser parser \u003d new AddStudentCommandParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     Student expectedStudent \u003d new StudentBuilder(BOB)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     // whitespace only preamble"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     StringBuilder command \u003d new StringBuilder()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(PREAMBLE_WHITESPACE)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(MATRIC_DESC_BOB)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(NAME_DESC_BOB)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(PHONE_DESC_BOB)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(EMAIL_DESC_BOB)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(RATING_DESC_BOB)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(TAG_DESC_FRIEND)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(MODULE_DESC_CS2030)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(GROUP_DESC_T04);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     assertParseSuccess(parser, command.toString(), new AddStudentCommand(expectedStudent, GROUP, MODULE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     // multiple matric numbers - last matric number accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     command \u003d new StringBuilder()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(MATRIC_DESC_AMY)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(MATRIC_DESC_BOB)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(NAME_DESC_BOB)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(PHONE_DESC_BOB)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(EMAIL_DESC_BOB)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(TAG_DESC_FRIEND)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(MODULE_DESC_CS2030)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(GROUP_DESC_T04);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     assertParseSuccess(parser, command.toString(), new AddStudentCommand(expectedStudent, GROUP, MODULE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     // multiple names - last name accepted"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     command \u003d new StringBuilder()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(MATRIC_DESC_BOB)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(NAME_DESC_AMY)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(NAME_DESC_BOB)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(PHONE_DESC_BOB)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(EMAIL_DESC_BOB)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(TAG_DESC_FRIEND)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(MODULE_DESC_CS2030)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(GROUP_DESC_T04);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     assertParseSuccess(parser, command.toString(), new AddStudentCommand(expectedStudent, GROUP, MODULE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     command \u003d new StringBuilder()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(MATRIC_DESC_BOB)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(NAME_DESC_BOB)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(PHONE_DESC_AMY)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(PHONE_DESC_BOB)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(EMAIL_DESC_BOB)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(TAG_DESC_FRIEND)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(MODULE_DESC_CS2030)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(GROUP_DESC_T04);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     assertParseSuccess(parser, command.toString(), new AddStudentCommand(expectedStudent, GROUP, MODULE));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     // multiple emails - last email accepted"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     command \u003d new StringBuilder()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(MATRIC_DESC_BOB)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(NAME_DESC_BOB)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(PHONE_DESC_BOB)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(EMAIL_DESC_AMY)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(EMAIL_DESC_BOB)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(TAG_DESC_FRIEND)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(MODULE_DESC_CS2030)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(GROUP_DESC_T04);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     assertParseSuccess(parser, command.toString(), new AddStudentCommand(expectedStudent, GROUP, MODULE));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     // multiple tags - all accepted"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     Student expectedStudentMultipleTags \u003d new StudentBuilder(BOB)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     command \u003d new StringBuilder()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(MATRIC_DESC_BOB)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(NAME_DESC_BOB)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(PHONE_DESC_BOB)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(EMAIL_DESC_BOB)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(TAG_DESC_FRIEND)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(TAG_DESC_HUSBAND)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(MODULE_DESC_CS2030)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(GROUP_DESC_T04);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     assertParseSuccess(parser, command.toString(),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             new AddStudentCommand(expectedStudentMultipleTags, GROUP, MODULE));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     // zero tags"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     Student expectedStudent \u003d new StudentBuilder(AMY)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .withPhone(\"\")"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .withEmail(\"\")"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .withRating(3)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .withTags().build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     StringBuilder command \u003d new StringBuilder()"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(MATRIC_DESC_AMY)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(MODULE_DESC_CS2030)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(GROUP_DESC_T04)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //             .append(NAME_DESC_AMY);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    //     assertParseSuccess(parser, command.toString(), new AddStudentCommand(expectedStudent, GROUP, MODULE));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddStudentCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                        + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                        + MATRIC_DESC_BOB,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // missing matric prefix"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                        + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                        + VALID_MATRIC_BOB,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                        + VALID_PHONE_BOB + VALID_EMAIL_BOB"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                        + MATRIC_DESC_BOB,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // invalid matric"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        StringBuilder command \u003d new StringBuilder()"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(INVALID_MATRIC_DESC)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(NAME_DESC_BOB)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(PHONE_DESC_BOB)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(EMAIL_DESC_BOB)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(TAG_DESC_HUSBAND)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(TAG_DESC_FRIEND)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(MODULE_DESC_CS2030)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(GROUP_DESC_T04);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        assertParseFailure(parser, command.toString(), Matric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        command \u003d new StringBuilder()"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(MATRIC_DESC_BOB)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(INVALID_NAME_DESC)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(PHONE_DESC_BOB)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(EMAIL_DESC_BOB)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(TAG_DESC_HUSBAND)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(TAG_DESC_FRIEND)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(MODULE_DESC_CS2030)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(GROUP_DESC_T04);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        assertParseFailure(parser, command.toString(), Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        command \u003d new StringBuilder()"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(MATRIC_DESC_BOB)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(NAME_DESC_BOB)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(INVALID_PHONE_DESC)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(EMAIL_DESC_BOB)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(TAG_DESC_HUSBAND)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(TAG_DESC_FRIEND)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(MODULE_DESC_CS2030)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(GROUP_DESC_T04);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        assertParseFailure(parser, command.toString(), Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        command \u003d new StringBuilder()"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(MATRIC_DESC_BOB)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(NAME_DESC_BOB)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(PHONE_DESC_BOB)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(INVALID_EMAIL_DESC)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(TAG_DESC_HUSBAND)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(TAG_DESC_FRIEND)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(MODULE_DESC_CS2030)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(GROUP_DESC_T04);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        assertParseFailure(parser, command.toString(), Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        command \u003d new StringBuilder()"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(MATRIC_DESC_BOB)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(NAME_DESC_BOB)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(PHONE_DESC_BOB)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(EMAIL_DESC_BOB)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(INVALID_TAG_DESC)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(TAG_DESC_FRIEND)"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(MODULE_DESC_CS2030)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(GROUP_DESC_T04);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        assertParseFailure(parser, command.toString(), Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        command \u003d new StringBuilder()"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(MATRIC_DESC_BOB)"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(INVALID_NAME_DESC)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(INVALID_PHONE_DESC)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(EMAIL_DESC_BOB)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(TAG_DESC_HUSBAND)"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(TAG_DESC_FRIEND)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(MODULE_DESC_CS2030)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(GROUP_DESC_T04);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        assertParseFailure(parser, command.toString(), Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        command \u003d new StringBuilder()"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(PREAMBLE_NON_EMPTY)"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(MATRIC_DESC_BOB)"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(NAME_DESC_BOB)"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(PHONE_DESC_BOB)"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(EMAIL_DESC_BOB)"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(TAG_DESC_HUSBAND)"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(TAG_DESC_FRIEND)"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(MODULE_DESC_CS2030)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(GROUP_DESC_T04);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                command.toString(),"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddStudentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 45,
      "PotatoCombat": 197,
      "fatin99": 29
    }
  },
  {
    "path": "src/test/java/tatracker/logic/parser/student/DeleteStudentCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package tatracker.logic.parser.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.GROUP_DESC_T04;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.MATRIC_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.MODULE_DESC_CS2030;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.VALID_GROUP_T04;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.VALID_MATRIC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.VALID_MODULE_CS2030;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.logic.commands.student.DeleteStudentCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.group.Group;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.module.Module;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.student.Matric;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * outside of the DeleteStudentCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * same path through the DeleteStudentCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatin99"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatin99"
        },
        "content": "public class DeleteStudentCommandParserTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private DeleteStudentCommandParser parser \u003d new DeleteStudentCommandParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void parse_validArgs_returnsDeleteStudentCommand() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // TODO: add all paths"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Matric matric \u003d new Matric(VALID_MATRIC_BOB);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Module module \u003d new Module(VALID_MODULE_CS2030);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Group group \u003d new Group(VALID_GROUP_T04);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        StringBuilder command \u003d new StringBuilder()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(MATRIC_DESC_BOB)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(MODULE_DESC_CS2030)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(GROUP_DESC_T04);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        assertParseSuccess(parser, command.toString(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                new DeleteStudentCommand(matric, group, module));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                DeleteStudentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatin99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 2,
      "PotatoCombat": 22,
      "fatin99": 29
    }
  },
  {
    "path": "src/test/java/tatracker/logic/parser/student/EditStudentCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatin99"
        },
        "content": "package tatracker.logic.parser.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.INVALID_MATRIC_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.MATRIC_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.MATRIC_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.VALID_MATRIC_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.VALID_MATRIC_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.testutil.TypicalIndexes.INDEX_THIRD_STUDENT;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.commands.student.EditStudentCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.commands.student.EditStudentCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Matric;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "public class EditStudentCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditStudentCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private EditStudentCommandParser parser \u003d new EditStudentCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertParseFailure(parser, \"1\", EditStudentCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                \"1\" + INVALID_MATRIC_DESC, Matric.MESSAGE_CONSTRAINTS); // invalid matric"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Student} being edited,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + INVALID_MATRIC_DESC"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                        + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                + EMAIL_DESC_AMY + MATRIC_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        EditStudentDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                new EditStudentDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withMatric(VALID_MATRIC_AMY)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        EditStudentCommand expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        EditStudentDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                new EditStudentDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        EditStudentCommand expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_STUDENT;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        EditStudentDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                new EditStudentDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        EditStudentCommand expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // matric"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + MATRIC_DESC_AMY;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withMatric(VALID_MATRIC_AMY).build();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                + MATRIC_DESC_AMY + TAG_DESC_FRIEND + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                + MATRIC_DESC_AMY + TAG_DESC_FRIEND + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                + MATRIC_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        EditStudentDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                new EditStudentDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withMatric(VALID_MATRIC_BOB)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        EditStudentCommand expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        EditStudentDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                new EditStudentDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        EditStudentCommand expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + MATRIC_DESC_BOB + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                .withMatric(VALID_MATRIC_BOB).build();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_STUDENT;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        EditStudentCommand expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 193,
      "fatin99": 40
    }
  },
  {
    "path": "src/test/java/tatracker/model/ModelManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.testutil.TypicalStudents.BENSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.testutil.TaTrackerBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        assertEquals(new TaTracker(), new TaTracker(modelManager.getTaTracker()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        userPrefs.setTaTrackerFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        userPrefs.setTaTrackerFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void setTaTrackerFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setTaTrackerFilePath(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void setTaTrackerFilePath_validPath_setsTaTrackerFilePath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        modelManager.setTaTrackerFilePath(path);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        assertEquals(path, modelManager.getTaTrackerFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void hasStudent_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasStudent(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void hasStudent_studentNotInTaTracker_returnsFalse() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertFalse(modelManager.hasStudent(ALICE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void hasStudent_studentInTaTracker_returnsTrue() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        modelManager.addStudent(ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertTrue(modelManager.hasStudent(ALICE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void getFilteredStudentList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredStudentList().remove(0));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        TaTracker taTracker \u003d new TaTrackerBuilder().withStudent(ALICE).withStudent(BENSON).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        TaTracker differentTaTracker \u003d new TaTracker();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        modelManager \u003d new ModelManager(taTracker, userPrefs);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(taTracker, userPrefs);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // different taTracker -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        //assertFalse(modelManager.equals(new ModelManager(differentTaTracker, userPrefs)));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // TODO: Change test case to work with new module hierarchy"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // modelManager.updateFilteredStudentList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // assertFalse(modelManager.equals(new ModelManager(taTracker, userPrefs)));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        //modelManager.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        differentUserPrefs.setTaTrackerFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(taTracker, differentUserPrefs)));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 25,
      "PotatoCombat": 4,
      "fatin99": 7,
      "-": 94
    }
  },
  {
    "path": "src/test/java/tatracker/model/ModelStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "package tatracker.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.group.Group;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.module.Module;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.session.Session;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.student.Student;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": " * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public ReadOnlyTaTracker getTaTracker() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void setTaTracker(ReadOnlyTaTracker taTracker) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public Path getTaTrackerFilePath() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void setTaTrackerFilePath(Path taTrackerFilePath) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public boolean hasSession(Session session) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void addSession(Session session) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void deleteSession(Session target) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void setSession(Session target, Session editedSession) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public ObservableList\u003cSession\u003e getFilteredSessionList() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void updateFilteredSessionList(Predicate\u003cSession\u003e predicate) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void addDoneSession(Session session) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public ObservableList\u003cSession\u003e getFilteredDoneSessionList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void updateFilteredDoneSessionList(Predicate\u003cSession\u003e predicate) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public Module getModule(String moduleId) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void addModule(Module module) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void deleteModule(Module target) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void sortModulesByRatingAscending() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void sortModulesByRatingDescending() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public boolean hasGroup(Group group, Module targetModule) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void addGroup(Group group, Module targetModule) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void deleteGroup(Group target, Module targetModule) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void setGroup(Group target, Group editedGroup, Module targetModule) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public ObservableList\u003cGroup\u003e getFilteredGroupList() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void updateFilteredGroupList(String moduleCode) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void setFilteredGroupList() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void updateGroupList(int n) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public boolean hasStudent(Student student, Group targetGroup, Module targetModule) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void addStudent(Student student) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void addStudent(Student student, Group targetGroup, Module targetModule) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void deleteStudent(Student target) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void deleteStudent(Student target, Group targetGroup, Module targetModule) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void setStudent(Student target, Student editedStudent, Group targetGroup, Module targetModule) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void updateStudentList(int i, int j) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void sortModulesAlphabetically() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void updateFilteredStudentList(String groupCode, String moduleCode) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void setFilteredStudentList() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void setFilteredStudentList(String moduleCode, int n) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * A Model stub that contains a single session."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static class ModelStubWithSession extends ModelStub {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        private final Session session;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        public ModelStubWithSession(Session session) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            requireNonNull(session);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            this.session \u003d session;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        public boolean hasSession(Session session) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            requireNonNull(session);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return this.session.isSameSession(session);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * A Model stub that contains a single module."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static class ModelStubWithModule extends ModelStub {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        private final Module module;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        public ModelStubWithModule(Module module) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            this.module \u003d module;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return this.module.equals(module);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * A Model stub that contains a single student."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static class ModelStubWithStudent extends ModelStub {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        private final Student student;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        public ModelStubWithStudent(Student student) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            this.student \u003d student;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        public boolean hasGroup(Group group, Module module) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            requireNonNull(group);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        public boolean hasStudent(Student student, Group group, Module module) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return this.student.isSameStudent(student);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * A Model stub that always accept the session being added."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static class ModelStubAcceptingSessionAdded extends ModelStub {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        public final ArrayList\u003cSession\u003e sessionsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        public boolean hasSession(Session session) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            requireNonNull(session);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return sessionsAdded.stream().anyMatch(session::isSameSession);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        public void addSession(Session session) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            requireNonNull(session);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            sessionsAdded.add(session);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        public ReadOnlyTaTracker getTaTracker() {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return new TaTracker();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * A Model stub that always accept the student being added."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static class ModelStubAcceptingStudentAdded extends ModelStub {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        public final ArrayList\u003cStudent\u003e studentsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        public boolean hasGroup(Group group, Module module) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            requireNonNull(group);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        public boolean hasStudent(Student student, Group group, Module module) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return studentsAdded.stream().anyMatch(student::isSameStudent);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        public void addStudent(Student student, Group group, Module module) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            studentsAdded.add(student);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        public ReadOnlyTaTracker getTaTracker() {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return new TaTracker();"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * A Model stub that always accept the module being added."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static class ModelStubAcceptingModuleAdded extends ModelStub {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        public final ArrayList\u003cModule\u003e modulesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return modulesAdded.stream().anyMatch(module::equals);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            modulesAdded.add(module);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        public ReadOnlyTaTracker getTaTracker() {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return new TaTracker();"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 42,
      "PotatoCombat": 370
    }
  },
  {
    "path": "src/test/java/tatracker/model/TaTrackerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.testutil.TypicalStudents.getTypicalTaTracker;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.model.group.Group;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.module.Module;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.session.Session;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Student;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "public class TaTrackerTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private final TaTracker taTracker \u003d new TaTracker();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        assertEquals(Collections.emptyList(), taTracker.getStudentList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e taTracker.resetData(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void resetData_withValidReadOnlyTaTracker_replacesData() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        TaTracker newData \u003d getTypicalTaTracker();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        taTracker.resetData(newData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        assertEquals(newData, taTracker);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void resetData_withDuplicateStudents_throwsDuplicateStudentException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        // Two students with the same identity fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        List\u003cStudent\u003e newStudents \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        TaTrackerStub newData \u003d new TaTrackerStub(newStudents);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        assertThrows(DuplicateStudentException.class, () -\u003e taTracker.resetData(newData));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void hasStudent_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e taTracker.hasStudent(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void hasStudent_studentNotInTaTracker_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        assertFalse(taTracker.hasStudent(ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void hasStudent_studentInTaTracker_returnsTrue() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        taTracker.addStudent(ALICE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        assertTrue(taTracker.hasStudent(ALICE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void hasStudent_studentWithSameIdentityFieldsInTaTracker_returnsTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        taTracker.addStudent(ALICE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        assertTrue(taTracker.hasStudent(editedAlice));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void getStudentList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e taTracker.getStudentList().remove(0));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "    // TODO: Add test cases for SessionList"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuayijing"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * A stub ReadOnlyTaTracker whose internal lists can violate interface constraints."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private static class TaTrackerStub implements ReadOnlyTaTracker {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        private final ObservableList\u003cSession\u003e sessions \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        private final ObservableList\u003cSession\u003e doneSessions \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        private final ObservableList\u003cModule\u003e modules \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        private final ObservableList\u003cStudent\u003e students \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        private final ObservableList\u003cGroup\u003e groups \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        TaTrackerStub(Collection\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            this.students.setAll(students);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        public ObservableList\u003cSession\u003e getSessionList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "            return sessions;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chuayijing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        public ObservableList\u003cSession\u003e getDoneSessionList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            return doneSessions;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        public ObservableList\u003cStudent\u003e getCurrentlyShownStudentList() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        public ObservableList\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            return modules;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        public ObservableList\u003cGroup\u003e getCurrentlyShownGroupList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            return groups;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 50,
      "chuayijing": 7,
      "fatin99": 22,
      "-": 49
    }
  },
  {
    "path": "src/test/java/tatracker/model/UserPrefsTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void setTaTrackerFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setTaTrackerFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 4,
      "-": 17
    }
  },
  {
    "path": "src/test/java/tatracker/model/session/InvalidStartEndTimeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eclmist"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eclmist"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eclmist"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eclmist"
        },
        "content": "public class InvalidStartEndTimeTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eclmist"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    public void constructor_invalidTime_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        LocalDateTime startTime \u003d LocalDateTime.of(2020, 01, 01, 14, 00, 00);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eclmist"
        },
        "content": "        LocalDateTime endTime \u003d startTime.minus(1, ChronoUnit.HOURS);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Session(startTime, endTime,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                SessionType.OTHER, false, \"CS2103/T\", \"Description\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eclmist"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eclmist"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 1,
      "eclmist": 14,
      "fatin99": 4
    }
  },
  {
    "path": "src/test/java/tatracker/model/student/EmailTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        String invalidEmail \u003d \"1nval1d3ma1l.c0m\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        assertTrue(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 1,
      "PotatoCombat": 1,
      "fatin99": 2,
      "-": 57
    }
  },
  {
    "path": "src/test/java/tatracker/model/student/NameContainsKeywordsPredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertFalse(predicate.test(new StudentBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertFalse(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        // Keywords match phone and email, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"A0123456J\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertFalse(predicate.test(new StudentBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                .withEmail(\"alice@email.com\").withMatric(\"A0123456J\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 2,
      "fatin99": 11,
      "-": 62
    }
  },
  {
    "path": "src/test/java/tatracker/model/student/NameTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 1,
      "fatin99": 1,
      "-": 38
    }
  },
  {
    "path": "src/test/java/tatracker/model/student/PhoneTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        String invalidPhone \u003d \"967!5774\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 1,
      "PotatoCombat": 1,
      "fatin99": 2,
      "-": 36
    }
  },
  {
    "path": "src/test/java/tatracker/model/student/RatingTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "package tatracker.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "public class RatingTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void constructor_invalidValue_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        int invalidValue \u003d 6;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Rating(invalidValue));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void isValidRating() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // negative value"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        assertFalse(Rating.isValidRating(-1), \"Rating cannot have negative values\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // zero value"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        assertFalse(Rating.isValidRating(0), \"Rating cannot be zero\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // value too large"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        assertFalse(Rating.isValidRating(6), \"Rating must be between 1 to 5\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // valid values"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        assertTrue(Rating.isValidRating(1), \"Rating must be between 1 to 5\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        assertTrue(Rating.isValidRating(2), \"Rating must be between 1 to 5\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        assertTrue(Rating.isValidRating(3), \"Rating must be between 1 to 5\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        assertTrue(Rating.isValidRating(4), \"Rating must be between 1 to 5\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        assertTrue(Rating.isValidRating(5), \"Rating must be between 1 to 5\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PotatoCombat": 37
    }
  },
  {
    "path": "src/test/java/tatracker/model/student/StudentTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.VALID_MATRIC_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.VALID_RATING_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.testutil.TypicalStudents.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "public class StudentTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        Student student \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e student.getTags().remove(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void isSameStudent() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Assertions.assertTrue(ALICE.isSameStudent(ALICE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Assertions.assertFalse(ALICE.isSameStudent(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // different optional fields -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .withRating(VALID_RATING_BOB)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Assertions.assertTrue(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // different matric -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .withMatric(VALID_MATRIC_BOB).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Assertions.assertFalse(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Assertions.assertFalse(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Student aliceCopy \u003d new StudentBuilder(ALICE).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Assertions.assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Assertions.assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Assertions.assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Assertions.assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Assertions.assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                .withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Assertions.assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Assertions.assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Assertions.assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // different matric -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withMatric(VALID_MATRIC_BOB).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Assertions.assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Assertions.assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 47,
      "PotatoCombat": 9,
      "fatin99": 36
    }
  },
  {
    "path": "src/test/java/tatracker/model/student/UniqueStudentListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.testutil.TypicalStudents.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.exceptions.DuplicateStudentException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.exceptions.StudentNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": "public class UniqueStudentListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private final UniqueStudentList uniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void contains_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void contains_studentNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertFalse(uniqueStudentList.contains(ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void contains_studentInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertTrue(uniqueStudentList.contains(ALICE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void contains_studentWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertTrue(uniqueStudentList.contains(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void add_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void add_duplicateStudent_throwsDuplicateStudentException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertThrows(DuplicateStudentException.class, () -\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                uniqueStudentList.add(ALICE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void setStudent_nullTargetStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                uniqueStudentList.setStudent(null, ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void setStudent_nullEditedStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                uniqueStudentList.setStudent(ALICE, null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void setStudent_targetStudentNotInList_throwsStudentNotFoundException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertThrows(StudentNotFoundException.class, () -\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                uniqueStudentList.setStudent(ALICE, ALICE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void setStudent_editedStudentIsSameStudent_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        uniqueStudentList.setStudent(ALICE, ALICE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        expectedUniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void setStudent_editedStudentHasSameIdentity_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        uniqueStudentList.setStudent(ALICE, editedAlice);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        expectedUniqueStudentList.add(editedAlice);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void setStudent_editedStudentHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        uniqueStudentList.setStudent(ALICE, BOB);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        expectedUniqueStudentList.add(BOB);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void setStudent_editedStudentHasNonUniqueIdentity_throwsDuplicateStudentException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        uniqueStudentList.add(BOB);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertThrows(DuplicateStudentException.class, () -\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fatin99"
        },
        "content": "                uniqueStudentList.setStudent(ALICE, BOB));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void remove_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.remove(null));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void remove_studentDoesNotExist_throwsStudentNotFoundException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertThrows(StudentNotFoundException.class, () -\u003e uniqueStudentList.remove(ALICE));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void remove_existingStudent_removesStudent() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        uniqueStudentList.remove(ALICE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void setStudents_nullUniqueStudentList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.setStudents((UniqueStudentList) null));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void setStudents_uniqueStudentList_replacesOwnListWithProvidedUniqueStudentList() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        expectedUniqueStudentList.add(BOB);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        uniqueStudentList.setStudents(expectedUniqueStudentList);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void setStudents_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                uniqueStudentList.setStudents((List\u003cStudent\u003e) null));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void setStudents_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        List\u003cStudent\u003e studentList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        uniqueStudentList.setStudents(studentList);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        expectedUniqueStudentList.add(BOB);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void setStudents_listWithDuplicateStudents_throwsDuplicateStudentException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        List\u003cStudent\u003e listWithDuplicateStudents \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertThrows(DuplicateStudentException.class, () -\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                uniqueStudentList.setStudents(listWithDuplicateStudents));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            -\u003e uniqueStudentList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "fatin99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 6,
      "fatin99": 170
    }
  },
  {
    "path": "src/test/java/tatracker/model/tag/TagTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/tatracker/storage/JsonAdaptedStudentTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.storage.JsonAdaptedStudent.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.testutil.TypicalStudents.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Matric;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.student.Rating;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": "public class JsonAdaptedStudentTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private static final String INVALID_MATRIC \u003d \"@0187945J\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private static final int INVALID_RATING \u003d 6;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private static final String VALID_MATRIC \u003d BENSON.getMatric().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private static final int VALID_RATING \u003d BENSON.getRating().value;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void toModelType_validStudentDetails_returnsStudent() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(BENSON);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertEquals(BENSON, student.toModelType());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void toModelType_invalidMatric_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(INVALID_MATRIC, VALID_NAME,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                VALID_PHONE, VALID_EMAIL, VALID_RATING, VALID_TAGS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        String expectedMessage \u003d Matric.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void toModelType_nullMatric_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(null, VALID_NAME,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                VALID_PHONE, VALID_EMAIL, VALID_RATING, VALID_TAGS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                Matric.class.getSimpleName());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(VALID_MATRIC, INVALID_NAME,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                        VALID_PHONE, VALID_EMAIL, VALID_RATING, VALID_TAGS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(VALID_MATRIC, null,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                VALID_PHONE, VALID_EMAIL, VALID_RATING, VALID_TAGS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                Name.class.getSimpleName());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(VALID_MATRIC, VALID_NAME,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                        INVALID_PHONE, VALID_EMAIL, VALID_RATING, VALID_TAGS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(VALID_MATRIC, VALID_NAME,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                null, VALID_EMAIL, VALID_RATING, VALID_TAGS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(VALID_MATRIC, VALID_NAME,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                        VALID_PHONE, INVALID_EMAIL, VALID_RATING, VALID_TAGS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(VALID_MATRIC, VALID_NAME,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                VALID_PHONE, null, VALID_RATING, VALID_TAGS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                Email.class.getSimpleName());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void toModelType_invalidRating_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(VALID_MATRIC, VALID_NAME,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                VALID_PHONE, VALID_EMAIL, INVALID_RATING, VALID_TAGS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        String expectedMessage \u003d Rating.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(VALID_MATRIC, VALID_NAME,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                        VALID_PHONE, VALID_EMAIL, VALID_RATING, invalidTags);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        assertThrows(IllegalValueException.class, student::toModelType);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 10,
      "PotatoCombat": 43,
      "fatin99": 18,
      "-": 57
    }
  },
  {
    "path": "src/test/java/tatracker/storage/JsonSerializableTaTrackerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.testutil.TypicalStudents.getTypicalTaTracker;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.TaTracker;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "public class JsonSerializableTaTrackerTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableTaTrackerTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private static final Path TYPICAL_STUDENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalStudentsTaTracker.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private static final Path INVALID_STUDENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidStudentTaTracker.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private static final Path DUPLICATE_STUDENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateStudentTaTracker.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void toModelType_typicalStudentsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        JsonSerializableTaTracker dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_STUDENTS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                JsonSerializableTaTracker.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        TaTracker taTrackerFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        TaTracker typicalStudentsTaTracker \u003d getTypicalTaTracker();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        assertEquals(taTrackerFromFile, typicalStudentsTaTracker);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public void toModelType_invalidStudentFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        JsonSerializableTaTracker dataFromFile \u003d JsonUtil.readJsonFile(INVALID_STUDENT_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                JsonSerializableTaTracker.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 16,
      "fatin99": 4,
      "-": 19
    }
  },
  {
    "path": "src/test/java/tatracker/storage/JsonTaTrackerStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static tatracker.testutil.TypicalStudents.CS2030;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static tatracker.testutil.TypicalStudents.CS3243;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.testutil.TypicalStudents.getTypicalTaTracker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.ReadOnlyTaTracker;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.TaTracker;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import static tatracker.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import static tatracker.testutil.TypicalStudents.HOON;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// import static tatracker.testutil.TypicalStudents.IDA;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "public class JsonTaTrackerStorageTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonTaTrackerStorageTest\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void readTaTracker_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readTaTracker(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private java.util.Optional\u003cReadOnlyTaTracker\u003e readTaTracker(String filePath) throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return new JsonTaTrackerStorage(Paths.get(filePath)).readTaTracker(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        assertFalse(readTaTracker(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readTaTracker(\"notJsonFormatTaTracker.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void readTaTracker_invalidStudentTaTracker_throwDataConversionException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readTaTracker(\"invalidStudentTaTracker.json\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void readTaTracker_invalidAndValidStudentTaTracker_throwDataConversionException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readTaTracker(\"invalidAndValidStudentTaTracker.json\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void readAndSaveTaTracker_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempTaTracker.json\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        TaTracker original \u003d getTypicalTaTracker();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        JsonTaTrackerStorage jsonTaTrackerStorage \u003d new JsonTaTrackerStorage(filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        jsonTaTrackerStorage.saveTaTracker(original, filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        ReadOnlyTaTracker readBack \u003d jsonTaTrackerStorage.readTaTracker(filePath).get();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        assertEquals(original, new TaTracker(readBack));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        original.addModule(CS2030);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        original.deleteModule(CS3243);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        jsonTaTrackerStorage.saveTaTracker(original, filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        readBack \u003d jsonTaTrackerStorage.readTaTracker(filePath).get();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        assertEquals(original, new TaTracker(readBack));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        original.addModule(CS3243);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        jsonTaTrackerStorage.saveTaTracker(original); // file path not specified"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        readBack \u003d jsonTaTrackerStorage.readTaTracker().get(); // file path not specified"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        assertEquals(original, new TaTracker(readBack));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void saveTaTracker_nullTaTracker_throwsNullPointerException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveTaTracker(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Saves {@code taTracker} at the specified {@code filePath}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private void saveTaTracker(ReadOnlyTaTracker taTracker, String filePath) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "            new JsonTaTrackerStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "                    .saveTaTracker(taTracker, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void saveTaTracker_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveTaTracker(new TaTracker(), null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 39,
      "PotatoCombat": 9,
      "-": 65
    }
  },
  {
    "path": "src/test/java/tatracker/storage/JsonUserPrefsStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        userPrefs.setTaTrackerFilePath(Paths.get(\"tatracker.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 6,
      "-": 117
    }
  },
  {
    "path": "src/test/java/tatracker/storage/StorageManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.testutil.TypicalStudents.getTypicalTaTracker;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.ReadOnlyTaTracker;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.TaTracker;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        JsonTaTrackerStorage taTrackerStorage \u003d new JsonTaTrackerStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        storageManager \u003d new StorageManager(taTrackerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void taTrackerReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "         * {@link JsonTaTrackerStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonTaTrackerStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        TaTracker original \u003d getTypicalTaTracker();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        storageManager.saveTaTracker(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        ReadOnlyTaTracker retrieved \u003d storageManager.readTaTracker().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        assertEquals(original, new TaTracker(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public void getTaTrackerFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        assertNotNull(storageManager.getTaTrackerFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 17,
      "-": 51
    }
  },
  {
    "path": "src/test/java/tatracker/testutil/Assert.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/tatracker/testutil/EditStudentDescriptorBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.commands.student.EditStudentCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Matric;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.student.Rating;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * A utility class to help with building EditStudentDescriptor objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatin99"
        },
        "content": "public class EditStudentDescriptorBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private EditStudentDescriptor descriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public EditStudentDescriptorBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        descriptor \u003d new EditStudentDescriptor();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public EditStudentDescriptorBuilder(EditStudentDescriptor descriptor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        this.descriptor \u003d new EditStudentDescriptor(descriptor);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Returns an {@code EditStudentDescriptor} with fields containing {@code student}\u0027s details"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public EditStudentDescriptorBuilder(Student student) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        descriptor \u003d new EditStudentDescriptor();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        descriptor.setName(student.getName());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        descriptor.setPhone(student.getPhone());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        descriptor.setEmail(student.getEmail());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        descriptor.setMatric(student.getMatric());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        descriptor.setRating(student.getRating());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        descriptor.setTags(student.getTags());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Sets the {@code Name} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public EditStudentDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public EditStudentDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Sets the {@code Email} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public EditStudentDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Sets the {@code Email} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public EditStudentDescriptorBuilder withRating(int rating) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        descriptor.setRating(new Rating(rating));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Sets the {@code Matric} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public EditStudentDescriptorBuilder withMatric(String matric) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        descriptor.setMatric(new Matric(matric));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditStudentDescriptor}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public EditStudentDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public EditStudentDescriptor build() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fatin99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 7,
      "PotatoCombat": 10,
      "fatin99": 80
    }
  },
  {
    "path": "src/test/java/tatracker/testutil/SerializableTestClass.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/tatracker/testutil/StudentBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Email;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Matric;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Phone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.student.Rating;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * A utility class to help with building Student objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatin99"
        },
        "content": "public class StudentBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static final String DEFAULT_MATRIC \u003d \"A0123456B\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final int DEFAULT_RATING \u003d 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private Matric matric;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private Rating rating;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public StudentBuilder() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        matric \u003d new Matric(DEFAULT_MATRIC);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        rating \u003d new Rating(DEFAULT_RATING);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Initializes the StudentBuilder with the data of {@code studentToCopy}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public StudentBuilder(Student studentToCopy) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        name \u003d studentToCopy.getName();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        phone \u003d studentToCopy.getPhone();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        email \u003d studentToCopy.getEmail();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        matric \u003d studentToCopy.getMatric();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        rating \u003d studentToCopy.getRating();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(studentToCopy.getTags());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Sets the {@code Name} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public StudentBuilder withName(String name) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Student} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public StudentBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Sets the {@code Phone} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public StudentBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Sets the {@code Email} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public StudentBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Sets the {@code Matric} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public StudentBuilder withMatric(String matric) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        this.matric \u003d new Matric(matric);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fatin99"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Sets the {@code Rating} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public StudentBuilder withRating(int rating) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.rating \u003d new Rating(rating);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public Student build() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return new Student(matric, name, phone, email, rating, tags);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 8,
      "PotatoCombat": 14,
      "fatin99": 30,
      "-": 55
    }
  },
  {
    "path": "src/test/java/tatracker/testutil/StudentUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_GROUP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_MATRIC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.commands.student.AddStudentCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import tatracker.logic.commands.student.EditStudentCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.group.Group;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.module.Module;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Student;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * A utility class for Student."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatin99"
        },
        "content": "public class StudentUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private static final Group TEST_GROUP \u003d new Group(\"W17-4\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private static final Module TEST_MODULE \u003d new Module(\"CS2103T\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Returns an add command string for adding the {@code student}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static String getAddCommand(Student student) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return AddStudentCommand.COMMAND_WORD + \" \" + getStudentDetails(student) + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                + PREFIX_GROUP + \" \" + TEST_GROUP.getIdentifier() + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                + PREFIX_MODULE + \" \" + TEST_MODULE.getIdentifier();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Returns the part of command string for the given {@code student}\u0027s details."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static String getStudentDetails(Student student) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        sb.append(PREFIX_NAME + student.getName().fullName + \" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        sb.append(PREFIX_PHONE + student.getPhone().value + \" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        sb.append(PREFIX_EMAIL + student.getEmail().value + \" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        sb.append(PREFIX_MATRIC + student.getMatric().value + \" \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        sb.append(PREFIX_RATING + String.valueOf(student.getRating().value) + \" \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        student.getTags().forEach(s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Returns the part of command string for the given {@code EditStudentDescriptor}\u0027s details."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static String getEditStudentDescriptorDetails(EditStudentDescriptor descriptor) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        descriptor.getRating().ifPresent(rating -\u003e sb.append(PREFIX_RATING).append(rating.value).append(\" \"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        descriptor.getMatric().ifPresent(matric -\u003e sb.append(PREFIX_MATRIC).append(matric.value).append(\" \"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 8,
      "PotatoCombat": 14,
      "fatin99": 15,
      "-": 35
    }
  },
  {
    "path": "src/test/java/tatracker/testutil/TaTrackerBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.TaTracker;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Student;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " * A utility class to help with building TA-Tracker objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": " *     {@code TaTracker ab \u003d new TaTrackerBuilder().withStudent(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "public class TaTrackerBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    private TaTracker taTracker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public TaTrackerBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        taTracker \u003d new TaTracker();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public TaTrackerBuilder(TaTracker taTracker) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        this.taTracker \u003d taTracker;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Adds a new {@code Student} to the {@code TaTracker} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public TaTrackerBuilder withStudent(Student student) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        taTracker.addStudent(student);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public TaTracker build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "        return taTracker;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 16,
      "-": 18
    }
  },
  {
    "path": "src/test/java/tatracker/testutil/TestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Student;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Returns the middle index of the student in the {@code model}\u0027s student list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return Index.fromOneBased(model.getFilteredStudentList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Returns the last index of the student in the {@code model}\u0027s student list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return Index.fromOneBased(model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatin99"
        },
        "content": "     * Returns the student in the {@code model}\u0027s student list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static Student getStudent(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        return model.getFilteredStudentList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 4,
      "fatin99": 7,
      "-": 44
    }
  },
  {
    "path": "src/test/java/tatracker/testutil/TypicalIndexes.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static final Index INDEX_FIRST_STUDENT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static final Index INDEX_SECOND_STUDENT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static final Index INDEX_THIRD_STUDENT \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 2,
      "fatin99": 3,
      "-": 7
    }
  },
  {
    "path": "src/test/java/tatracker/testutil/TypicalStudents.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.VALID_MATRIC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.VALID_MATRIC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.VALID_RATING_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.VALID_RATING_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatin99"
        },
        "content": "import static tatracker.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.TaTracker;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.group.Group;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.group.GroupType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import tatracker.model.module.Module;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.model.student.Student;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatin99"
        },
        "content": " * A utility class containing a list of {@code Student} objects to be used in tests."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatin99"
        },
        "content": "public class TypicalStudents {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final Module CS3243 \u003d new Module(\"CS3243\", \"Introduction to AI\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final Module CS2030 \u003d new Module(\"CS2030\", \"Programming Methodology II\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final Group G06 \u003d new Group(\"G06\", GroupType.LAB);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static final Group T04 \u003d new Group(\"T04\", GroupType.TUTORIAL);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static final Student ALICE \u003d new StudentBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            .withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            .withMatric(\"A0193235J\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            .withRating(1)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            .withTags(\"friends\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static final Student BENSON \u003d new StudentBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            .withMatric(\"A0188621K\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            .withRating(2)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static final Student CARL \u003d new StudentBuilder().withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            .withPhone(\"95352563\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            .withEmail(\"heinz@example.com\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            .withMatric(\"A0190706L\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            .withRating(3)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static final Student DANIEL \u003d new StudentBuilder().withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            .withPhone(\"87652533\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            .withEmail(\"cornelia@example.com\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            .withMatric(\"A0192154M\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            .withTags(\"friends\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            .withRating(4)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static final Student ELLE \u003d new StudentBuilder().withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            .withPhone(\"9482224\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            .withEmail(\"werner@example.com\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            .withMatric(\"A0190546N\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            .withRating(5)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static final Student FIONA \u003d new StudentBuilder().withName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            .withPhone(\"9482427\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            .withEmail(\"lydia@example.com\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            .withMatric(\"A0196074P\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            .withRating(1)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static final Student GEORGE \u003d new StudentBuilder().withName(\"George Best\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            .withPhone(\"9482442\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            .withEmail(\"anna@example.com\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            .withMatric(\"A0190289Q\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            .withRating(2)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static final Student HOON \u003d new StudentBuilder().withName(\"Hoon Meier\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            .withPhone(\"8482424\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            .withEmail(\"stefan@example.com\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            .withMatric(\"A0191183R\").build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static final Student IDA \u003d new StudentBuilder().withName(\"Ida Mueller\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            .withPhone(\"8482131\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            .withEmail(\"hans@example.com\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            .withMatric(\"A0188967T\").build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    // Manually added - Student\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static final Student AMY \u003d new StudentBuilder()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            .withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            .withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            .withMatric(VALID_MATRIC_AMY)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            .withTags(VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            .withRating(VALID_RATING_AMY)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static final Student BOB \u003d new StudentBuilder()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            .withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            .withMatric(VALID_MATRIC_BOB)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            .withRating(VALID_RATING_BOB)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fatin99"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    private TypicalStudents() {} // prevents instantiation"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "     * Returns an {@code TaTracker} with all the typical students."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "    public static TaTracker getTypicalTaTracker() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Module typicalCS3243 \u003d new Module(\"CS3243\", \"Introduction to AI\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Group typicalG06 \u003d new Group(\"G06\", GroupType.LAB);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        typicalCS3243.addGroup(typicalG06);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fatin99"
        },
        "content": "        for (Student student : getTypicalStudents()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            typicalG06.addStudent(student);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        TaTracker tat \u003d new TaTracker();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        tat.addModule(typicalCS3243);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return tat;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fatin99"
        },
        "content": "    public static List\u003cStudent\u003e getTypicalStudents() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 5,
      "PotatoCombat": 46,
      "fatin99": 56,
      "-": 26
    }
  },
  {
    "path": "src/test/java/tatracker/ui/TestFxmlObject.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/tatracker/ui/UiPartTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "package tatracker.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import static tatracker.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "import tatracker.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 9,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "\u003c?import tatracker.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aakanksha-rai"
        },
        "content": "\u003cfx:root type\u003d\"tatracker.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "aakanksha-rai": 1,
      "-": 5
    }
  }
]
