[
  {
    "path": "src/main/java/seedu/address/model/activity/Activity.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package seedu.address.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Abstract class to specify fields with getter and setters for activities."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public abstract class Activity {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Note note;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    //Priority priority;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void setName(Name name) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void setDate(Date date) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Note getNote() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return note;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void setNote(Note note) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Priority getPriority() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void setPriority(Priority priority) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/model/activity/Date.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package seedu.address.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Represents Date of an Activity."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \"Dates should only be in the format YYYY-MM-DD, and it should not be blank\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public final LocalDate date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Constructs a {@code Date}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param date A valid date."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Date(String date) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        checkArgument(isValidDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.date \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Checks if a given string is a valid date."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @return true if the string matches date format."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            LocalDate.parse(test);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns date as a string with format MMM d yyyy."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @return date as a string with format MMM d yyyy."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                || (other instanceof Date // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                \u0026\u0026 date.equals(((Date) other).date)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return date.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/model/activity/Name.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package seedu.address.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Represents Name of an Activity."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public final String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                \u0026\u0026 name.equals(((Name) other).name)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return name.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/activity/Note.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package seedu.address.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Represents an activity\u0027s notes."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Guarantees: immutable, is valid as declared in {@link #isValidNote(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class Note {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \"Notes should not be empty and must contain\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    + \"at least one non-whitespace character.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * The notes String must contain at least one non-whitespace"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * character, otherwise a bunch of tabs and spaces will"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * qualify as a note which should not be the case."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(?!\\\\s*$).+\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public final String content;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Constructs a {@code Note}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param content Valid notes."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Note(String content) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(content);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        checkArgument(isValidNote(content), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Returns true if a given string is considered valid notes."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static boolean isValidNote(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return test.trim().matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                || (other instanceof Note // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                \u0026\u0026 content.equals(((Note) other).content)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return content.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/activity/Priority.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "don-tay"
        },
        "content": "package seedu.address.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * Represents an activity\u0027s priority."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * Guarantees: an integer of range 1 to 5, default value set to 1 if no value received upon instantiation."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public class Priority {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String PRIORITY_RANGE_CONSTRAINTS \u003d \"Priority should range from 1 to 5 inclusive only.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Valid integers cannot start with the digit \u00270\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String VALID_INTEGER_REGEX \u003d \"-?(0|[1-9]\\\\d*)\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Priority level set to 1 as default value if not specified."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Variable is not set as final to allow user to set default priority level (TBD)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private static int defaultPriorityLevel \u003d 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private final int priorityLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Constructs a {@code Priority} with default priority level, when no argument is passed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public Priority() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.priorityLevel \u003d defaultPriorityLevel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Constructs a {@code Priority} with  the value priorityLevel ."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param priorityLevel priority level of the given activity, a String in the integer range of 1 to 5 inclusive."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public Priority(String priorityLevel) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        checkArgument(isValidPriorityValue(priorityLevel), PRIORITY_RANGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.priorityLevel \u003d Integer.parseInt(priorityLevel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static int getDefaultPriorityLevel() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return defaultPriorityLevel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Returns true if a given priority level string is in the valid integer range of 1 to 5."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static boolean isValidPriorityValue(String test) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (test.matches(VALID_INTEGER_REGEX)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            int intTest \u003d Integer.parseInt(test);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            if (intTest \u003e\u003d 1 \u0026\u0026 intTest \u003c\u003d 5) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return Integer.toString(priorityLevel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                || (other instanceof Priority // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                \u0026\u0026 priorityLevel \u003d\u003d ((Priority) other).priorityLevel); // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "don-tay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "don-tay": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/model/activity/DateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package seedu.address.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "class DateTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Date(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void constructor_invalidDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String invalidDate \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Date(invalidDate));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    void isValidDate() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // null Date"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Date.isValidDate(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // invalid Dates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(Date.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(Date.isValidDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(Date.isValidDate(\"2020-02-30\")); // invalid date"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // valid Dates"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(Date.isValidDate(\"2020-02-29\")); //leap year"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(Date.isValidDate(\"2010-03-12\")); //regular date"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    void testHashCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/model/activity/NameTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package seedu.address.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(Name.isValidName(\"run*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(Name.isValidName(\"tutorial\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(Name.isValidName(\"cs2103 tutorial\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(Name.isValidName(\"tP\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(Name.isValidName(\"Studying for cs2103 finals\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/activity/NoteTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package seedu.address.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class NoteTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void isValidNote_validNote_true() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        boolean result \u003d Note.isValidNote(\"Remember to update UG and DG!\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(true, result);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void isValidNote_invalidNote_false() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         * Test for empty string, or whitespace characters"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(false, Note.isValidNote(\"       \"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(false, Note.isValidNote(\"\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(false, Note.isValidNote(\"\\t\\t\\n\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void note_validInstantiation_noException() throws IllegalArgumentException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Note note \u003d new Note(\"Update UG and DG!\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        note \u003d new Note(\"ABC\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        note \u003d new Note(\"\\t\\t\\tThe best in the world!\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        note \u003d new Note(\"\\n\\t\\nUpdate website headings!\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        note \u003d new Note(\"..........\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void note_invalidInstantiation_exceptionThrown() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            Note note \u003d new Note(\"            \\t\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            assertEquals(\"java.lang.IllegalArgumentException: \" + Note.MESSAGE_CONSTRAINTS, e.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/model/activity/PriorityTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "don-tay"
        },
        "content": "package seedu.address.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public class PriorityTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void isValidPriority_validPriority_true() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        boolean result \u003d Priority.isValidPriorityValue(\"3\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertEquals(true, result);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void isValidPriority_invalidPriority_false() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "don-tay"
        },
        "content": "         * Test for empty string, or whitespace characters"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "don-tay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertEquals(false, Priority.isValidPriorityValue(\"2.0\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertEquals(false, Priority.isValidPriorityValue(\"3.5\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertEquals(false, Priority.isValidPriorityValue(\"-1\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertEquals(false, Priority.isValidPriorityValue(\"10\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertEquals(false, Priority.isValidPriorityValue(\"abc\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void priority_validInstantiation_noException() throws IllegalArgumentException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Priority priority \u003d new Priority();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        priority \u003d new Priority(\"1\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        priority \u003d new Priority(\"5\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void priority_invalidInstantiation_exceptionThrown() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            Priority note \u003d new Priority(\"6\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            assertEquals(\"java.lang.IllegalArgumentException: \" + Priority.PRIORITY_RANGE_CONSTRAINTS, e.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "don-tay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "don-tay": 44
    }
  }
]
